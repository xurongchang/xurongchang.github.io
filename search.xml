<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx笔记</title>
      <link href="posts/e6040b9b/"/>
      <url>posts/e6040b9b/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx的简介"><a href="#Nginx的简介" class="headerlink" title="Nginx的简介"></a>Nginx的简介</h1><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><p>Nginx (engine x) 是一个高性能的Web服务器(<font color=blue>只能处理静态资源</font>)和反向代理服务器，也可以作为邮件代理服务器。</p><p>Nginx的特点：占用内存小，并发处理能力强、低系统资源消耗。官方测试为5万并发请求。与Nginx同类型的Web服务器还有</p><p>Apache的 Lighttpd，以及淘宝的 Tengine 。（由Nginx改良而来）。</p><h2 id="正向代理和反向代理的概念"><a href="#正向代理和反向代理的概念" class="headerlink" title="正向代理和反向代理的概念"></a>正向代理和反向代理的概念</h2><p>反向代理 (Reverse Proxy) 方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外表现为一个反向代理服务器；</p><p>正向代理类似一个跳板机，代理访问外部资源。比如：我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器，它可以访问那个网站。于是，我连上代理服务器，告诉它我需要那个无法访问网站的内容，代理服务器去取回来，然后返回给我；</p><h2 id="正反向代理的区别"><a href="#正反向代理的区别" class="headerlink" title="正反向代理的区别"></a>正反向代理的区别</h2><p><strong>正向代理：</strong></p><p>用户知道目标服务器地址，但由于网络限制等原因，无法直接访问。这时候需要先连接代理服务器，然后再由代理服务器访问目标服务器。</p><p><strong>反向代理：</strong></p><p>反向代理对用户则是不可知的，比如我们访问百度网站，百度的代理服务器对外的域名为 <a href="https://link.zhihu.com/?target=https://www.baidu.com">https://www.baidu.com</a> 。具体内部的服务器节点我们不知道，现实中我们通过访问百度的代理服务器后，代理服务器给我们转发请求到他们N多的服务器节点中的一个给我们进行搜索后将结果返回。</p><h1 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">user  nobody;# 设置worker进程的用户，指的linux中的用户，会涉及到nginx操作目录或文件的一些权限，默认为nobody</span><br><span class="line"></span><br><span class="line">worker_processes  1;# worker进程工作数设置，一般来说CPU有几个</span><br><span class="line"></span><br><span class="line">error_log  logs/error.log;# nginx 日志级别debug | info | notice | warn | error | crit | alert | emerg，错误级别从左到右越来越大</span><br><span class="line"></span><br><span class="line">pid        logs/nginx.pid;# 设置nginx进程 pid</span><br><span class="line"></span><br><span class="line"># 以上统称全局块</span><br><span class="line">-------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;# 每个worker允许连接的客户端最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 以上统称events块</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;# include 引入外部配置，提高可读性，避免单个配置文件过大</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"># 设定日志格式，main为定义的格式名称，如此 access_log 就可以直接使用这个变量了；</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"># sendfile|使用高效文件传输，提升传输性能。启用后才能使用tcp_nopush，是指当数据表累积一定大小后才发送，提高了效率。</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"># keepalive_timeout设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源损耗。</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;#gzip启用压缩，html/js/css压缩后传输会更快</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;   </span><br><span class="line"># location块</span><br><span class="line"># root: 将接受到的请求根据/usr/share/nginx/html去查找静态资源</span><br><span class="line"># index: 默认去上述的路径找到 index.html或者index.htm</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># sever块</span><br><span class="line"># listen: 代表Nginx监听的端口号</span><br><span class="line"># server_name: 代表Nginx监听请求的ip</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># http块</span><br><span class="line"># include: 代表引入一个外部文件</span><br></pre></td></tr></table></figure><h1 id="关于Nginx中Location映射路径"><a href="#关于Nginx中Location映射路径" class="headerlink" title="关于Nginx中Location映射路径"></a>关于Nginx中Location映射路径</h1><blockquote><p>优先级关系    </p><p>(location = ) &gt; (location  xxx/yyy/zzz) &gt; (location ^~) &gt; (location ~ , ~*) &gt; (location /开头路径)  &gt; (location /)</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1、 = 匹配</span><br><span class="line">  location = / &#123;</span><br><span class="line">  # 精准匹配，主机名后面不能加任何字符；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 2、通用匹配</span><br><span class="line">  location /xxx &#123;</span><br><span class="line">  # 匹配所有以 /xxx 开头的路径</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 3、正则匹配</span><br><span class="line">  location ~/xxx&#123;</span><br><span class="line">  # 匹配所有以 /xxx 开头的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 4、匹配开头路径</span><br><span class="line">  location ^~/xxx/yyy/zzz &#123;</span><br><span class="line">  # 匹配所有以 /xxx/yyy/zzz 开头的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 5、~*\.(gif|jpg|png)$\</span><br><span class="line">  location ~*\.(gif|jpg|png)$\&#123;</span><br><span class="line">  # 匹配后缀为 gif 或者 jpg 或者 png 的路径~ : 表示以什么开头</span><br><span class="line">&#125;    ~*: 表示以什么为结尾 </span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 6、/</span><br><span class="line">  location / &#123;</span><br><span class="line">      # 匹配所有</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 7 、/xxx/yyy/zzz</span><br><span class="line">  location /xxx/yyy/zzz &#123;</span><br><span class="line">      # 匹配完整路径</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx-负载均衡"><a href="#Nginx-负载均衡" class="headerlink" title="Nginx 负载均衡"></a>Nginx 负载均衡</h1><blockquote><p>Nginx 为我们默认提供了三种负载均衡的策略</p></blockquote><p>1、轮询：</p><pre><code>            将客户端发起的请求平均的分配给每一台服务器。</code></pre><p>2、权重：</p><pre><code>            会将客户端发来的请求，根据权重值不同，分配不同数量的请求。</code></pre><p>3、ip_hash：</p><pre><code>            基于客户端ip地址得出的hash值，会将该ip发送的请求，分配给指定的服务器。</code></pre><blockquote><p>Nginx负载均衡的实现</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 1、轮询</span><br><span class="line">upstream 名字(自己自定义) &#123;</span><br><span class="line">    serevr ip地址:端口号;</span><br><span class="line">    serevr ip地址:端口号;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serevr &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    serevr_name locathost;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://名字(与upstream名字相等)/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"># 2、权重</span><br><span class="line">upstream 名字(自己自定义) &#123;</span><br><span class="line">    serevr ip地址:端口号 weight=10;  # weight的数字越大，处理的请求越多。数字越小，处理的请求少。</span><br><span class="line">    serevr ip地址:端口号 weight=1;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serevr &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    serevr_name locathost;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://名字(与upstream名字相等)/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"># 3、ip_hash</span><br><span class="line"> ip_hash;# 添加这么一段话，就可以了；</span><br><span class="line"> upstream 名字(自己自定义) &#123;</span><br><span class="line">    serevr ip地址:端口号;</span><br><span class="line">    serevr ip地址:端口号;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serevr &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    serevr_name locathost;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://名字(与upstream名字相等)/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx的动静分离"><a href="#Nginx的动静分离" class="headerlink" title="Nginx的动静分离"></a>Nginx的动静分离</h1><blockquote><p>Nginx的并发能力公式：</p><p>worker_processes * worker_connections /4|2 = 最终的并发能力</p><p>动态资源需 /4       静态资源需 /2</p><p>Nginx 通过动静分离来提升 Nginx的并发能力和用户的访问速度。</p></blockquote><p><strong>动态资源代理</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置如下</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http:// upstream的名字/；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态资源代理</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 配置如下</span><br><span class="line">location / &#123;</span><br><span class="line">    root 静态资源的路径。</span><br><span class="line">    index 默认访问的资源路径。</span><br><span class="line">    autoindex on; 以列表形式展开静态资源。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意：localtion映射路径问题"><a href="#注意：localtion映射路径问题" class="headerlink" title="注意：localtion映射路径问题"></a>注意：localtion映射路径问题</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location /img &#123;</span><br><span class="line">        root   /usr/data/img;</span><br><span class="line">        index  1.png;</span><br><span class="line">    &#125;</span><br><span class="line"># 如果图片1.png 存放在服务器的  /usr/data/img/1.png ，像上面这么写是会报错的。上面实际的访问地址为: localhost/usr/data/img/img/1.png</span><br><span class="line"># 使用root设置地址 nginx会把 localtion 后面的路径拼接到 root 路径的后面就变成了上面那样。</span><br><span class="line"># 解决方案</span><br><span class="line"># 1、少些一级目录</span><br><span class="line">location /img &#123;</span><br><span class="line">        root   /usr/data;# 少写一级目录，让nginx自己拼接上去；</span><br><span class="line">        index  1.png;</span><br><span class="line">    &#125;</span><br><span class="line"># 2、使用alias</span><br><span class="line">location /imges &#123;</span><br><span class="line">        alias  /usr/data/img;# 使用alias，alias写真实地址的根目录,localtion后面可以根据要求自定义</span><br><span class="line">        index  1.png;# 使用alias，localtion 后面的路径不会拼接到alias后面；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库总结</title>
      <link href="posts/c46f82e8/"/>
      <url>posts/c46f82e8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><h2 id="1-1-现有的数据存储方式有哪些？"><a href="#1-1-现有的数据存储方式有哪些？" class="headerlink" title="1.1 现有的数据存储方式有哪些？"></a>1.1 现有的数据存储方式有哪些？</h2><blockquote><ul><li>Java程序存储数据(变量、对象、数组、集合)，数据保存在内存中，属于瞬时状态存储。</li><li>文件（File）存储数据，保存在硬盘上，属于持久状态存储。</li></ul></blockquote><h2 id="1-2-以上存储方式存在哪些缺点？"><a href="#1-2-以上存储方式存在哪些缺点？" class="headerlink" title="1.2 以上存储方式存在哪些缺点？"></a>1.2 以上存储方式存在哪些缺点？</h2><blockquote><ul><li>没有数据类型的区分。</li><li>存储数据量级较小。</li><li>没有访问安全限制。</li><li>没有备份、恢复机制。</li></ul></blockquote><h1 id="二、数据库"><a href="#二、数据库" class="headerlink" title="二、数据库"></a>二、数据库</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><blockquote><p>数据库是“按照数据结构来组织、存储和管理数据的仓库。是一个长期存储在计算机内的、有组织的、有共享的、统一管理的数据集合。</p></blockquote><h2 id="2-2-数据库的分类"><a href="#2-2-数据库的分类" class="headerlink" title="2.2 数据库的分类"></a>2.2 数据库的分类</h2><blockquote><ul><li>网状结构数据库：美国通用电气公司IDS(Integrated Data Store)，以节点形式存储和访问。</li><li>层次结构数据库：IBM公司IMS(Information Management System),定向有序的树状结构实现存储和访问。</li><li>关系结构数据库：Oracle、DB2、MySQL、SQL Server，以表格(Table) 存储，多表间建立关联关系，通过分类、合并、连接、选取等运算实现访问。</li><li>非关系型数据库：ElastecSearch、MongoDB、Redis。多数使用哈希表，表中以键值(key-value) 的方式实现特定的键和一个指针指向的特定数据。</li></ul></blockquote><h1 id="三、MySQL"><a href="#三、MySQL" class="headerlink" title="三、MySQL"></a>三、MySQL</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h2><blockquote><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，属于 Oracle 旗下产品。</p></blockquote><h2 id="4-2-访问与下载"><a href="#4-2-访问与下载" class="headerlink" title="4.2 访问与下载"></a>4.2 访问与下载</h2><blockquote><p>官方网站：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></blockquote><h2 id="4-3-MySQL-目录结构"><a href="#4-3-MySQL-目录结构" class="headerlink" title="4.3 MySQL 目录结构"></a>4.3 MySQL 目录结构</h2><blockquote><p>核心文件介绍</p></blockquote><table><thead><tr><th>文件夹名称</th><th>内容</th></tr></thead><tbody><tr><td>bin</td><td>命令文件</td></tr><tr><td>lib</td><td>库文件</td></tr><tr><td>include</td><td>头文件</td></tr><tr><td>Share</td><td>字符集、语言等信息</td></tr></tbody></table><h2 id="4-4-MySQL配置文件"><a href="#4-4-MySQL配置文件" class="headerlink" title="4.4 MySQL配置文件"></a>4.4 MySQL配置文件</h2><blockquote><p>在MySQL安装目录中找到my.ini文件，并打开my.ini文件查看几个常用配置参数</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>default-character-set</td><td>客户端默认字符集</td></tr><tr><td>character-set-server</td><td>服务端默认字符集</td></tr><tr><td>port</td><td>客户端和服务器端的端口号</td></tr><tr><td>default-storage-engin</td><td>MySQL默认存储引擎 INNODB</td></tr></tbody></table><h1 id="四、SQL语言"><a href="#四、SQL语言" class="headerlink" title="四、SQL语言"></a>四、SQL语言</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><blockquote><p>SQL(Structured Query Language) 结构化查询语言，用于存储、更新、查询和管理关系数据库系统的程序设计语言。</p></blockquote><h2 id="4-2-MySQL应用"><a href="#4-2-MySQL应用" class="headerlink" title="4.2 MySQL应用"></a>4.2 MySQL应用</h2><blockquote><p>对于数据库的操作，需要在进入MySQL环境下进行指令输入，并在一句指令的末尾使用 ； 结束</p></blockquote><h2 id="4-3-基本命令"><a href="#4-3-基本命令" class="headerlink" title="4.3 基本命令"></a>4.3 基本命令</h2><blockquote><p>查看MySQL中所有数据库</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES; # 显示当前MySQL中包含的所以数据库</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据库</th><th>作用</th></tr></thead><tbody><tr><td>information_schema</td><td>信息数据库，其中保存着关于所以数据库信息(元数据)。元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</td></tr><tr><td>mysql</td><td>核心数据库，主要负责存储数据库的用户、权限设置、关键字等，以及需要使用的控制和管理信息，不可以删除。</td></tr><tr><td>performance_schema</td><td>性能优化的数据库，MySQL 5.5版本中新增的一个性能优化的引擎。</td></tr><tr><td>sys</td><td>系统数据库，MySQL 5.7 版本中新增的可以快速的了解元数据信息的系统数据库便于发现数据库的多样信息，解决性能瓶颈问题</td></tr></tbody></table><blockquote><p>创建自定义数据库</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database mydb1; # 创建mydb1数据库</span><br><span class="line">mysql&gt; create database mydb2 character set gbk; # 创建数据库并设置编码格式为gbk</span><br><span class="line">mysql&gt; create database if not exists mydb3; # 如果mydb4数据库不存在，则创建；如果存在，则不创建。</span><br></pre></td></tr></table></figure><blockquote><p>查看数据库创建信息</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create database mydb1; # 查看创建数据库时的基本信息</span><br></pre></td></tr></table></figure><blockquote><p>修改数据库</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter database mydb1 character set gbk; # 修改数据库的字符编码为gbk</span><br></pre></td></tr></table></figure><blockquote><p>删除数据库</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database mydb1; # 删除数据库mydb1</span><br></pre></td></tr></table></figure><blockquote><p>查看当前所使用的数据库</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select database(); # 查看当前所使用的数据库</span><br></pre></td></tr></table></figure><blockquote><p>使用数据库</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mydb1; # 使用数据库</span><br></pre></td></tr></table></figure><h1 id="五、数据查询【重点】"><a href="#五、数据查询【重点】" class="headerlink" title="五、数据查询【重点】"></a>五、数据查询【重点】</h1><h2 id="5-1-数据库表的基本结构"><a href="#5-1-数据库表的基本结构" class="headerlink" title="5.1 数据库表的基本结构"></a>5.1 数据库表的基本结构</h2><blockquote><p>关系结构数据库是以表格进行数据存储，表格由”行“和”列“组成</p></blockquote><ul><li><strong>注意：==执行查询语句返回的结果集是一张虚拟表。==</strong></li></ul><h2 id="5-2-基本查询"><a href="#5-2-基本查询" class="headerlink" title="5.2 基本查询"></a>5.2 基本查询</h2><blockquote><p>语法：select    列名    from    表名</p></blockquote><h3 id="5-2-1-查询部分列"><a href="#5-2-1-查询部分列" class="headerlink" title="5.2.1 查询部分列"></a>5.2.1 查询部分列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工表中所有员工的编号、名字、邮箱</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,email <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-查询所有列"><a href="#5-2-2-查询所有列" class="headerlink" title="5.2.2 查询所有列"></a>5.2.2 查询所有列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工表中所有员工的所有信息(所有列)</span></span><br><span class="line"><span class="keyword">select</span> 所有列的列名 <span class="keyword">from</span> t_employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><ul><li>*<em>注意：==生产环境下，优先使用列名查询。</em> 的方式需要转换成列名，效率低，可读性差。==**</li></ul><h3 id="5-5-3-对列中的数据进行运算"><a href="#5-5-3-对列中的数据进行运算" class="headerlink" title="5.5.3 对列中的数据进行运算"></a>5.5.3 对列中的数据进行运算</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工表中所有员工的编号、名字、年薪</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary*<span class="number">12</span> <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>两列做加法运算</td></tr><tr><td>-</td><td>两列做减法运算</td></tr><tr><td>*</td><td>两列做乘法运算</td></tr><tr><td>/</td><td>两列做除法运算</td></tr></tbody></table><ul><li>注意：% 是占位符，而非模运算符。</li></ul><h3 id="5-3-4-列的别名"><a href="#5-3-4-列的别名" class="headerlink" title="5.3.4 列的别名"></a>5.3.4 列的别名</h3><blockquote><p> 语法：列 as “别名”</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工表中所有员工的编号、名字、年薪(列名均为中文)</span></span><br><span class="line"><span class="keyword">select</span> employee_id <span class="keyword">as</span> <span class="string">&quot;编号&quot;</span>,first_name <span class="keyword">as</span> <span class="string">&quot;名字&quot;</span>,salary*<span class="number">12</span> <span class="keyword">as</span> <span class="string">&quot;年薪&quot;</span> <span class="keyword">from</span> t_employees; </span><br></pre></td></tr></table></figure><h3 id="5-3-5-查询结果去重"><a href="#5-3-5-查询结果去重" class="headerlink" title="5.3.5 查询结果去重"></a>5.3.5 查询结果去重</h3><blockquote><p>DISTINCT 列名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工表中所有经理的ID</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> manager_id <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h2 id="5-3-排序查询"><a href="#5-3-排序查询" class="headerlink" title="5.3 排序查询"></a>5.3 排序查询</h2><blockquote><p>语法：select 列名 from 表名 order by 排序列 [排序规则]</p></blockquote><table><thead><tr><th>排序规则</th><th>描述</th></tr></thead><tbody><tr><td>ASC</td><td>对前面排序列做升序排序</td></tr><tr><td>DESC</td><td>对前面排序列做降序排序</td></tr></tbody></table><h3 id="5-3-1-依据单列排序"><a href="#5-3-1-依据单列排序" class="headerlink" title="5.3.1 依据单列排序"></a>5.3.1 依据单列排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工的编号，名字，薪资。按照工资高低进行降序排序</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-依据多列排序"><a href="#5-3-2-依据多列排序" class="headerlink" title="5.3.2 依据多列排序"></a>5.3.2 依据多列排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工的编号，名字，薪资。按照工资高低进行升序排序(薪资相同时，按照编号进行升序排序)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>,employee_id <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h2 id="5-4-条件查询"><a href="#5-4-条件查询" class="headerlink" title="5.4 条件查询"></a>5.4 条件查询</h2><blockquote><p>语法：select 列名 from 表名 where 条件</p></blockquote><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>where 条件</td><td>在查询结果中，筛选符合条件的查询结果，条件为布尔表达式</td></tr></tbody></table><h3 id="5-4-1-等值判断"><a href="#5-4-1-等值判断" class="headerlink" title="5.4.1 等值判断(=)"></a>5.4.1 等值判断(=)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询薪资是11000的员工信息(编号，名字，薪资)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">where</span> salary = <span class="number">11000</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：与java不同(==),mysql 中等值判断使用 =</strong> </li></ul><h3 id="5-4-2-逻辑判断-and、or、not"><a href="#5-4-2-逻辑判断-and、or、not" class="headerlink" title="5.4.2 逻辑判断(and、or、not)"></a>5.4.2 逻辑判断(and、or、not)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询薪资是11000并且提成是0.30的员工信息(编号、名字、薪资)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">where</span> salary = <span class="number">11000</span> <span class="keyword">and</span> commission_pct = <span class="number">0.30</span></span><br></pre></td></tr></table></figure><h3 id="5-4-3-不等值判断-gt-、-lt-、-gt-、-lt-、"><a href="#5-4-3-不等值判断-gt-、-lt-、-gt-、-lt-、" class="headerlink" title="5.4.3 不等值判断(&gt;、&lt;、&gt;=、&lt;=、!=)"></a>5.4.3 不等值判断(&gt;、&lt;、&gt;=、&lt;=、!=)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工的薪资在6000~10000之间的员工信息(编号、名字、薪资)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">where</span> salary &gt;= <span class="number">6000</span> <span class="keyword">and</span> salary &lt;= <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="5-4-4-区间判断-betwee-and"><a href="#5-4-4-区间判断-betwee-and" class="headerlink" title="5.4.4 区间判断(betwee and)"></a>5.4.4 区间判断(betwee and)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工的薪资在6000~10000之间的员工信息(编号、名字、薪资)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">where</span> salary betwee  <span class="number">6000</span> <span class="keyword">and</span> <span class="number">10000</span>; <span class="comment"># 闭区间，包含区间边界的两个值</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意：==在区间判断语法中，小值在前，大值在后，反之，得不到正确的结果==</strong></li></ul><h3 id="5-4-5-NULL值判断-IS-NULL、IS-NOT-NULL"><a href="#5-4-5-NULL值判断-IS-NULL、IS-NOT-NULL" class="headerlink" title="5.4.5 NULL值判断(IS NULL、IS NOT NULL)"></a>5.4.5 NULL值判断(IS NULL、IS NOT NULL)</h3><blockquote><ul><li><p>IS NULL</p><p>列名  IS NULL</p></li><li><p>IS NOT NULL </p><p>列名 IS NOT NULL</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询没有提成的员工信息(编号、名字、薪资、提成)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees </span><br><span class="line"><span class="keyword">where</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="5-4-6-枚举查询-IN-值1，值2，值3"><a href="#5-4-6-枚举查询-IN-值1，值2，值3" class="headerlink" title="5.4.6 枚举查询( IN (值1，值2，值3))"></a>5.4.6 枚举查询( IN (值1，值2，值3))</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询部门编号为70、80、90 的员工信息(编号、名字、薪资、部门编号)</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary，department_id</span><br><span class="line"><span class="keyword">from</span> t_employees </span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">in</span> (<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>);</span><br></pre></td></tr></table></figure><ul><li>注意：IN 的查询效率较低，可通过多条件拼接。</li></ul><h3 id="5-4-7-模糊查询"><a href="#5-4-7-模糊查询" class="headerlink" title="5.4.7 模糊查询"></a>5.4.7 模糊查询</h3><blockquote><ul><li><p>LIKE _      (单个任意字符)</p><p>列名  LIKE  ‘张_’</p></li><li><p>LIKE %     (任意长度的任意字符)</p><p>列名 LIKE  ‘张%’</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 查询名字以&#x27;L&#x27;开头的员工信息(编号，名字，薪资,部门编号)</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , department_id</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> ‘L%’;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询名字以&quot;L&quot;开头并且长度为4的员工信息(编号，名字，薪资，部门编号)SELECT employee_id , first_name , salary , department_id </span></span><br><span class="line">FROM t_employees</span><br><span class="line">WHERE first_name LIKE‘L___&#x27;;</span><br></pre></td></tr></table></figure><h3 id="5-4-8-分支结构查询"><a href="#5-4-8-分支结构查询" class="headerlink" title="5.4.8 分支结构查询"></a>5.4.8 分支结构查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">WHEN 条件1 THEN 结果1</span><br><span class="line">WHEN 条件2 THEN 结果2</span><br><span class="line">WHEN 条件3 THEN 结果3</span><br><span class="line">ELSE 结果</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li>注意 ： 通过使用 case end 进行条件判断，每条数据对应生成一个值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询员工信息(编号，名字，薪资，薪资级别&lt;对应条件表达式生成&gt;)</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id , first_name , salary , department_id ,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">8000</span> <span class="keyword">AND</span> salary&lt;<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">6000</span> <span class="keyword">AND</span> salary&lt;<span class="number">8000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">4000</span> <span class="keyword">AND</span> salary&lt;<span class="number">6000</span> <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">as</span> <span class="string">&quot;LEVEL&quot;</span></span><br><span class="line"><span class="keyword">FROM</span> t_employees;</span><br></pre></td></tr></table></figure><h2 id="5-5-时间查询"><a href="#5-5-时间查询" class="headerlink" title="5.5 时间查询"></a>5.5 时间查询</h2><blockquote><p>语法：select 时间函数([参数列表])</p></blockquote><ul><li>经验：执行时间函数查询，会自动生成一张虚表(一行一列)</li></ul><table><thead><tr><th>时间函数</th><th>描述</th></tr></thead><tbody><tr><td>SYSDATE()</td><td>当前系统时间(日、月、年、时、分、秒)</td></tr><tr><td>CURDATE()</td><td>获取当前日期</td></tr><tr><td>CURTIME()</td><td>获取当前时间</td></tr><tr><td>WEEK(DATE)</td><td>获取指定日期为一年中的第几周</td></tr><tr><td>YEAR(DATE)</td><td>获取指定日期的年份</td></tr><tr><td>HOUR(TIME)</td><td>获取指定时间的小时值</td></tr><tr><td>MINUTE(TIME)</td><td>获取时间的分钟值</td></tr><tr><td>DATEDIFF(DATE1,DATE2)</td><td>获取DATE1和DATE2之间相隔的天数</td></tr><tr><td>ADDDATE(DATE,N)</td><td>计算DATE加上N天后的日期</td></tr></tbody></table><h3 id="5-5-1-获得当前系统时间"><a href="#5-5-1-获得当前系统时间" class="headerlink" title="5.5.1 获得当前系统时间"></a>5.5.1 获得当前系统时间</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span>()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>()</span><br></pre></td></tr></table></figure><h2 id="5-6-字符串查询"><a href="#5-6-字符串查询" class="headerlink" title="5.6 字符串查询"></a>5.6 字符串查询</h2><blockquote><p>语法：SELECT 字符串函数([参数列表])</p></blockquote><table><thead><tr><th>字符串函数</th><th>说明</th></tr></thead><tbody><tr><td>CONCAT(str1,str2,str….)</td><td>将多个字符串连接</td></tr><tr><td>INSERT(str,pos,len,newStr)</td><td>将str中指定pos位置开始len长度的内容替换为newStr</td></tr><tr><td>LOWER(str)</td><td>将指定字符串转换为小写</td></tr><tr><td>UPPER(str)</td><td>将指定字符串转换为大写</td></tr><tr><td>SUBSTRING(str,num,len)</td><td>将str字符串指定num位置开始截取len个内容</td></tr></tbody></table><h3 id="5-6-1-字符串应用"><a href="#5-6-1-字符串应用" class="headerlink" title="5.6.1 字符串应用"></a>5.6.1 字符串应用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接内容</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&#x27;My&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;QL&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串替换</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;这是一个数据库&#x27;</span>，<span class="number">3</span>，<span class="number">2</span>，<span class="string">&#x27;MySQL&#x27;</span>)<span class="comment"># 这是MySQL数据库</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定内容转换为小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">&#x27;MYSQL&#x27;</span>); <span class="comment"># mysql</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定内容转换为大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">&#x27;mysql&#x27;</span>); <span class="comment"># MYSQL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 截取指定内容</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRRING(<span class="string">&#x27;JavaMySQLOracle&#x27;</span>,<span class="number">5</span>,<span class="number">5</span>); <span class="comment"># MySQL</span></span><br></pre></td></tr></table></figure><h2 id="5-7-聚合函数"><a href="#5-7-聚合函数" class="headerlink" title="5.7 聚合函数"></a>5.7 聚合函数</h2><blockquote><p>语法：SELECT 聚合函数(列名) FROM 表名；</p></blockquote><ul><li><strong>经验：==对多条数据的单列进行统计，返回统计后的一行结果。==</strong></li></ul><table><thead><tr><th>聚合函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM()</td><td>求所有行中单列结果的总和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr><tr><td>COUNT()</td><td>求总行数</td></tr></tbody></table><h3 id="5-7-1-单列总和"><a href="#5-7-1-单列总和" class="headerlink" title="5.7.1 单列总和"></a>5.7.1 单列总和</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计所有员工每月的工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="5-7-2-单列平均值"><a href="#5-7-2-单列平均值" class="headerlink" title="5.7.2 单列平均值"></a>5.7.2 单列平均值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计所有员工每月的平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="5-7-3-单列最大值"><a href="#5-7-3-单列最大值" class="headerlink" title="5.7.3 单列最大值"></a>5.7.3 单列最大值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计所有员工中月薪最高的工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="5-7-4-单列最小值"><a href="#5-7-4-单列最小值" class="headerlink" title="5.7.4 单列最小值"></a>5.7.4 单列最小值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计所有员工中月薪最低的工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="5-7-5-总行数"><a href="#5-7-5-总行数" class="headerlink" title="5.7.5 总行数"></a>5.7.5 总行数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计员工总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计有提出的员工人数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(commission_pct)</span><br><span class="line"><span class="keyword">from</span> t_emplotees;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==聚合函数自动忽略 null 值，不进行统计。==</strong></li></ul><h2 id="5-8-分组查询"><a href="#5-8-分组查询" class="headerlink" title="5.8 分组查询"></a>5.8 分组查询</h2><blockquote><p>语法：select 列名 from 表名 where 条件 GROUP BY 分组依据(列)；</p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>GROUP BY</td><td>分组依据，必须在 WHERE 之后生效</td></tr></tbody></table><h3 id="5-8-1-查询各部门的总人数"><a href="#5-8-1-查询各部门的总人数" class="headerlink" title="5.8.1 查询各部门的总人数"></a>5.8.1 查询各部门的总人数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：</span></span><br><span class="line"><span class="comment"># 1、按照部门编号进行分组(分组依据 department_id).</span></span><br><span class="line"><span class="comment"># 2、再针对各部门的人数进行统计(count)</span></span><br><span class="line"><span class="keyword">select</span> department_id,<span class="keyword">count</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id;</span><br></pre></td></tr></table></figure><h3 id="5-8-2-查询各部门的平均工资"><a href="#5-8-2-查询各部门的平均工资" class="headerlink" title="5.8.2 查询各部门的平均工资"></a>5.8.2 查询各部门的平均工资</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：</span></span><br><span class="line"><span class="comment"># 1、按照部门编号进行分组(分组依据 department_id)</span></span><br><span class="line"><span class="comment"># 2、针对每个部门进行平均工资统计(avg)</span></span><br><span class="line"><span class="keyword">select</span> department_id,<span class="keyword">avg</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id;</span><br></pre></td></tr></table></figure><h3 id="5-8-3-查询各个部门、各个岗位的人数"><a href="#5-8-3-查询各个部门、各个岗位的人数" class="headerlink" title="5.8.3 查询各个部门、各个岗位的人数"></a>5.8.3 查询各个部门、各个岗位的人数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：</span></span><br><span class="line"><span class="comment">#1.按照部门编号进行分组(分组依据department_id)。</span></span><br><span class="line"><span class="comment">#2.按照岗位名称进行分组(分组依据job_id)。</span></span><br><span class="line"><span class="comment">#3.针对每个部门中的各个岗位进行人数统计(count)。</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id , job_id ,<span class="keyword">COUNT</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> t_employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id , job_id;</span><br></pre></td></tr></table></figure><h3 id="5-8-4-常见问题"><a href="#5-8-4-常见问题" class="headerlink" title="5.8.4 常见问题"></a>5.8.4 常见问题</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询各个部门id、总人数、first_name</span></span><br><span class="line"><span class="keyword">select</span> department_id,<span class="keyword">count</span>(*),first_name</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id; <span class="comment"># 这么写是错误的，详见下面注意事项；</span></span><br></pre></td></tr></table></figure><ul><li>注意：分组查询中，select显示的列只能是分组依据列，或者聚合函数列，不能出现其他列。</li></ul><h2 id="5-9-分组过滤查询"><a href="#5-9-分组过滤查询" class="headerlink" title="5.9 分组过滤查询"></a>5.9 分组过滤查询</h2><blockquote><p>语法：select 列名 from 表名 where 条件 group up 分组列 having 过滤规则；</p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>HAVING</td><td>过滤规则定义对分组后的数据进行过滤</td></tr></tbody></table><h3 id="5-9-1-统计部门的最高工资"><a href="#5-9-1-统计部门的最高工资" class="headerlink" title="5.9.1 统计部门的最高工资"></a>5.9.1 统计部门的最高工资</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计60、70、90号部门的最高工资</span></span><br><span class="line"><span class="comment"># 思路：</span></span><br><span class="line"><span class="comment">#1)、确定分组依据(department_id)</span></span><br><span class="line"><span class="comment">#2)、对分组后的数据，过滤出部门编号是60、70、90信息</span></span><br><span class="line"><span class="comment">#3)、max()函数处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> department_id，<span class="keyword">max</span>(salary)</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id</span><br><span class="line"><span class="keyword">having</span> department_id <span class="keyword">in</span> (<span class="number">60</span>,<span class="number">70</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># group by 确定分组依据department_id</span></span><br><span class="line"><span class="comment"># having 过滤出60，70，90</span></span><br><span class="line"><span class="comment"># select 查看部门编号和max函数</span></span><br></pre></td></tr></table></figure><h2 id="5-10-限定查询"><a href="#5-10-限定查询" class="headerlink" title="5.10 限定查询"></a>5.10 限定查询</h2><blockquote><p>select 列名 from 表名 LIMIT 起始行，查询行数</p></blockquote><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>LIMIT offset_start, row_count</td><td>限定查询结果的起始行和总行数</td></tr></tbody></table><h3 id="5-10-1-查询前5行记录"><a href="#5-10-1-查询前5行记录" class="headerlink" title="5.10.1 查询前5行记录"></a>5.10.1 查询前5行记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中前五名员工的所有信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：起始行是从0开始，代表了第一行。第二个参数代表的是从指定行开始查询几行</li></ul><h3 id="5-10-2-limit典型应用"><a href="#5-10-2-limit典型应用" class="headerlink" title="5.10.2 limit典型应用"></a>5.10.2 limit典型应用</h3><p>分页查询：一页显示 10 条，一共查询三页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：第一页是从 0 开始，显示 10 条</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">limit</span> <span class="number">0</span>，<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 思路：第一页是从 10 开始，显示 10 条</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">limit</span> <span class="number">10</span>，<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 思路：第一页是从 20 开始，显示 10 条</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">limit</span> <span class="number">20</span>，<span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>经验：==在分页应用场景中，起始行是变化的，但是一页显示的条数是不变的==</strong></li></ul><h2 id="5-11-查询总结"><a href="#5-11-查询总结" class="headerlink" title="5.11 查询总结"></a>5.11 查询总结</h2><h3 id="5-11-1-SQL-语句编写顺序"><a href="#5-11-1-SQL-语句编写顺序" class="headerlink" title="5.11.1 SQL 语句编写顺序"></a>5.11.1 SQL 语句编写顺序</h3><blockquote><p>select 列名 from 表名 where 条件 group up 分组 having 过滤条件 order by 排序列(asc|desc)  limit 起始行，总条数；</p></blockquote><h3 id="5-11-2-SQL语句执行顺序"><a href="#5-11-2-SQL语句执行顺序" class="headerlink" title="5.11.2 SQL语句执行顺序"></a>5.11.2 SQL语句执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.FROM : 指定数据来源表</span><br><span class="line">2.WHERE : 对查询数据做第一次过滤</span><br><span class="line">3.GROUP BY : 分组</span><br><span class="line">4.HAVING : 对分组后的数据第二次过滤</span><br><span class="line">5.SELECT ： 查询各字段的值</span><br><span class="line">6.ORDER BY ： 排序</span><br><span class="line">7.LIMIT : 限定查询结果</span><br></pre></td></tr></table></figure><h2 id="5-12-子查询-作为条件判断"><a href="#5-12-子查询-作为条件判断" class="headerlink" title="5.12 子查询(作为条件判断)"></a>5.12 子查询(作为条件判断)</h2><blockquote><p>select 列名 from 表名 where  条件 (子查询结果)</p></blockquote><h3 id="5-12-1-查询工资大于Bruce-的员工信息"><a href="#5-12-1-查询工资大于Bruce-的员工信息" class="headerlink" title="5.12.1 查询工资大于Bruce 的员工信息"></a>5.12.1 查询工资大于Bruce 的员工信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、先查询到 Bruce 的工资(一行一列)</span></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> t_employees <span class="keyword">where</span> first_name = <span class="string">&#x27;Bruce&#x27;</span>; <span class="comment"># 工资是 6000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、查询工资大于 Bruce 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">where</span> salary &gt; <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、将 1 、2 两条语句整合</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">where</span> salary &gt; (<span class="keyword">select</span> salary <span class="keyword">from</span> t_employees <span class="keyword">where</span> first_name = <span class="string">&#x27;Bruce&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==将子查询“一行一列”的结果作为外部查询的条件，做第二次查询；==</strong></li><li><strong>==子查询得到一行一列的结果才能作为外部查询的等值判断条件或不等值条件判断；==</strong></li></ul><h2 id="5-13-子查询-作为枚举查询条件"><a href="#5-13-子查询-作为枚举查询条件" class="headerlink" title="5.13 子查询(作为枚举查询条件)"></a>5.13 子查询(作为枚举查询条件)</h2><blockquote><p>select 列名 from 表名 where 列名 in (子查询结果)；</p></blockquote><h3 id="5-13-1-查询与名为’King’同一部门的员工信息"><a href="#5-13-1-查询与名为’King’同一部门的员工信息" class="headerlink" title="5.13.1 查询与名为’King’同一部门的员工信息"></a>5.13.1 查询与名为’King’同一部门的员工信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：</span></span><br><span class="line"><span class="comment"># 1、先查询 &#x27;King&#x27; 所在的部门编号(多行单列)</span></span><br><span class="line"><span class="keyword">select</span> department_id</span><br><span class="line"><span class="keyword">from</span> t_empployees</span><br><span class="line"><span class="keyword">where</span> last_name = <span class="string">&#x27;King&#x27;</span>; // 部门编号：80、90</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、再查询80、90号部门的员工信息</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary,department_id</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">in</span> (<span class="number">80</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、SQL：合并</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary,department_id</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">in</span> (<span class="keyword">select</span> department_id <span class="keyword">from</span> t_empployees <span class="keyword">where</span> last_name = <span class="string">&#x27;King&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>==将子查询’多行一列’的结果作为外部查询的枚举查询条件，做第二次查询；==</strong></li></ul><h3 id="5-13-2-工资高于60部门所有人的信息"><a href="#5-13-2-工资高于60部门所有人的信息" class="headerlink" title="5.13.2 工资高于60部门所有人的信息"></a>5.13.2 工资高于60部门所有人的信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、查询 60 部门所有人的工资(多行多列)</span></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> t_empployees <span class="keyword">where</span> dapartment_id = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询高于 60 部门所有人的工资的员工信息(高于所有)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">where</span> salary &gt; <span class="keyword">ALL</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> t_empployees <span class="keyword">where</span> dapartment_id = <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询低于 60 部门所有人的工资的员工信息(高于所有)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_employees <span class="keyword">where</span> salary &gt; <span class="keyword">ANY</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> t_empployees <span class="keyword">where</span> dapartment_id = <span class="number">60</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==当子查询结果集形式为多行单列时可以使用 ANY 或 ALL 关键字；==</strong></li></ul><h2 id="5-14-子查询-作为一张表"><a href="#5-14-子查询-作为一张表" class="headerlink" title="5.14 子查询(作为一张表)"></a>5.14 子查询(作为一张表)</h2><blockquote><p>select 列名 from (子查询的结果集) where 条件；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路：</span></span><br><span class="line"><span class="comment"># 1、先对所有员工的薪资进行排序(排序后的临时表)</span></span><br><span class="line"><span class="keyword">select</span> employee_id ,first_name,salary</span><br><span class="line"><span class="keyword">from</span> t_employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、再查询临时表中前5行员工信息</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> (临时表)</span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>，<span class="number">5</span>；</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQL：合并</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,salary</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> employee_id ,first_name,salary <span class="keyword">from</span> t_employees <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> temp</span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>，<span class="number">5</span>；</span><br></pre></td></tr></table></figure><ul><li><strong>==将子查询”多行多列”的结果作为外部查询的一张表，做第二次查询。==</strong></li><li><strong>注意：==子查询作为临时表，为其赋予一个临时表名。==</strong></li></ul><h2 id="5-15-合并查询"><a href="#5-15-合并查询" class="headerlink" title="5.15 合并查询"></a>5.15 合并查询</h2><blockquote><ul><li>select * from 表名1 UNION select * from 表名2；</li><li>select * from 表名1 UNION ALL  select * from 表名2；</li></ul></blockquote><h3 id="5-15-1-合并两张表的结果-去除重复记录"><a href="#5-15-1-合并两张表的结果-去除重复记录" class="headerlink" title="5.15.1 合并两张表的结果(去除重复记录)"></a>5.15.1 合并两张表的结果(去除重复记录)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两张表的结果，去除重复记录</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">UNION</span> <span class="keyword">select</span> * <span class="keyword">from</span> t2；</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==合并结果的两张表，列数必须相同，列的数据类型可以不同==</strong></li></ul><h3 id="5-15-2-合并两张表的结果-保留重复记录"><a href="#5-15-2-合并两张表的结果-保留重复记录" class="headerlink" title="5.15.2 合并两张表的结果(保留重复记录)"></a>5.15.2 合并两张表的结果(保留重复记录)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两张表的结果，不去除重复记录(显示所有)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">UNION</span> <span class="keyword">ALL</span>  <span class="keyword">select</span> * <span class="keyword">from</span> t2；</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==使用<code>UNION</code>合并结果集，会去除掉两张表中重复的数据；==</strong></li></ul><h2 id="5-16-表连接查询"><a href="#5-16-表连接查询" class="headerlink" title="5.16 表连接查询"></a>5.16 表连接查询</h2><blockquote><p>select 列名 from 表1 连接方式 表2 on 连接条件；</p></blockquote><h3 id="5-16-1-内连接查询-inner-join-on"><a href="#5-16-1-内连接查询-inner-join-on" class="headerlink" title="5.16.1 内连接查询( inner join on )"></a>5.16.1 内连接查询( inner join on )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查询所有有部门的员工信息 (不包括没有部门的员工) SQL 标准</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t.jobs <span class="number">0</span>N t_employees.JOB_ID = t.jobs .JOB_ID</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查询所有有部门的员工信息 (不包括没有部门的员工) MYSQL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_employees,t.jobs <span class="keyword">WHERE</span> t_employees.JOB_ID = t.jobs.JOB_ID</span><br></pre></td></tr></table></figure><ul><li><strong>经验:==在MySql中，第二种方式也可以作为内连接查询，但是不符合SQL标准;==</strong></li><li><strong>==而第一种属于SQL标准，与其他关系型数据库通用;==</strong></li></ul><h3 id="5-16-2-三表连接查询"><a href="#5-16-2-三表连接查询" class="headerlink" title="5.16.2 三表连接查询"></a>5.16.2 三表连接查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所有员工工号、名字、部门名称、部门所在国家ID</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_departments d</span><br><span class="line"><span class="keyword">on</span> e.department_id = d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_locations l</span><br><span class="line"><span class="keyword">ON</span> d. location_id = l.location_id</span><br></pre></td></tr></table></figure><h3 id="5-16-3-左外连接-left-join-on"><a href="#5-16-3-左外连接-left-join-on" class="headerlink" title="5.16.3 左外连接( left join on )"></a>5.16.3 左外连接( left join on )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有员工信息，以及所对应的部门名称（没有部门的员工，也在查询结果中，部门名称以NULL填充)</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id , e.first_name , e.salary , d.department_name <span class="keyword">FROM</span> t_employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id = d.department_id;</span><br></pre></td></tr></table></figure><ul><li><p><strong>注意:==左外连接，是以左表为主表，依次向右匹配，匹配到，返回结果==</strong></p></li><li><p><strong>==匹配不到，则返回 NULL 值填充==</strong></p></li></ul><h3 id="5-16-4-右外连接-right-join-on"><a href="#5-16-4-右外连接-right-join-on" class="headerlink" title="5.16.4 右外连接 (right join on )"></a>5.16.4 右外连接 (right join on )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所有部门信息，以及此部门中的所有员工信息（没有员工的部门，也在查询结果中，员工信息以NULL|填充)</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id , e.first_name , e.salary , d.department_name <span class="keyword">FROM</span> t_employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> t_departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id = d.department_id;</span><br></pre></td></tr></table></figure><ul><li><p><strong>注意:==右外连接，是以右表为主表，依次向左匹配，匹配到，返回结果==</strong></p></li><li><p><strong>==匹配不到，则返回 NULL 值填充==</strong></p></li></ul><h1 id="六、DML操作"><a href="#六、DML操作" class="headerlink" title="六、DML操作"></a>六、DML操作</h1><h2 id="6-1-新增-insert"><a href="#6-1-新增-insert" class="headerlink" title="6.1 新增(insert)"></a>6.1 新增(insert)</h2><blockquote><p>insert into 表名(列1，列2，列3) values (值1，值2，值3….)</p></blockquote><h3 id="6-1-1-添加一条信息"><a href="#6-1-1-添加一条信息" class="headerlink" title="6.1.1 添加一条信息"></a>6.1.1 添加一条信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一条工作岗位信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_jobs(JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) <span class="keyword">values</span> (<span class="string">&#x27;JAVA_LE&#x27;</span>,<span class="string">&#x27;JAVA_Lecturue&#x27;</span>,<span class="number">2500</span>,<span class="number">9000</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==表名后的列名和 values 里的值要一一对应(个数、顺序、类型)；==</strong></li></ul><h2 id="6-2-修改-update"><a href="#6-2-修改-update" class="headerlink" title="6.2 修改(update)"></a>6.2 修改(update)</h2><blockquote><p> update 表名 set 列1 = 新值1，列2 = 新值2，….. where 条件；</p></blockquote><h3 id="6-2-1-修改一条信息"><a href="#6-2-1-修改一条信息" class="headerlink" title="6.2.1 修改一条信息"></a>6.2.1 修改一条信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改编号为100 的员工工资为25000</span></span><br><span class="line"><span class="keyword">update</span> t_employees <span class="keyword">set</span> salary = <span class="number">25000</span> <span class="keyword">where</span> EMPLOYEE_ID = <span class="string">&#x27;100&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==set 后多个列名 = 值，绝大多数情况都要加 where 条件，指定修改，否则为整表更新；==</strong></li></ul><h2 id="6-3-删除-delete"><a href="#6-3-删除-delete" class="headerlink" title="6.3 删除(delete)"></a>6.3 删除(delete)</h2><blockquote><p>delete from 表名 where 条件；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除编号为 135 的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_employees <span class="keyword">where</span> EMPLOYEE_ID= <span class="string">&#x27;135&#x27;</span>;</span><br><span class="line"><span class="comment"># 删除名字为pater，年龄为 35的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_employees <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">&#x27;pater&#x27;</span> <span class="keyword">and</span> age = <span class="string">&#x27;35&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==删除时，如若不加<code>where</code> 条件，删除的是整张表的数据。==</strong></li></ul><h2 id="6-4-清空整表数据-truncate"><a href="#6-4-清空整表数据-truncate" class="headerlink" title="6.4 清空整表数据( truncate )"></a>6.4 清空整表数据( truncate )</h2><blockquote><p>truncate table 表名；</p></blockquote><h3 id="6-4-1-清空整张表"><a href="#6-4-1-清空整张表" class="headerlink" title="6.4.1 清空整张表"></a>6.4.1 清空整张表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清空 t_countries 整张表</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> t_countries;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==与delete 不加where删除整表数据不同，truncate 是把表销毁，再按照原表的格式创建一张新表；==</strong></li></ul><h1 id="七、数据表操作"><a href="#七、数据表操作" class="headerlink" title="七、数据表操作"></a>七、数据表操作</h1><h2 id="7-1-数据类型"><a href="#7-1-数据类型" class="headerlink" title="7.1 数据类型"></a>7.1 数据类型</h2><blockquote><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p></blockquote><h3 id="7-1-1-数值类型"><a href="#7-1-1-数值类型" class="headerlink" title="7.1.1 数值类型"></a>7.1.1 数值类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>范围(有符号)</th><th>范围(无符号)</th><th>用途</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td>(-2147483648,2147483647)</td><td>(0,4294967295)</td><td>大整数值</td></tr><tr><td>DOUBLE</td><td>8字节</td><td>(-1.797E+308,-2.22E-308)</td><td>(0,2.22E-308,1.797E+308)</td><td>双精度浮点数值</td></tr><tr><td>DOUBLE(M,D)</td><td>8个字节，M表示长度，D表示小数位数</td><td>(同上，受M和D的约束 DOUBLE(5,2) -999.99 - +999.99)</td><td>同上，受M和D的约束</td><td>双精度浮点数</td></tr><tr><td>DECIMAL(M,D)</td><td>DECIMAL(M,D)</td><td>依赖于M和D的值，M最大值为65</td><td>依赖于M和D的值，M最大值为65</td><td>小数值</td></tr></tbody></table><h3 id="7-1-2-日期类型"><a href="#7-1-2-日期类型" class="headerlink" title="7.1.2 日期类型"></a>7.1.2 日期类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-0-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038 结束时间是第2147483647秒北京时间 2038-1-19  11：14：07，格林尼治时间 2038年1月19日 凌晨 03：14：07</td><td>YYYY-MM-DD  HH:MM:SS</td><td>混合日期时间值，时间戳</td></tr></tbody></table><h3 id="7-1-3-字符串类型"><a href="#7-1-3-字符串类型" class="headerlink" title="7.1.3 字符串类型"></a>7.1.3 字符串类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字符</td><td>定长字符串char(10) 10个字符</td></tr><tr><td>VARCHAR</td><td>0-65535字节</td><td>变长字符串 varchar(10) 10个字符</td></tr><tr><td>BLOB( binary large object )</td><td>0-65535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65535字节</td><td>长文本数据</td></tr></tbody></table><ul><li><strong>==CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。==</strong></li><li><strong>==BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值得最大长度不同。==</strong></li></ul><h2 id="7-2-数据表的创建-creata"><a href="#7-2-数据表的创建-creata" class="headerlink" title="7.2 数据表的创建( creata )"></a>7.2 数据表的创建( creata )</h2><blockquote><p>create table 表名 (</p><p>列名   数据类型 [约束]，</p><p>列名   数据类型 [约束]，</p><p>…….</p><p>列名   数据类型 [约束]     # 最后一列的末尾不加逗号</p><p>)[charset=utf8]                # 可根据需要指定表的字符编码集</p></blockquote><table><thead><tr><th>列名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>subjectId</td><td>INT</td><td>课程编号</td></tr><tr><td>subjectName</td><td>VARCHAR(20)</td><td>课程名称</td></tr><tr><td>subjectHours</td><td>INT</td><td>课程时长</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依据上表创建数据表，并向其中插入 3 条测试语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectID <span class="built_in">INT</span>,</span><br><span class="line">subjectName <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">subjectHours <span class="built_in">INT</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">&#x27;JavaScript&#x27;</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="7-3-数据表的修改-alter"><a href="#7-3-数据表的修改-alter" class="headerlink" title="7.3 数据表的修改(alter)"></a>7.3 数据表的修改(alter)</h2><blockquote><p>alter table 表名 操作；</p></blockquote><h3 id="7-3-1-向现有中添加列"><a href="#7-3-1-向现有中添加列" class="headerlink" title="7.3.1 向现有中添加列"></a>7.3.1 向现有中添加列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在课程表基础上添加 gradeId 列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> subject <span class="keyword">add</span> gradeId <span class="built_in">int</span>;</span><br></pre></td></tr></table></figure><h3 id="7-3-2-修改表中的列"><a href="#7-3-2-修改表中的列" class="headerlink" title="7.3.2 修改表中的列"></a>7.3.2 修改表中的列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改课程表中课程名称长度为10个字符</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> subject <span class="keyword">modify</span> subjectName <span class="built_in">varchar</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==修改表中的某列时，也要写全列的名字，数据类型，约束==</strong></li></ul><h3 id="7-3-3-删除表中的列"><a href="#7-3-3-删除表中的列" class="headerlink" title="7.3.3 删除表中的列"></a>7.3.3 删除表中的列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除课程表中 gradeI的列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> subject <span class="keyword">drop</span> gradeId;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==删除列时，每次只能删除一列==</strong></li></ul><h3 id="7-3-4-修改列名"><a href="#7-3-4-修改列名" class="headerlink" title="7.3.4 修改列名"></a>7.3.4 修改列名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改课程表中 subjectHours 列为 classHours</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> subject <span class="keyword">change</span> subjectHours classHours <span class="built_in">int</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==修改列名时，在给定列新名称时，要指定列的类型和约束==</strong></li></ul><h3 id="7-3-5-修改表名"><a href="#7-3-5-修改表名" class="headerlink" title="7.3.5 修改表名"></a>7.3.5 修改表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改课程表的subject 为sub</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> subject <span class="keyword">rename</span> sub;</span><br></pre></td></tr></table></figure><h2 id="7-4-数据表的删除-drop"><a href="#7-4-数据表的删除-drop" class="headerlink" title="7.4 数据表的删除( drop )"></a>7.4 数据表的删除( drop )</h2><blockquote><p>drop table 表名</p></blockquote><h3 id="7-4-1-删除学生表"><a href="#7-4-1-删除学生表" class="headerlink" title="7.4.1 删除学生表"></a>7.4.1 删除学生表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除学生表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> subject；</span><br></pre></td></tr></table></figure><h1 id="八、约束"><a href="#八、约束" class="headerlink" title="八、约束"></a>八、约束</h1><h2 id="8-1-实体完整性约束"><a href="#8-1-实体完整性约束" class="headerlink" title="8.1 实体完整性约束"></a>8.1 实体完整性约束</h2><blockquote><p>表中的一行数据代表一个实体（entity），实体完整性的作用即是每一行数据不重复、实体唯一。</p></blockquote><h3 id="8-1-1-主键约束"><a href="#8-1-1-主键约束" class="headerlink" title="8.1.1 主键约束"></a>8.1.1 主键约束</h3><blockquote><p>PRIMARY KEY 唯一，标识表中的一行数据，此列的值不可重复，且不能为 NULL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为表中的主键添加主键约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectId <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span>, <span class="comment"># 课程标识唯一，且不能为null</span></span><br><span class="line">    subjectName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    subjectHours <span class="built_in">INT</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>); <span class="comment"># error ，会报错，因为课程标识已存在！</span></span><br></pre></td></tr></table></figure><h3 id="8-1-2-唯一约束"><a href="#8-1-2-唯一约束" class="headerlink" title="8.1.2 唯一约束"></a>8.1.2 唯一约束</h3><blockquote><p>UNIQUE 唯一，标识表中的一行数据，此列的值不可重复，可以为 null</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为表中列值不允许重复的列添加唯一约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectId <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line">    subjectName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,   <span class="comment"># 课程名称唯一，可以为null</span></span><br><span class="line">    subjectHours <span class="built_in">INT</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectID,subjectName,subjectHours) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>); <span class="comment"># error ，会报错，因为课程名称已存在！</span></span><br></pre></td></tr></table></figure><h3 id="8-1-3-自动增长列"><a href="#8-1-3-自动增长列" class="headerlink" title="8.1.3 自动增长列"></a>8.1.3 自动增长列</h3><blockquote><p>AUTO_INCREMENT  自动增长，给主键的数值添加自动增长，从1开始，每次加1，不能单独使用，配合主键使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为表中的主键列添加自动增长，避免忘记主键ID序号</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectId <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">    subjectName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>, </span><br><span class="line">    subjectHours <span class="built_in">INT</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectName,subjectHours) <span class="keyword">values</span> (<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>); <span class="comment"># 课程编号从1开始，自动增长</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectName,subjectHours) <span class="keyword">values</span> (<span class="string">&#x27;Java&#x27;</span>,<span class="number">40</span>); </span><br></pre></td></tr></table></figure><h2 id="8-2-域完整性约束"><a href="#8-2-域完整性约束" class="headerlink" title="8.2 域完整性约束"></a>8.2 域完整性约束</h2><blockquote><p>限制列的单元格的数据的准确性</p></blockquote><h3 id="8-2-1-非空约束"><a href="#8-2-1-非空约束" class="headerlink" title="8.2.1 非空约束"></a>8.2.1 非空约束</h3><blockquote><p>NOT NULL 非空，此列必须有值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 课程名称虽然添加了唯一约束，但可以为 NULL，我们可以加上非空约束来避免</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectId <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">    subjectName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    subjectHours <span class="built_in">INT</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectName,subjectHours) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="number">40</span>); <span class="comment"># 课程名称约束了非空</span></span><br></pre></td></tr></table></figure><h3 id="8-2-2-默认值约束"><a href="#8-2-2-默认值约束" class="headerlink" title="8.2.2 默认值约束"></a>8.2.2 默认值约束</h3><blockquote><p>DEFAULT 为此列赋予默认值，当新增数据不指定值时,使用默认值进行填充</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增课程不指定课程时长是，默认使用20进行填充</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectId <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">    subjectName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    subjectHours <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">20</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(subjectName,subjectHours) <span class="keyword">values</span> (<span class="string">&#x27;PHP&#x27;</span>,<span class="keyword">DEFAULT</span>); <span class="comment"># 课程时长以默认值20进行填充</span></span><br></pre></td></tr></table></figure><h3 id="8-2-3-引用完整性约束"><a href="#8-2-3-引用完整性约束" class="headerlink" title="8.2.3 引用完整性约束"></a>8.2.3 引用完整性约束</h3><blockquote><ul><li>语法：CONSTRAINT 引用名 FOREIGN KEY(列名)   REFERENCES   被引用表名(列名)</li><li>详解：FOREIGN KEY 引用外部表的某个列的值，新增数据时，约束此列的值必须是引用表中存在的值。</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建专业表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Speciality(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    SpecialName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建课程表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line">subjectId <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">    subjectName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    subjectHours <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">20</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk_subject_specialId <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(specialId)  <span class="keyword">REFERENCES</span>  Speciality(<span class="keyword">id</span>)</span><br><span class="line"><span class="comment"># 引用专业表里的 id 作为外键，新增课程信息时，约束课程所属的专业    </span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==当两张表存在引用关系，要执行删除操作，一定先删除从表(引用表)，在删除主表(被引用表)。==</strong></li></ul><h2 id="8-3-约束创建整合"><a href="#8-3-约束创建整合" class="headerlink" title="8.3 约束创建整合"></a>8.3 约束创建整合</h2><blockquote><p>创建带有约束的表。</p></blockquote><h3 id="8-3-1-创建表"><a href="#8-3-1-创建表" class="headerlink" title="8.3.1 创建表"></a>8.3.1 创建表</h3><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>Gradeld</td><td>INT</td><td>主键，自动增长</td><td>班级编号</td></tr><tr><td>GradeName</td><td>varchar(20)</td><td>唯一、非空</td><td>班级名称</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Grade(</span><br><span class="line">Gradeld <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    GradeName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>student_id</td><td>varchar(50)</td><td>主键</td><td>学号</td></tr><tr><td>student_name</td><td>varchar(50)</td><td>非空</td><td>姓名</td></tr><tr><td>sex</td><td>char(2)</td><td>默认填充’男’</td><td>性别</td></tr><tr><td>borndate</td><td>date</td><td>非空</td><td>生日</td></tr><tr><td>phone</td><td>varchar(11)</td><td>无</td><td>电话</td></tr><tr><td>gradeld</td><td>int</td><td>非空，外键约束：引用班级表的gradeid</td><td>班级编号</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">student_id <span class="built_in">varchar</span>(<span class="number">50</span>) primary <span class="keyword">key</span>,</span><br><span class="line">    student_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    borndate <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    phone <span class="built_in">varchar</span>(<span class="number">11</span>),</span><br><span class="line">    gradeld <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">CONSTRAINT</span> fk_student_Grade <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(gradeld) <span class="keyword">REFERENCES</span>  Grade(Gradeld)</span><br><span class="line">    <span class="comment"># 引用Grade表的GradeId作为外键，插入时约束学生班级的班级编号必须存在。</span></span><br><span class="line">)<span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==创建关系表时，一定要先创建主表，在创建从表。==</strong></li><li><strong>==删除关系表，先删除从表，再删除主表。==</strong></li></ul><h1 id="九、事务"><a href="#九、事务" class="headerlink" title="九、事务"></a>九、事务</h1><h2 id="9-1-模拟转账"><a href="#9-1-模拟转账" class="headerlink" title="9.1 模拟转账"></a>9.1 模拟转账</h2><h3 id="9-1-1-数据库模拟转账"><a href="#9-1-1-数据库模拟转账" class="headerlink" title="9.1.1 数据库模拟转账"></a>9.1.1 数据库模拟转账</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A 账户转账给 B 账户 1000 元。</span></span><br><span class="line"><span class="comment"># A 账户减 1000 元</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money<span class="number">-1000</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># B 账户加 1000 元</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money +<span class="number">1000</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>==上述代码完成了两个账户之间转账的操作。==</li></ul><h3 id="9-1-2-模拟转账错误"><a href="#9-1-2-模拟转账错误" class="headerlink" title="9.1.2 模拟转账错误"></a>9.1.2 模拟转账错误</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A 账户转账给 B 账户 1000 元。</span></span><br><span class="line"><span class="comment">#A 账户减 1000元。</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> monry = money<span class="number">-1000</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断电、异常、出错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#B 账户加 1000元</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money+<span class="number">1000</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>==上述代码在减操作后过程中出现了异常或加钱语句出错，会发现，减钱仍旧是成功的，而加钱失败了！==</strong></li><li><strong>注意：==每条SQL语句都是一个独立的操作，一个操作执行完对数据库是永久性的影响。==</strong></li></ul><h2 id="9-2-事务的概念"><a href="#9-2-事务的概念" class="headerlink" title="9.2 事务的概念"></a>9.2 事务的概念</h2><blockquote><p>事务是一个原子操作，是一个最小执行单元。可以由一个或多个SQL语句组成，在同一个事务中，所有的SQL语句都成功执行时，整个事务成功，有一个SQL语句执行失败，整个事务都执行失败。</p></blockquote><h2 id="9-3-事务的边界"><a href="#9-3-事务的边界" class="headerlink" title="9.3 事务的边界"></a>9.3 事务的边界</h2><blockquote><ul><li><p>开始：连接到数据库，执行一条DML语句。上一个事务结束后，又输入了一条DML语句，即事务的开始。</p></li><li><p>结束：</p><p>1). 提交</p><p>a. 显示提交 ： commit；</p><p>b).隐式提交：一条创建、删除的语句，正常退出(客户端退出连接)；</p><p>2).回滚：</p><p>a. 显示回滚：rollback；</p><p>b.隐式回滚：非正常退出(断电、宕机)，执行了创建、删除的语句，但是失败了，会为这个无效的语句执行回滚。 </p></li></ul></blockquote><h2 id="9-4-事务的原理"><a href="#9-4-事务的原理" class="headerlink" title="9.4 事务的原理"></a>9.4 事务的原理</h2><blockquote><p>数据库会为每一个客户端都维护一个空间独立的缓存区(回滚段)，一个事务中所有的增删改语句的执行结果都会缓存在回滚段中，只有当事务中所有的SQL语句均正常结束(commit)，才会将回滚段中的数据同步到数据库。否则无论因为哪种原因失败，整个事务将回滚(rollback).</p></blockquote><h2 id="9-5-事务的特性"><a href="#9-5-事务的特性" class="headerlink" title="9.5 事务的特性"></a>9.5 事务的特性</h2><blockquote><ul><li><p>Atomicity(原子性)</p><pre><code>表示一个事务内的所有操作是一个整体，要么全部成功，要么全部失败</code></pre></li><li><p>Consistency(一致性)</p><pre><code>表示一个事务内有一个操作失败时，所有的更改过的数据都必须回滚到修改前的状态</code></pre></li><li><p>Isolation(隔离性)</p><pre><code>事务查看数据操作时数据所处的状态，要么是另一个并发事务修改它之前的状态，要么是另一个事务修改它之后的状态，事务不会查看中间状态的数据。</code></pre></li><li><p>Durability(持久性)</p><pre><code>持久性事务完成之后，它对于系统的影响是永久性的。</code></pre></li></ul></blockquote><h2 id="9-6-事务应用"><a href="#9-6-事务应用" class="headerlink" title="9.6 事务应用"></a>9.6 事务应用</h2><blockquote><p>应用环境：基于增删改语句的操作结果(均返回操作后受影响的行数)，可通过程序逻辑手动控制事务提交或回滚。</p></blockquote><h3 id="9-6-1-事务完成转账"><a href="#9-6-1-事务完成转账" class="headerlink" title="9.6.1 事务完成转账"></a>9.6.1 事务完成转账</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A 账户给 B 账户转账。</span></span><br><span class="line"><span class="comment">#1.开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;setAutoCommit=0;</span><br><span class="line"><span class="comment">#2.事务内操作数据语句</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money=money<span class="number">-1000</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money=money+<span class="number">1000</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="comment">#3.事务内语句都成功了，执行commit</span></span><br><span class="line"><span class="keyword">commit</span>；</span><br><span class="line"><span class="comment">#4.事务内如果出现错误，执行rollback</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==开启事务后，执行的语句均属于当前事务，成功再执行<code>commit</code>，失败要进行<code>rollback</code>==</strong></li></ul><h1 id="十、权限管理"><a href="#十、权限管理" class="headerlink" title="十、权限管理"></a>十、权限管理</h1><h2 id="10-1-创建用户"><a href="#10-1-创建用户" class="headerlink" title="10.1 创建用户"></a>10.1 创建用户</h2><blockquote><p>CREATE  USER   用户名    IDENTIFIED BY  密码</p></blockquote><h3 id="10-1-1-创建一个用户"><a href="#10-1-1-创建一个用户" class="headerlink" title="10.1.1 创建一个用户"></a>10.1.1 创建一个用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 zhangsan 用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">`zhangsna`</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="10-2-授权"><a href="#10-2-授权" class="headerlink" title="10.2 授权"></a>10.2 授权</h2><blockquote><p>GRANT ALL ON 数据库.表   TO 用户名；</p></blockquote><h3 id="10-2-1-用户授权"><a href="#10-2-1-用户授权" class="headerlink" title="10.2.1 用户授权"></a>10.2.1 用户授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 companyDB下的所有表的权限都赋给 zhangsan</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> companyDB.* <span class="keyword">to</span> <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h2 id="10-3-撤销权限"><a href="#10-3-撤销权限" class="headerlink" title="10.3 撤销权限"></a>10.3 撤销权限</h2><blockquote><p>REVOKE ALL ON 数据库.表名 FROM 用户名</p></blockquote><ul><li>**注意：撤销权限后，账户要重新连接客户端才会生效</li></ul><h3 id="10-3-1-撤销用户权限"><a href="#10-3-1-撤销用户权限" class="headerlink" title="10.3.1 撤销用户权限"></a>10.3.1 撤销用户权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 zhangsan 的companyDB 的权限撤销</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> companyDB.* <span class="keyword">from</span> <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h2 id="10-4-删除用户"><a href="#10-4-删除用户" class="headerlink" title="10.4 删除用户"></a>10.4 删除用户</h2><blockquote><p>DROP USER 用户名</p></blockquote><h3 id="10-4-1-删除用户"><a href="#10-4-1-删除用户" class="headerlink" title="10.4.1 删除用户"></a>10.4.1 删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h1 id="十一、视图"><a href="#十一、视图" class="headerlink" title="十一、视图"></a>十一、视图</h1><h2 id="11-1-概念"><a href="#11-1-概念" class="headerlink" title="11.1 概念"></a>11.1 概念</h2><blockquote><p>视图，虚拟表，从一个表或多个表中查询出来的表，作用和真实表一样，包含一系列带有行和列的数据。视图中，用户可以使用select语句查询数据，也可以使用insert，update，delete修改记录，视图可以使用户操作方便，并保障数据库系统安全。</p></blockquote><h2 id="11-2-视图特点"><a href="#11-2-视图特点" class="headerlink" title="11.2 视图特点"></a>11.2 视图特点</h2><blockquote><ul><li>优点<ul><li>简单化，数据所见即所得</li><li>安全性，用户只能查询或修改他们所能见到得到的数据</li><li>逻辑独立性，可以屏蔽真实表结构变化带来的影响。</li></ul></li><li>缺点<ul><li>性能相对较差，简单的查询也会变得稍显复杂。</li><li>修改不方便，特别是复杂的聚合视图基本无法修改。</li></ul></li></ul></blockquote><h2 id="11-3-视图的创建"><a href="#11-3-视图的创建" class="headerlink" title="11.3 视图的创建"></a>11.3 视图的创建</h2><blockquote><p>语法：CREATE VIEW 视图名 AS 查询数据源表语句；</p></blockquote><h3 id="11-3-1-创建视图"><a href="#11-3-1-创建视图" class="headerlink" title="11.3.1 创建视图"></a>11.3.1 创建视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 t_empInfo 的视图，其视图从 t_employees表中查询到员工编号、员工姓名、员工邮箱、工资</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> t_empInFo <span class="keyword">as</span> <span class="keyword">select</span> employee_id,first_name,email,salary <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h3 id="11-3-2-使用视图"><a href="#11-3-2-使用视图" class="headerlink" title="11.3.2 使用视图"></a>11.3.2 使用视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 t_empInFo 视图中编号为 101 的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_empInFo <span class="keyword">where</span> employee_id = <span class="string">&#x27;101&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="11-4-视图的修改"><a href="#11-4-视图的修改" class="headerlink" title="11.4 视图的修改"></a>11.4 视图的修改</h2><blockquote><ul><li>方式一：CREATE OR REPLACE VIEW 视图名 AS 查询语句</li><li>方式二：ALTER VIEW 视图名 AS 查询语句</li></ul></blockquote><h3 id="11-4-1-修改视图"><a href="#11-4-1-修改视图" class="headerlink" title="11.4.1 修改视图"></a>11.4.1 修改视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式 1：如果视图存在则进行修改，反之，进行创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> t_empInFo</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,email,salary <span class="keyword">from</span> t_employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式 2：直接对已存在的视图进行修改</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> t_empInFo</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> employee_id,first_name,email,salary <span class="keyword">from</span> t_employees;</span><br></pre></td></tr></table></figure><h2 id="11-5-视图的删除"><a href="#11-5-视图的删除" class="headerlink" title="11.5 视图的删除"></a>11.5 视图的删除</h2><blockquote><p>DROP VIEW  视图名</p></blockquote><h3 id="11-5-1-删除视图"><a href="#11-5-1-删除视图" class="headerlink" title="11.5.1 删除视图"></a>11.5.1 删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除t_empInfo</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> t_empInfo</span><br></pre></td></tr></table></figure><ul><li><strong>注意：==删除视图不会影响原表==</strong></li></ul><h2 id="11-6-视图的注意事项"><a href="#11-6-视图的注意事项" class="headerlink" title="11.6 视图的注意事项"></a>11.6 视图的注意事项</h2><blockquote><ul><li>注意：<ul><li>视图不会独立存储数据，原表发生改变，视图也发生改变。没有优化任何查询性能。</li><li>如果视图包含以下结构中的一种，则视图不可更新<ul><li>聚合函数的结果</li><li>DISTINCT去重后的结果</li><li>GROUP BY 分组后的结果</li><li>HAVING 筛选过滤后的结果</li><li>UNION、UNION ALL联合后的结果</li></ul></li></ul></li></ul></blockquote><h1 id="十二、SQL语言分类"><a href="#十二、SQL语言分类" class="headerlink" title="十二、SQL语言分类"></a>十二、SQL语言分类</h1><h2 id="12-1-SQL语言分类"><a href="#12-1-SQL语言分类" class="headerlink" title="12.1 SQL语言分类"></a>12.1 SQL语言分类</h2><blockquote><ul><li>数据查询语言DQL    (Data Query Language) ：select、where、order by、group by、having</li><li>数据定义语言DDL   (Data Definition Language)  :  create、alter、drop</li><li>数据操作语言DML  (Data Manipulation Language)  :  insert、update、delete</li><li>事务处理语言TPL (Transaction Process Language)  :  commit、rollback</li><li>数据控制语言DCL  (Data Control Language)  :  grant、revoke。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA集合框架</title>
      <link href="posts/ffaa379d/"/>
      <url>posts/ffaa379d/</url>
      
        <content type="html"><![CDATA[<p><strong>【转载】本文转自：<a href="https://lazydog036.gitee.io//2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%AF%B7%E8%AE%A4%E5%87%86%E5%8E%9F%E4%BD%9C%E8%80%85%EF%BC%81">https://lazydog036.gitee.io//2020/10/29/JAVA集合框架，请认准原作者！</a></strong></p><h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a><strong>集合概述</strong></h1><hr><ul><li><strong>概念</strong>：对象的容器，定义了对多个对象进项操作的的常用方法。可实现数组的功能。</li><li><strong>和数组的区别</strong>：</li></ul><ol><li>数组长度固定，集合长度不固定。</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型。</li></ol><ul><li><strong>位置</strong>： java.util.*;</li></ul><h2 id="Collection体系集合"><a href="#Collection体系集合" class="headerlink" title="Collection体系集合"></a><strong>Collection体系集合</strong></h2><hr><p><img src= "/img/loading.gif" data-lazy-src="https://pic.imgdb.cn/item/5f9912e21cd1bbb86b6c3035.png" alt="img"></p><h3 id="Collection父接口"><a href="#Collection父接口" class="headerlink" title="Collection父接口"></a><strong>Collection父接口</strong></h3><hr><ul><li><p><strong>特点</strong>：代表一组任意类型的对象，无序、无下标、不能重复。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>boolean add(Object obj) //添加一个对象。</code></li><li><code>boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。</code></li><li><code>void clear() //清空此集合中的所有对象。</code></li><li><code>boolean contains(Object o) //检查此集合中是否包含o对象。</code></li><li><code>boolean equals(Object o) //比较此集合是否与指定对象相等。</code></li><li><code>boolean isEmpty() //判断此集合是否为空。</code></li><li><code>boolean remove(Object o) //在此集合中移除o对象。</code></li><li><code>int size() //返回此集合中的元素个数。</code></li><li><code>Object[] toArray() //姜此集合转换成数组。</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * Collection接口的使用（一）</span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历元素</span><br><span class="line"> * 4.判断</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo1&#123;</span><br><span class="line">    pubic static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建集合</span><br><span class="line">        Collection collection&#x3D;new ArrayList();        </span><br><span class="line">&#x2F;&#x2F;      * 1.添加元素</span><br><span class="line">        Collection.add(&quot;苹果&quot;);</span><br><span class="line">        Collection.add(&quot;西瓜&quot;);</span><br><span class="line">        Collection.add(&quot;榴莲&quot;);</span><br><span class="line">        System.out.println(&quot;元素个数：&quot;+collection.size());</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">&#x2F;&#x2F;      * 2.删除元素</span><br><span class="line">        collection.remove(&quot;榴莲&quot;);</span><br><span class="line">        System.out.println(&quot;删除之后：&quot;+collection.size());</span><br><span class="line">&#x2F;&#x2F;      * 3.遍历元素</span><br><span class="line">        &#x2F;&#x2F;3.1 使用增强for </span><br><span class="line">        for(Object object : collection)&#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）</span><br><span class="line">        &#x2F;&#x2F;hasnext();判断是否有下一个元素</span><br><span class="line">        &#x2F;&#x2F;next();获取下一个元素</span><br><span class="line">        &#x2F;&#x2F;remove();删除当前元素</span><br><span class="line">        Iterator iterator&#x3D;collection.Itertor();</span><br><span class="line">        while(iterator.hasnext())&#123;</span><br><span class="line">            String object&#x3D;(String)iterator.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            &#x2F;&#x2F;删除操作</span><br><span class="line">            &#x2F;&#x2F;collection.remove(s);引发错误：并发修改异常</span><br><span class="line">            &#x2F;&#x2F;iterator.remove();应使用迭代器的方法</span><br><span class="line">&#x2F;&#x2F;      * 4.判断</span><br><span class="line">        System.out.println(collection.contains(&quot;西瓜&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(collection.isEmpty());&#x2F;&#x2F;false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * Collection接口的使用（二）</span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历元素</span><br><span class="line"> * 4.判断</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Collection collection&#x3D;new ArrayList();</span><br><span class="line">Student s1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">Student s2&#x3D;new Student(&quot;李四&quot;, 20);</span><br><span class="line">Student s3&#x3D;new Student(&quot;王五&quot;, 19);</span><br><span class="line">&#x2F;&#x2F;1.添加数据</span><br><span class="line">collection.add(s1);</span><br><span class="line">collection.add(s2);</span><br><span class="line">collection.add(s3);</span><br><span class="line">&#x2F;&#x2F;collection.add(s3);可重复添加相同对象</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+collection.size());</span><br><span class="line">System.out.println(collection.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除数据</span><br><span class="line">collection.remove(s1);</span><br><span class="line">System.out.println(&quot;删除之后：&quot;+collection.size());</span><br><span class="line">&#x2F;&#x2F;3.遍历数据</span><br><span class="line">&#x2F;&#x2F;3.1 增强for</span><br><span class="line">for(Object object:collection) &#123;</span><br><span class="line">Student student&#x3D;(Student) object;</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2迭代器</span><br><span class="line">&#x2F;&#x2F;迭代过程中不能使用collection的删除方法</span><br><span class="line">Iterator iterator&#x3D;collection.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Student student&#x3D;(Student) iterator.next();</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断和上一块代码类似。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 学生类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Student &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">public Student(String name, int age) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Student [name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + age +&quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Collection子接口"><a href="#Collection子接口" class="headerlink" title="Collection子接口"></a><strong>Collection子接口</strong></h3><hr><h4 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a><strong>List集合</strong></h4><ul><li><p><strong>特点</strong>：有序、有下标、元素可以重复。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>void add(int index,Object o) //在index位置插入对象o。</code></li><li><code>boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。</code></li><li><code>Object get(int index) //返回集合中指定位置的元素。</code></li><li><code>List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * List子接口的使用（一）</span><br><span class="line"> * 特点：1.有序有下标 2.可以重复</span><br><span class="line"> * </span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历元素</span><br><span class="line"> * 4.判断</span><br><span class="line"> * 5.获取位置</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">list.add(&quot;tang&quot;);</span><br><span class="line">list.add(&quot;he&quot;);</span><br><span class="line">list.add(0,&quot;yu&quot;);&#x2F;&#x2F;插入操作</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">list.remove(0);</span><br><span class="line">&#x2F;&#x2F;list.remove(&quot;yu&quot;);结果同上</span><br><span class="line">System.out.println(&quot;删除之后：&quot;+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">&#x2F;&#x2F;3.遍历元素</span><br><span class="line">&#x2F;&#x2F;3.1 使用for遍历</span><br><span class="line">for(int i&#x3D;0;i&lt;list.size();++i) &#123;</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2 使用增强for</span><br><span class="line">for(Object object:list) &#123;</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.3 使用迭代器</span><br><span class="line">Iterator iterator&#x3D;list.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。</span><br><span class="line">ListIterator listIterator&#x3D;list.listIterator();</span><br><span class="line">&#x2F;&#x2F;从前往后</span><br><span class="line">while (listIterator.hasNext()) &#123;</span><br><span class="line">System.out.println(listIterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;从后往前（此时“遍历指针”已经指向末尾）</span><br><span class="line">while(listIterator.hasPrevious()) &#123;</span><br><span class="line">System.out.println(listIterator.previous());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(list.isEmpty());</span><br><span class="line">System.out.println(list.contains(&quot;tang&quot;));</span><br><span class="line">&#x2F;&#x2F;5.获取位置</span><br><span class="line">System.out.println(list.indexOf(&quot;tang&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * List子接口的使用（二）</span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历元素</span><br><span class="line"> * 4.判断</span><br><span class="line"> * 5.获取位置</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List list&#x3D;new ArrayList();</span><br><span class="line">&#x2F;&#x2F;1.添加数字数据（自动装箱）</span><br><span class="line">list.add(20);</span><br><span class="line">list.add(30);</span><br><span class="line">list.add(40);</span><br><span class="line">list.add(50);</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">list.remove(0);</span><br><span class="line">&#x2F;&#x2F;list.remove(20);很明显数组越界错误，改成如下</span><br><span class="line">&#x2F;&#x2F;list.remove(Object(20));</span><br><span class="line">&#x2F;&#x2F;list.remove(new Integer(20));</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">&#x2F;&#x2F;3-5不再演示，与之前类似</span><br><span class="line">&#x2F;&#x2F;6.补充方法subList，返回子集合，含头不含尾</span><br><span class="line">List list2&#x3D;list.subList(1, 3);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a><strong>List实现类</strong></h4><h5 id="ArrayList【重点】"><a href="#ArrayList【重点】" class="headerlink" title="ArrayList【重点】"></a><strong>ArrayList【重点】</strong></h5><ul><li>数组结构实现，查询块、增删慢；</li><li>JDK1.2版本，运行效率快、线程不安全。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * ArrayList的使用</span><br><span class="line"> * 存储结构：数组；</span><br><span class="line"> * 特点：查找遍历速度快，增删慢。</span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历元素</span><br><span class="line"> * 4.判断</span><br><span class="line"> * 5.查找</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ArrayList arrayList&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">Student s1&#x3D;new Student(&quot;唐&quot;, 21);</span><br><span class="line">Student s2&#x3D;new Student(&quot;何&quot;, 22);</span><br><span class="line">Student s3&#x3D;new Student(&quot;余&quot;, 21);</span><br><span class="line">arrayList.add(s1);</span><br><span class="line">arrayList.add(s2);</span><br><span class="line">arrayList.add(s3);</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+arrayList.size());</span><br><span class="line">System.out.println(arrayList.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">arrayList.remove(s1);</span><br><span class="line">&#x2F;&#x2F;arrayList.remove(new Student(&quot;唐&quot;, 21));</span><br><span class="line">&#x2F;&#x2F;注：这样可以删除吗（不可以）？显然这是两个不同的对象。</span><br><span class="line">&#x2F;&#x2F;假如两个对象属性相同便认为其是同一对象，那么如何修改代码？</span><br><span class="line">&#x2F;&#x2F;3.遍历元素</span><br><span class="line">&#x2F;&#x2F;3.1使用迭代器</span><br><span class="line">Iterator iterator&#x3D;arrayList.iterator();</span><br><span class="line">while(iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2使用列表迭代器</span><br><span class="line">ListIterator listIterator&#x3D;arrayList.listIterator();</span><br><span class="line">&#x2F;&#x2F;从前往后遍历</span><br><span class="line">while(listIterator.hasNext()) &#123;</span><br><span class="line">System.out.println(listIterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;从后往前遍历</span><br><span class="line">while(listIterator.hasPrevious()) &#123;</span><br><span class="line">System.out.println(listIterator.previous());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(arrayList.isEmpty());</span><br><span class="line">&#x2F;&#x2F;System.out.println(arrayList.contains(new Student(&quot;何&quot;, 22)));</span><br><span class="line">&#x2F;&#x2F;注：与上文相同的问题。</span><br><span class="line">&#x2F;&#x2F;5.查找</span><br><span class="line">System.out.println(arrayList.indexOf(s1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：Object里的equals(this==obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">COPY@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">&#x2F;&#x2F;1.是否为同一对象</span><br><span class="line">if (this&#x3D;&#x3D;obj) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;2.判断是否为空</span><br><span class="line">if (obj&#x3D;&#x3D;null) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.判断是否是Student类型</span><br><span class="line">if (obj instanceof Student) &#123;</span><br><span class="line">Student student&#x3D;(Student) obj;</span><br><span class="line">&#x2F;&#x2F;4.比较属性</span><br><span class="line">if(this.name.equals(student.getName())&amp;&amp;this.age&#x3D;&#x3D;student.age) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;不满足，返回false</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a><strong>ArrayList源码分析</strong></h5><ul><li><p>默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code></p></li><li><p>存放元素的数组：<code>transient Object[] elementData;</code></p></li><li><p>实际元素个数：<code>private int size;</code></p></li><li><p>创建对象时调用的无参构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;&#x2F;这是一个空的数组</span><br><span class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA &#x3D; &#123;&#125;;</span><br><span class="line">public ArrayList() &#123;</span><br><span class="line">    this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？</p><p>这就得看看add方法的源码了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  &#x2F;&#x2F; Increments modCount!!</span><br><span class="line">    elementData[size++] &#x3D; e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到<code>ensureCapacityInternal(size + 1);</code>该方法源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPYprivate void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到<code>calculateCapacity(elementData, minCapacity)</code>里面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPYprivate static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class="line">    if (elementData &#x3D;&#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    return minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量<code>DEFAULT_CAPACITY</code>也就是10。这个值作为参数又传入<code>ensureExplicitCapacity()</code>方法中，进入该方法查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPYprivate void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    &#x2F;&#x2F; overflow-conscious code</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>我们先不要管modCount这个变量。</del></p><p>因为elementData数组长度为0，所以if条件成立，调用grow方法，<strong>重要的部分来了</strong>，我们再次进入到grow方法的源码中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COPYprivate void grow(int minCapacity) &#123;</span><br><span class="line">    &#x2F;&#x2F; overflow-conscious code</span><br><span class="line">    int oldCapacity &#x3D; elementData.length;</span><br><span class="line">    int newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity &#x3D; minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity &#x3D; hugeCapacity(minCapacity);</span><br><span class="line">    &#x2F;&#x2F; minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData &#x3D; Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为<code>oldCapacity+一个增量</code>，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPYprivate static final int MAX_ARRAY_SIZE &#x3D; Integer.MAX_VALUE - 8;</span><br></pre></td></tr></table></figure><p>这个值太大了以至于第二个if条件没有了解的必要。</p><p>最后一句话就是为elementData数组赋予了新的长度，<code>Arrays.copyOf()</code>方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。<code>copyOf()</code>的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。</p><p>这时候再回到add的方法中，接着就向下执行<code>elementData[size++] = e;</code>到这里为止关于ArrayList就讲解得差不多了，当数组长度为10的时候你们可以试着过一下源码，查一下每次的增量是多少（答案是每次扩容为原来的1.5倍）。</p><hr></li></ul><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><strong>Vector</strong></h5><ul><li><p>数组结构实现，查询快、增删慢；</p></li><li><p>JDK1.0版本，运行效率慢、线程安全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * Vector的演示使用</span><br><span class="line"> * </span><br><span class="line"> *1.添加数据</span><br><span class="line"> *2.删除数据</span><br><span class="line"> *3.遍历</span><br><span class="line"> *4.判断</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Vector vector&#x3D;new Vector&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;1.添加数据</span><br><span class="line">vector.add(&quot;tang&quot;);</span><br><span class="line">vector.add(&quot;he&quot;);</span><br><span class="line">vector.add(&quot;yu&quot;);</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+vector.size());</span><br><span class="line">&#x2F;&#x2F;2.删除数据</span><br><span class="line">&#x2F;*</span><br><span class="line"> * vector.remove(0); vector.remove(&quot;tang&quot;);</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;3.遍历</span><br><span class="line">&#x2F;&#x2F;使用枚举器</span><br><span class="line">Enumeration enumeration&#x3D;vector.elements();</span><br><span class="line">while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">String s &#x3D; (String) enumeration.nextElement();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(vector.isEmpty());</span><br><span class="line">System.out.println(vector.contains(&quot;he&quot;));</span><br><span class="line">&#x2F;&#x2F;5. Vector其他方法</span><br><span class="line">&#x2F;&#x2F;firstElement()  lastElement()  ElementAt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h5><ul><li>链表结构实现，增删快，查询慢。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * LinkedList的用法</span><br><span class="line"> * 存储结构：双向链表</span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历</span><br><span class="line"> * 4.判断</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">LinkedList linkedList&#x3D;new LinkedList&lt;&gt;();</span><br><span class="line">Student s1&#x3D;new Student(&quot;唐&quot;, 21);</span><br><span class="line">Student s2&#x3D;new Student(&quot;何&quot;, 22);</span><br><span class="line">Student s3&#x3D;new Student(&quot;余&quot;, 21);</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">linkedList.add(s1);</span><br><span class="line">linkedList.add(s2);</span><br><span class="line">linkedList.add(s3);</span><br><span class="line">linkedList.add(s3);</span><br><span class="line">System.out.println(&quot;元素个数：&quot;+linkedList.size());</span><br><span class="line">System.out.println(linkedList.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">&#x2F;*</span><br><span class="line"> * linkedList.remove(new Student(&quot;唐&quot;, 21));</span><br><span class="line"> * System.out.println(linkedList.toString());</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;3.遍历</span><br><span class="line">&#x2F;&#x2F;3.1 使用for</span><br><span class="line">for(int i&#x3D;0;i&lt;linkedList.size();++i) &#123;</span><br><span class="line">System.out.println(linkedList.get(i));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2 使用增强for</span><br><span class="line">for(Object object:linkedList) &#123;</span><br><span class="line">Student student&#x3D;(Student) object;</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.3 使用迭代器</span><br><span class="line">Iterator iterator &#x3D;linkedList.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Student student &#x3D; (Student) iterator.next();</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.4 使用列表迭代器（略）</span><br><span class="line">&#x2F;&#x2F;4. 判断</span><br><span class="line">System.out.println(linkedList.contains(s1));</span><br><span class="line">System.out.println(linkedList.isEmpty());</span><br><span class="line">System.out.println(linkedList.indexOf(s3));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a><strong>LinkedList源码分析</strong></h5><p>LinkedList首先有三个属性：</p><ul><li>链表大小：<code>transient int size = 0;</code></li><li>（指向）第一个结点/头结点：<code> transient Node&lt;E&gt; first;</code></li><li>（指向）最后一个结点/尾结点：<code>transient Node&lt;E&gt; last;</code></li></ul><p>关于Node类型我们再进入到类里看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COPYprivate static class Node&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        this.item &#x3D; element;</span><br><span class="line">        this.next &#x3D; next;</span><br><span class="line">        this.prev &#x3D; prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。</p><p>Node带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。</p><p>LinkedList是如何添加元素的呢？先看看add方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到linkLast方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COPYvoid linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l &#x3D; last;</span><br><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;&gt;(l, e, null);</span><br><span class="line">    last &#x3D; newNode;</span><br><span class="line">    if (l &#x3D;&#x3D; null)</span><br><span class="line">        first &#x3D; newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next &#x3D; newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。</p><p>首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5f9a62a01cd1bbb86bc58487.png" alt="img"></p><p>如果满足if条件，说明这是添加的第一个结点，将first指向newNode：</p><p><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5f9a631c1cd1bbb86bc59ca6.png" alt="img"></p><p>至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5f9a680e1cd1bbb86bc681f6.png" alt="img"></p><hr><h5 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a><strong>ArrayList和LinkedList区别</strong></h5><ul><li>ArrayList：必须开辟连续空间，查询快，增删慢。</li><li>LinkedList：无需开辟连续空间，查询慢，增删快。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5f9a6b371cd1bbb86bc74cda.png" alt="img"></p><hr><h4 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a><strong>泛型概述</strong></h4><ul><li>Java泛型是JDK1.5中引入的一个新特性，其本质是参数化类型，把类型作为参数传递。</li><li>常见形式有泛型类、泛型接口、泛型方法。</li><li>语法：<ul><li>&lt;T,…&gt; T称为类型占位符，表示一种引用类型。</li></ul></li><li>好处：<ul><li>提高代码的重用性。</li><li>防止类型转换异常，提高代码的安全性。</li></ul></li></ul><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a><strong>泛型类</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 泛型类</span><br><span class="line"> * 语法：类名&lt;T&gt;</span><br><span class="line"> * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">public class myGeneric&lt;T&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;1.创建泛型变量</span><br><span class="line">&#x2F;&#x2F;不能使用new来创建，因为泛型是不确定的类型，也可能拥有私密的构造方法。</span><br><span class="line">T t;</span><br><span class="line">&#x2F;&#x2F;2.泛型作为方法的参数</span><br><span class="line">public void show(T t) &#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;泛型作为方法的返回值</span><br><span class="line">public T getT() &#123;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COPY&#x2F;**</span><br><span class="line"> * 注意：</span><br><span class="line"> * 1.泛型只能使用引用类型</span><br><span class="line"> * 2.不同泛型类型的对象不能相互赋值</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class testGeneric &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;使用泛型类创建对象</span><br><span class="line">myGeneric&lt;String&gt; myGeneric1&#x3D;new myGeneric&lt;String&gt;();</span><br><span class="line">myGeneric1.t&#x3D;&quot;tang&quot;;</span><br><span class="line">myGeneric1.show(&quot;he&quot;);</span><br><span class="line"></span><br><span class="line">myGeneric&lt;Integer&gt; myGeneric2&#x3D;new myGeneric&lt;Integer&gt;();</span><br><span class="line">myGeneric2.t&#x3D;10;</span><br><span class="line">myGeneric2.show(20);</span><br><span class="line">Integer integer&#x3D;myGeneric2.getT();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a><strong>泛型接口</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 泛型接口</span><br><span class="line"> * 语法：接口名&lt;T&gt;</span><br><span class="line"> * 注意：不能创建泛型静态常量</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface MyInterface&lt;T&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;创建常量</span><br><span class="line">String nameString&#x3D;&quot;tang&quot;;</span><br><span class="line">    </span><br><span class="line">T server(T t);</span><br><span class="line">&#125;</span><br><span class="line">COPY&#x2F;**</span><br><span class="line"> * 实现接口时确定泛型类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyInterfaceImpl implements MyInterface&lt;String&gt;&#123;</span><br><span class="line">@Override</span><br><span class="line">public String server(String t) &#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line">return t; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COPY&#x2F;&#x2F;测试</span><br><span class="line">MyInterfaceImpl myInterfaceImpl&#x3D;new MyInterfaceImpl();</span><br><span class="line">myInterfaceImpl.server(&quot;xxx&quot;);</span><br><span class="line">&#x2F;&#x2F;xxx</span><br><span class="line">COPY&#x2F;**</span><br><span class="line"> * 实现接口时不确定泛型类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyInterfaceImpl2&lt;T&gt; implements MyInterface&lt;T&gt;&#123;</span><br><span class="line">@Override</span><br><span class="line">public T server(T t) &#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COPY&#x2F;&#x2F;测试</span><br><span class="line">MyInterfaceImpl2&lt;Integer&gt; myInterfaceImpl2&#x3D;new MyInterfaceImpl2&lt;Integer&gt;();</span><br><span class="line">myInterfaceImpl2.server(2000);</span><br><span class="line">&#x2F;&#x2F;2000</span><br></pre></td></tr></table></figure><h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a><strong>泛型方法</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 泛型方法</span><br><span class="line"> * 语法：&lt;T&gt; 返回类型</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyGenericMethod &#123;</span><br><span class="line">public &lt;T&gt; void show(T t) &#123;</span><br><span class="line">System.out.println(&quot;泛型方法&quot;+t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COPY&#x2F;&#x2F;测试</span><br><span class="line">MyGenericMethod myGenericMethod&#x3D;new MyGenericMethod();</span><br><span class="line">myGenericMethod.show(&quot;tang&quot;);</span><br><span class="line">myGenericMethod.show(200);</span><br><span class="line">myGenericMethod.show(3.14);</span><br></pre></td></tr></table></figure><h5 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a><strong>泛型集合</strong></h5><ul><li><p><strong>概念</strong>：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</p></li><li><p>特点</p><p>：</p><ul><li>编译时即可检查，而非运行时抛出异常。</li><li>访问时，不必类型转换（拆箱）。</li><li>不同泛型指尖引用不能相互赋值，泛型不存在多态。</li></ul></li></ul><p>之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic class LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable&#123;&#x2F;&#x2F;略&#125;</span><br></pre></td></tr></table></figure><p>它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。</p><hr><h4 id="Set集合概述"><a href="#Set集合概述" class="headerlink" title="Set集合概述"></a><strong>Set集合概述</strong></h4><h5 id="Set子接口"><a href="#Set子接口" class="headerlink" title="Set子接口"></a><strong>Set子接口</strong></h5><ul><li><strong>特点</strong>：无序、无下标、元素不可重复。</li><li><strong>方法</strong>：全部继承自Collection中的方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 测试Set接口的使用</span><br><span class="line"> * 特点：1.无序，没有下标；2.重复</span><br><span class="line"> * 1.添加数据</span><br><span class="line"> * 2.删除数据</span><br><span class="line"> * 3.遍历【重点】</span><br><span class="line"> * 4.判断</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Set&lt;String&gt; set&#x3D;new HashSet&lt;String&gt;();</span><br><span class="line">&#x2F;&#x2F;1.添加数据</span><br><span class="line">set.add(&quot;tang&quot;);</span><br><span class="line">set.add(&quot;he&quot;);</span><br><span class="line">set.add(&quot;yu&quot;);</span><br><span class="line">System.out.println(&quot;数据个数：&quot;+set.size());</span><br><span class="line">System.out.println(set.toString());&#x2F;&#x2F;无序输出</span><br><span class="line">&#x2F;&#x2F;2.删除数据</span><br><span class="line">&#x2F;*</span><br><span class="line"> * set.remove(&quot;tang&quot;); System.out.println(set.toString());</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;3.遍历【重点】</span><br><span class="line">&#x2F;&#x2F;3.1 使用增强for</span><br><span class="line">for (String string : set) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2 使用迭代器</span><br><span class="line">Iterator&lt;String&gt; iterator&#x3D;set.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(set.contains(&quot;tang&quot;));</span><br><span class="line">System.out.println(set.isEmpty());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a><strong>Set实现类</strong></h4><h5 id="HashSet【重点】"><a href="#HashSet【重点】" class="headerlink" title="HashSet【重点】"></a><strong>HashSet【重点】</strong></h5><ul><li>基于HashCode计算元素存放位置。</li><li>当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 人类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Person &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">public Person(String name,int age) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Peerson [name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + age + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COPY&#x2F;**</span><br><span class="line"> * HashSet集合的使用</span><br><span class="line"> * 存储结构：哈希表（数组+链表+红黑树）</span><br><span class="line"> * 1.添加元素</span><br><span class="line"> * 2.删除元素</span><br><span class="line"> * 3.遍历</span><br><span class="line"> * 4.判断</span><br><span class="line">*&#x2F;</span><br><span class="line">public class Demo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">HashSet&lt;Person&gt; hashSet&#x3D;new HashSet&lt;&gt;();</span><br><span class="line">Person p1&#x3D;new Person(&quot;tang&quot;,21);</span><br><span class="line">Person p2&#x3D;new Person(&quot;he&quot;, 22);</span><br><span class="line">Person p3&#x3D;new Person(&quot;yu&quot;, 21);</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">hashSet.add(p1);</span><br><span class="line">hashSet.add(p2);</span><br><span class="line">hashSet.add(p3);</span><br><span class="line">        &#x2F;&#x2F;重复，添加失败</span><br><span class="line">        hashSet.add(p3);</span><br><span class="line">        &#x2F;&#x2F;直接new一个相同属性的对象，依然会被添加，不难理解。</span><br><span class="line">        &#x2F;&#x2F;假如相同属性便认为是同一个对象，怎么修改？</span><br><span class="line">        hashSet.add(new Person(&quot;yu&quot;, 21));</span><br><span class="line">System.out.println(hashSet.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">hashSet.remove(p2);</span><br><span class="line">&#x2F;&#x2F;3.遍历</span><br><span class="line">&#x2F;&#x2F;3.1 增强for</span><br><span class="line">for (Person person : hashSet) &#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2 迭代器</span><br><span class="line">Iterator&lt;Person&gt; iterator&#x3D;hashSet.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(hashSet.isEmpty());</span><br><span class="line">        &#x2F;&#x2F;直接new一个相同属性的对象结果输出是false，不难理解。</span><br><span class="line">        &#x2F;&#x2F;注：假如相同属性便认为是同一个对象，该怎么做？</span><br><span class="line">System.out.println(hashSet.contains(new Person(&quot;tang&quot;, 21)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：hashSet存储过程：</p><ol><li>根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</li><li>执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。</li></ol><p>存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">COPY@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    final int prime &#x3D; 31;</span><br><span class="line">    int result &#x3D; 1;</span><br><span class="line">    result &#x3D; prime * result + age;</span><br><span class="line">    result &#x3D; prime * result + ((name &#x3D;&#x3D; null) ? 0 : name.hashCode());</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">    if (this &#x3D;&#x3D; obj)</span><br><span class="line">        return true;</span><br><span class="line">    if (obj &#x3D;&#x3D; null)</span><br><span class="line">        return false;</span><br><span class="line">    if (getClass() !&#x3D; obj.getClass())</span><br><span class="line">        return false;</span><br><span class="line">    Person other &#x3D; (Person) obj;</span><br><span class="line">    if (age !&#x3D; other.age)</span><br><span class="line">        return false;</span><br><span class="line">    if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">        if (other.name !&#x3D; null)</span><br><span class="line">            return false;</span><br><span class="line">    &#125; else if (!name.equals(other.name))</span><br><span class="line">        return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hashCode方法里为什么要使用31这个数字大概有两个原因：</p><ol><li>31是一个质数，这样的数字在计算时可以尽量减少散列冲突。</li><li>可以提高执行效率，因为31*i=(i&lt;&lt;5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有网上一些人对这两点提出质疑。</li></ol><hr><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><strong>TreeSet</strong></h5><ul><li>基于排序顺序实现不重复。</li><li>实现了SortedSet接口，对集合元素自动排序。</li><li>元素对象的类型必须实现Comparable接口，指定排序规则。</li><li>通过CompareTo方法确定是否为重复元素。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 使用TreeSet保存数据</span><br><span class="line"> * 存储结构：红黑树</span><br><span class="line"> * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 </span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TreeSet&lt;Person&gt; persons&#x3D;new TreeSet&lt;Person&gt;();</span><br><span class="line">Person p1&#x3D;new Person(&quot;tang&quot;,21);</span><br><span class="line">Person p2&#x3D;new Person(&quot;he&quot;, 22);</span><br><span class="line">Person p3&#x3D;new Person(&quot;yu&quot;, 21);</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">persons.add(p1);</span><br><span class="line">persons.add(p2);</span><br><span class="line">persons.add(p3);</span><br><span class="line">&#x2F;&#x2F;注：直接添加会报类型转换错误，需要实现Comparable接口</span><br><span class="line">System.out.println(persons.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">persons.remove(p1);</span><br><span class="line">persons.remove(new Person(&quot;he&quot;, 22));</span><br><span class="line">System.out.println(persons.toString());</span><br><span class="line">&#x2F;&#x2F;3.遍历（略）</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(persons.contains(new Person(&quot;yu&quot;, 21)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic class Person implements Comparable&lt;Person&gt;&#123;</span><br><span class="line">    @Override</span><br><span class="line">&#x2F;&#x2F;1.先按姓名比</span><br><span class="line">&#x2F;&#x2F;2.再按年龄比</span><br><span class="line">public int compareTo(Person o) &#123;</span><br><span class="line">int n1&#x3D;this.getName().compareTo(o.getName());</span><br><span class="line">int n2&#x3D;this.age-o.getAge();</span><br><span class="line">return n1&#x3D;&#x3D;0?n2:n1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * TreeSet的使用</span><br><span class="line"> * Comparator：实现定制比较（比较器）</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TreeSet&lt;Person&gt; persons&#x3D;new TreeSet&lt;Person&gt;(new Comparator&lt;Person&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Person o1, Person o2) &#123;</span><br><span class="line">&#x2F;&#x2F; 先按年龄比较</span><br><span class="line">&#x2F;&#x2F; 再按姓名比较</span><br><span class="line">int n1&#x3D;o1.getAge()-o2.getAge();</span><br><span class="line">int n2&#x3D;o1.getName().compareTo(o2.getName());</span><br><span class="line">return n1&#x3D;&#x3D;0?n2:n1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Person p1&#x3D;new Person(&quot;tang&quot;,21);</span><br><span class="line">Person p2&#x3D;new Person(&quot;he&quot;, 22);</span><br><span class="line">Person p3&#x3D;new Person(&quot;yu&quot;, 21);</span><br><span class="line">persons.add(p1);</span><br><span class="line">persons.add(p2);</span><br><span class="line">persons.add(p3);</span><br><span class="line">System.out.println(persons.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来做一个小案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 要求：使用TreeSet集合实现字符串按照长度进行排序</span><br><span class="line"> * helloworld tangrui hechengyang wangzixu yuguoming</span><br><span class="line"> * Comparator接口实现定制比较</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TreeSet&lt;String&gt; treeSet&#x3D;new TreeSet&lt;String&gt;(new Comparator&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">&#x2F;&#x2F;先比较字符串长度</span><br><span class="line">&#x2F;&#x2F;再比较字符串</span><br><span class="line">public int compare(String o1, String o2) &#123;</span><br><span class="line">int n1&#x3D;o1.length()-o2.length();</span><br><span class="line">int n2&#x3D;o1.compareTo(o2);</span><br><span class="line">return n1&#x3D;&#x3D;0?n2:n1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">treeSet.add(&quot;helloworld&quot;);</span><br><span class="line">treeSet.add(&quot;tangrui&quot;);</span><br><span class="line">treeSet.add(&quot;hechenyang&quot;);</span><br><span class="line">treeSet.add(&quot;yuguoming&quot;);</span><br><span class="line">treeSet.add(&quot;wangzixu&quot;);</span><br><span class="line">System.out.println(treeSet.toString());</span><br><span class="line">        &#x2F;&#x2F;输出[tangrui, wangzixu, yuguoming, hechenyang, helloworld]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Map体系集合</strong></p><ul><li><p>Map接口的特点：</p><ol><li>用于存储任意键值对(Key-Value)。</li><li>键：无序、无下标、不允许重复（唯一）。</li><li>值：无序、无下标、允许重复。</li></ol></li></ul><hr><h2 id="Map集合概述"><a href="#Map集合概述" class="headerlink" title="Map集合概述"></a><strong>Map集合概述</strong></h2><ul><li><p><strong>特点</strong>：存储一对数据（Key-Value），无序、无下标，键不可重复。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>V put(K key,V value)</code>//将对象存入到集合中，关联键值。key重复则覆盖原值。</li></ul></li><li><p><code>Object get(Object key)</code>//根据键获取相应的值。</p><ul><li><code>Set&lt;K&gt;</code>//返回所有的key</li><li><code>Collection&lt;V&gt; values()</code>//返回包含所有值的Collection集合。</li><li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code>//键值匹配的set集合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * Map接口的使用</span><br><span class="line"> * 特点：1.存储键值对 2.键不能重复，值可以重复 3.无序</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String,Integer&gt; map&#x3D;new HashMap&lt;String, Integer&gt;();</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">map.put(&quot;tang&quot;, 21);</span><br><span class="line">map.put(&quot;he&quot;, 22);</span><br><span class="line">map.put(&quot;fan&quot;, 23);</span><br><span class="line">System.out.println(map.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">map.remove(&quot;he&quot;);</span><br><span class="line">System.out.println(map.toString());</span><br><span class="line">&#x2F;&#x2F;3.遍历</span><br><span class="line">&#x2F;&#x2F;3.1 使用keySet();</span><br><span class="line">for (String key : map.keySet()) &#123;</span><br><span class="line">System.out.println(key+&quot; &quot;+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2 使用entrySet();效率较高</span><br><span class="line">for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">System.out.println(entry.getKey()+&quot; &quot;+entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Map集合的实现类"><a href="#Map集合的实现类" class="headerlink" title="Map集合的实现类"></a><strong>Map集合的实现类</strong></h3><h4 id="HashMap【重点】"><a href="#HashMap【重点】" class="headerlink" title="HashMap【重点】"></a><strong>HashMap【重点】</strong></h4><ul><li><p>JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line">   * 学生类</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public class Student &#123;</span><br><span class="line">  private String name;</span><br><span class="line">  private int id;</span><br><span class="line">  public Student(String name, int id) &#123;</span><br><span class="line">  super();</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">  this.id &#x3D; id;</span><br><span class="line">  &#125;</span><br><span class="line">  public String getName() &#123;</span><br><span class="line">  return name;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setName(String name) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">  &#125;</span><br><span class="line">  public int getId() &#123;</span><br><span class="line">  return id;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setId(int id) &#123;</span><br><span class="line">  this.id &#x3D; id;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  public String toString() &#123;</span><br><span class="line">  return &quot;Student [name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + id + &quot;]&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line">   * HashMap的使用</span><br><span class="line">   * 存储结构：哈希表（数组+链表+红黑树）</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public class Demo2 &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">  HashMap&lt;Student, String&gt; hashMap&#x3D;new HashMap&lt;Student, String&gt;();</span><br><span class="line">  Student s1&#x3D;new Student(&quot;tang&quot;, 36);</span><br><span class="line">  Student s2&#x3D;new Student(&quot;yu&quot;, 101);</span><br><span class="line">  Student s3&#x3D;new Student(&quot;he&quot;, 10);</span><br><span class="line">  &#x2F;&#x2F;1.添加元素</span><br><span class="line">  hashMap.put(s1, &quot;成都&quot;);</span><br><span class="line">  hashMap.put(s2, &quot;杭州&quot;);</span><br><span class="line">  hashMap.put(s3, &quot;郑州&quot;);</span><br><span class="line">  &#x2F;&#x2F;添加失败，但会更新值</span><br><span class="line">  hashMap.put(s3,&quot;上海&quot;);</span><br><span class="line">  &#x2F;&#x2F;添加成功，不过两个属性一模一样；</span><br><span class="line">  &#x2F;&#x2F;注：假如相同属性便认为是同一个对象，怎么修改？</span><br><span class="line">  hashMap.put(new Student(&quot;he&quot;, 10),&quot;上海&quot;);</span><br><span class="line">  System.out.println(hashMap.toString());</span><br><span class="line">  &#x2F;&#x2F;2.删除元素</span><br><span class="line">  hashMap.remove(s3);</span><br><span class="line">  System.out.println(hashMap.toString());</span><br><span class="line">  &#x2F;&#x2F;3.遍历</span><br><span class="line">  &#x2F;&#x2F;3.1 使用keySet()遍历</span><br><span class="line">  for (Student key : hashMap.keySet()) &#123;</span><br><span class="line">  System.out.println(key+&quot; &quot;+hashMap.get(key));</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;3.2 使用entrySet()遍历</span><br><span class="line">  for (Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class="line">  System.out.println(entry.getKey()+&quot; &quot;+entry.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;4.判断</span><br><span class="line">  &#x2F;&#x2F;注：同上</span><br><span class="line">  System.out.println(hashMap.containsKey(new Student(&quot;he&quot;, 10)));</span><br><span class="line">  System.out.println(hashMap.containsValue(&quot;成都&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">COPY@Override</span><br><span class="line">  public int hashCode() &#123;</span><br><span class="line">      final int prime &#x3D; 31;</span><br><span class="line">      int result &#x3D; 1;</span><br><span class="line">      result &#x3D; prime * result + id;</span><br><span class="line">      result &#x3D; prime * result + ((name &#x3D;&#x3D; null) ? 0 : name.hashCode());</span><br><span class="line">      return result;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  public boolean equals(Object obj) &#123;</span><br><span class="line">      if (this &#x3D;&#x3D; obj)</span><br><span class="line">          return true;</span><br><span class="line">      if (obj &#x3D;&#x3D; null)</span><br><span class="line">          return false;</span><br><span class="line">      if (getClass() !&#x3D; obj.getClass())</span><br><span class="line">          return false;</span><br><span class="line">      Student other &#x3D; (Student) obj;</span><br><span class="line">      if (id !&#x3D; other.id)</span><br><span class="line">          return false;</span><br><span class="line">      if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">          if (other.name !&#x3D; null)</span><br><span class="line">              return false;</span><br><span class="line">      &#125; else if (!name.equals(other.name))</span><br><span class="line">          return false;</span><br><span class="line">      return true;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a><strong>HashMap源码分析</strong></h4></li><li><p>默认初始化容量：<code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</code></p><ul><li>数组最大容量：<code>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code></li></ul></li><li><p>默认加载因子：<code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></p></li><li><p>链表调整为红黑树的链表长度阈值（JDK1.8）：<code>static final int TREEIFY_THRESHOLD = 8;</code></p></li><li><p>红黑树调整为链表的链表长度阈值（JDK1.8）：<code>static final int UNTREEIFY_THRESHOLD = 6;</code></p></li><li><p>链表调整为红黑树的数组最小阈值（JDK1.8）：<code>static final int MIN_TREEIFY_CAPACITY = 64;</code></p></li><li><p>HashMap存储的数组：<code>transient Node&lt;K,V&gt;[] table;</code></p></li><li><p>HashMap存储的元素个数：<code>transient int size;</code></p><blockquote><ul><li>默认加载因子是什么？<ul><li>就是判断数组是否扩容的一个因子。假如数组容量为100，如果HashMap的存储元素个数超过了100*0.75=75，那么就会进行扩容。</li></ul></li><li>链表调整为红黑树的链表长度阈值是什么？<ul><li>假设在数组中下标为3的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；</li></ul></li><li>红黑树调整为链表的链表长度阈值是什么？<ul><li>当红黑树的元素个数小于该阈值时就会转换成链表。</li></ul></li><li>链表调整为红黑树的数组最小阈值是什么？<ul><li>并不是只要链表长度大于8就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于64才会进行转换。</li></ul></li></ul></blockquote><p>HashMap的数组table存储的就是一个个的Node&lt;K,V&gt;类型，很清晰地看到有一对键值，还有一个指向next的指针（以下只截取了部分源码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPYstatic class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">      final K key;</span><br><span class="line">      V value;</span><br><span class="line">      Node&lt;K,V&gt; next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之前的代码中在new对象时调用的是HashMap的无参构造方法，进入到该构造方法的源码查看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic HashMap() &#123;</span><br><span class="line">      this.loadFactor &#x3D; DEFAULT_LOAD_FACTOR; &#x2F;&#x2F; all other fields defaulted</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>发现没什么内容，只是赋值了一个默认加载因子；而在上文我们观察到源码中table和size都没有赋予初始值，说明刚创建的HashMap对象没有分配容量，并不拥有默认的16个空间大小，这样做的目的是为了节约空间，此时table为null，size为0。</p><p>当我们往对象里添加元素时调用put方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic V put(K key, V value) &#123;</span><br><span class="line">      return putVal(hash(key), key, value, false, true);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>put方法把key和value传给了putVal，同时还传入了一个hash(Key)所返回的值，这是一个产生哈希值的方法，再进入到putVal方法（部分源码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COPYfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                    boolean evict) &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">      if ((tab &#x3D; table) &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)</span><br><span class="line">          n &#x3D; (tab &#x3D; resize()).length;</span><br><span class="line">      if ((p &#x3D; tab[i &#x3D; (n - 1) &amp; hash]) &#x3D;&#x3D; null)</span><br><span class="line">          tab[i] &#x3D; newNode(hash, key, value, null);</span><br><span class="line">      else&#123;</span><br><span class="line">          &#x2F;&#x2F;略</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里面创建了一个tab数组和一个Node变量p，第一个if实际是判断table是否为空，而我们现在只关注刚创建HashMap对象时的状态，此时tab和table都为空，满足条件，执行内部代码，这条代码其实就是把resize()所返回的结果赋给tab，n就是tab的长度，resize顾名思义就是重新调整大小。查看resize()源码（部分）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">COPYfinal Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] oldTab &#x3D; table;</span><br><span class="line">      int oldCap &#x3D; (oldTab &#x3D;&#x3D; null) ? 0 : oldTab.length;</span><br><span class="line">      int oldThr &#x3D; threshold;</span><br><span class="line">      if (oldCap &gt; 0);</span><br><span class="line">      else if (oldThr &gt; 0);</span><br><span class="line">      else &#123;               &#x2F;&#x2F; zero initial threshold signifies using defaults</span><br><span class="line">          newCap &#x3D; DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">          newThr &#x3D; (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">      &#125; </span><br><span class="line">      @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">      Node&lt;K,V&gt;[] newTab &#x3D; (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">      table &#x3D; newTab;</span><br><span class="line">      return newTab;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该方法首先把table及其长度赋值给oldTab和oldCap；threshold是阈值的意思，此时为0，所以前两个if先不管，最后else里newCap的值为默认初始化容量16；往下创建了一个newCap大小的数组并将其赋给了table，刚创建的HashMap对象就在这里获得了初始容量。然后我们再回到putVal方法，第二个if就是根据哈希码得到的tab中的一个位置是否为空，为空便直接添加元素，此时数组中无元素所以直接添加。至此HashMap对象就完成了第一个元素的添加。当添加的元素超过16*0.75=12时，就会进行扩容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPYfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict)&#123;</span><br><span class="line">      if (++size &gt; threshold)</span><br><span class="line">          resize();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>扩容的代码如下（部分）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">COPYfinal Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">      int oldCap &#x3D; (oldTab &#x3D;&#x3D; null) ? 0 : oldTab.length;</span><br><span class="line">      int newCap;</span><br><span class="line">      if (oldCap &gt; 0) &#123;</span><br><span class="line">          if (oldCap &gt;&#x3D; MAXIMUM_CAPACITY) &#123;&#x2F;&#x2F;略&#125;</span><br><span class="line">          else if ((newCap &#x3D; oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                   oldCap &gt;&#x3D; DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>核心部分是else if里的移位操作，<strong>也就是说每次扩容都是原来大小的两倍</strong>。</p></li><li><p>*注**：额外说明的一点是在JDK1.8以前链表是头插入，JDK1.8以后链表是尾插入。</p></li></ul><hr><h4 id="HashSet源码分析"><a href="#HashSet源码分析" class="headerlink" title="HashSet源码分析"></a><strong>HashSet源码分析</strong></h4><p>了解完HashMap之后，再回过头来看之前的HashSet源码，为什么放在后面写你们看一下源码就知道了（部分）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic class HashSet&lt;E&gt;</span><br><span class="line">      extends AbstractSet&lt;E&gt;</span><br><span class="line">      implements Set&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">  &#123;</span><br><span class="line">      private transient HashMap&lt;E,Object&gt; map;</span><br><span class="line">      private static final Object PRESENT &#x3D; new Object();</span><br><span class="line">      public HashSet() &#123;</span><br><span class="line">          map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看见HashSet的存储结构就是HashMap，那它的存储方式是怎样的呢？可以看一下add方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic boolean add(E e) &#123;</span><br><span class="line">      return map.put(e, PRESENT)&#x3D;&#x3D;null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。。</p><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a><strong>Hashtable</strong></h4><ul><li><p>JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。</p></li><li><p>初始容量11，加载因子0.75。</p><p>这个集合在开发过程中已经不用了，稍微了解即可。</p></li></ul><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a><strong>Properties</strong></h4><ul><li>Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。</li></ul><p>它继承了Hashtable的方法，与流关系密切，此处不详解。</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><strong>TreeMap</strong></h4><ul><li>实现了SortedMap接口（是Map的子接口），可以对key自动排序。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * TreeMap的使用</span><br><span class="line"> * 存储结构：红黑树</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TreeMap&lt;Student, Integer&gt; treeMap&#x3D;new TreeMap&lt;Student, Integer&gt;();</span><br><span class="line">Student s1&#x3D;new Student(&quot;tang&quot;, 36);</span><br><span class="line">Student s2&#x3D;new Student(&quot;yu&quot;, 101);</span><br><span class="line">Student s3&#x3D;new Student(&quot;he&quot;, 10);</span><br><span class="line">&#x2F;&#x2F;1.添加元素</span><br><span class="line">treeMap.put(s1, 21);</span><br><span class="line">treeMap.put(s2, 22);</span><br><span class="line">treeMap.put(s3, 21);</span><br><span class="line">&#x2F;&#x2F;不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小</span><br><span class="line">System.out.println(treeMap.toString());</span><br><span class="line">&#x2F;&#x2F;2.删除元素</span><br><span class="line">treeMap.remove(new Student(&quot;he&quot;, 10));</span><br><span class="line">System.out.println(treeMap.toString());</span><br><span class="line">&#x2F;&#x2F;3.遍历</span><br><span class="line">&#x2F;&#x2F;3.1 使用keySet()</span><br><span class="line">for (Student key : treeMap.keySet()) &#123;</span><br><span class="line">System.out.println(key+&quot; &quot;+treeMap.get(key));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.2 使用entrySet()</span><br><span class="line">for (Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">System.out.println(entry.getKey()+&quot; &quot;+entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;4.判断</span><br><span class="line">System.out.println(treeMap.containsKey(s1));</span><br><span class="line">System.out.println(treeMap.isEmpty());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在学生类中实现Comparable接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Student o) &#123;</span><br><span class="line">        int n1&#x3D;this.id-o.id;</span><br><span class="line">        return n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外还可以使用比较器来定制比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">COPYTreeMap&lt;Student, Integer&gt; treeMap2&#x3D;new TreeMap&lt;Student, Integer&gt;(new Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compare(Student o1, Student o2) &#123;</span><br><span class="line">        &#x2F;&#x2F; 略</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="TreeSet源码"><a href="#TreeSet源码" class="headerlink" title="TreeSet源码"></a><strong>TreeSet源码</strong></h4><p>和HashSet类似，放在TreeMap之后讲便一目了然（部分）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt;</span><br><span class="line">    implements NavigableSet&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    private transient NavigableMap&lt;E,Object&gt; m;</span><br><span class="line">    private static final Object PRESENT &#x3D; new Object();</span><br><span class="line">    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        this.m &#x3D; m;</span><br><span class="line">    &#125;</span><br><span class="line">    public TreeSet() &#123;</span><br><span class="line">        this(new TreeMap&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeSet的存储结构实际上就是TreeMap，再来看其存储方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPYpublic boolean add(E e) &#123;</span><br><span class="line">    return m.put(e, PRESENT)&#x3D;&#x3D;null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。</p><hr><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a><strong>Collections工具类</strong></h2><ul><li><p><strong>概念</strong>：集合工具类，定义了除了存取以外的集合常用方法。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>public static void reverse(List&lt;?&gt; list)</code>//反转集合中元素的顺序</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>//随机重置集合元素的顺序</li><li><code>public static void sort(List&lt;T&gt; list)</code>//升序排序（元素类型必须实现Comparable接口）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">COPY&#x2F;**</span><br><span class="line"> * 演示Collections工具类的使用</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Integer&gt; list&#x3D;new ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(20);</span><br><span class="line">list.add(10);</span><br><span class="line">list.add(30);</span><br><span class="line">list.add(90);</span><br><span class="line">list.add(70);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;sort排序</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">System.out.println(&quot;---------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;binarySearch二分查找</span><br><span class="line">int i&#x3D;Collections.binarySearch(list, 10);</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;copy复制</span><br><span class="line">List&lt;Integer&gt; list2&#x3D;new ArrayList&lt;Integer&gt;();</span><br><span class="line">for(int i1&#x3D;0;i1&lt;5;++i1) &#123;</span><br><span class="line">list2.add(0);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;该方法要求目标元素容量大于等于源目标</span><br><span class="line">Collections.copy(list2, list);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;reserve反转</span><br><span class="line">Collections.reverse(list2);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shuffle 打乱</span><br><span class="line">Collections.shuffle(list2);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;补充：list转成数组</span><br><span class="line">Integer[] arr&#x3D;list.toArray(new Integer[0]);</span><br><span class="line">System.out.println(arr.length);</span><br><span class="line">&#x2F;&#x2F;补充：数组转成集合 </span><br><span class="line">String[] nameStrings&#x3D; &#123;&quot;tang&quot;,&quot;he&quot;,&quot;yu&quot;&#125;;</span><br><span class="line">&#x2F;&#x2F;受限集合，不能添加和删除</span><br><span class="line">List&lt;String&gt; list3&#x3D;Arrays.asList(nameStrings);</span><br><span class="line">System.out.println(list3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注：基本类型转成集合时需要修改为包装类</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>完结撒花❀</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年度总结</title>
      <link href="posts/276e22e/"/>
      <url>posts/276e22e/</url>
      
        <content type="html"><![CDATA[<center><font face="微软雅黑"  size=5>2020年度报告</font></center><hr><blockquote><p> 引言</p><p>光阴易逝,岂容我待！转眼间，2020年已经走完了，再见2020，你好2021！</p></blockquote><p>其实我不喜欢写关于个人的一些东西，因为自己实在是没什么可说的闪光点，写起来太费劲。哈哈。。🤣🤣🤣 回顾起2020年，感觉该学的没学，该做的也没做。每天安于现状，只求安逸。时不时也会激昂，三两天之后又会回到原来的状态。可能真就应了那句“持续性踌躇满志，间歇性混吃等死”吧。虽然明白这样是不对的。</p><p>学习方面，今年趁着疫情从新学习了一遍。以前不懂模糊的有种拨云见日的感觉吧。年末的时候开始准备学习了SpringCloud，以前以为它是一项技术。现在才晓得它是一套分布式的解决方案，有点后知后觉。说到学习，还是非常枯燥的。特别是一些问题太尼玛的玄学了（应该是我技术不够（dog））！学习还是重在坚持，也要自己给自己压力，不然很容易放弃。</p><p>其实，到这里也没什么想说的了。你问我为什么这么短，因为今年同过去的21年一样太平淡。如果说在2020年最后的2小时18分有什么想对2021年想说的，我想说的一句就是：“别忘记自己的定下的计划”。在最后，我一直想写一篇关于剥析我个人及生命前20来年的文章，算是了结一直以来的心愿吧。关于这篇文章，敬请期待吧！！！</p><p>最最最最最后放几张，今年最喜欢的动漫吧：（Gitee太坑了，图片大于1M看不了，淦！）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/%E8%87%AA%E7%94%B1%E4%B9%8B%E7%BF%BC%20(1).gif"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/%E5%85%B5%E9%95%BF%20(1).gif"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/%E5%B7%A8%E4%BA%BA_%E5%85%A8%20(1).gif"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 年度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为windows terminal加上右键菜单</title>
      <link href="posts/d9ecfaf6/"/>
      <url>posts/d9ecfaf6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>很早就听说了Windows Terminal，今天算是正式使用了。整体感觉还是挺好的但是右键菜单发现没有Treminal，没办法只好手动添加了。记录一下，说不定那天就忘记了。</p></blockquote><p>其实很简单，复制下面代码更改一下相关配置即可</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;在此处打开 Windows Terminal 窗口&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Public\\Pictures\\wt_32.ico&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解释</span><br><span class="line"><span class="number">1</span>、[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">   末尾的wt为程序的名字，windows Terminal 就简写成 wt了</span><br><span class="line">   </span><br><span class="line"><span class="number">2</span>、@=&quot;在此处打开 Windows Terminal 窗口&quot;</span><br><span class="line">   引号内的内容为右键菜单显示的内容，中文会乱码，我们可以在设置好后去注册表里修改就不会乱码</span><br><span class="line">   </span><br><span class="line"><span class="number">3</span>、&quot;Icon&quot;=&quot;C:\\Users\\Public\\Pictures\\wt_32.ico&quot;</span><br><span class="line">   引号内为右键菜单后第二步显示内容旁的图标，</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">   为第一步下的文件，注意路径。command文件夹命名不要变</span><br><span class="line">   </span><br><span class="line"><span class="number">5</span>、@=&quot;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br><span class="line">   Windows terminal 程序的位置，\\分割路径</span><br></pre></td></tr></table></figure><p><strong>保存文件后，改为 .reg结尾的文件双击运行即可！</strong></p><p><strong>Windows Terinal的icon图标：</strong><a href="https://wwa.lanzous.com/idGORjkwvhe">https://wwa.lanzous.com/idGORjkwvhe</a></p><p><strong>Windows Terminal的icon图标也可以在本机下的：</strong></p><p><strong>C:\Program Files\WindowsApps\Microsoft.WindowsTerminal_1.4.3243.0_x64__8wekyb3d8bbwe\Images下寻找。</strong></p><p><strong>右键中文乱码问题：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201221221030206.png" alt="image-20201221221030206"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Teminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使百度和谷歌的搜索引擎收录你的网站</title>
      <link href="posts/cbff76b9/"/>
      <url>posts/cbff76b9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信很多小伙伴搭建了个人的网站，是不是发现使用百度和谷无论如何也搜索不到自己的网站呢？那是因为你的网站还没有没搜索引擎收录导致的，本篇就来介绍怎么使百度和谷歌的搜索引擎收录你的网站。话不多说，让我开始吧！</p></blockquote><p><strong>注意：</strong>本篇只是介绍如何使搜索引擎收录你的网站，具体的SEO优化工作请参考其它资料！</p><blockquote><ul><li>百度收录：<a href="https://ziyuan.baidu.com/">https://ziyuan.baidu.com/</a></li><li>谷歌收录：<a href="https://search.google.com/">https://search.google.com/</a></li></ul></blockquote><h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><p>我们打开百度搜索资源平台，找到站点管理</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219140118312.png" alt="image-20201219140118312"></p><p>我们点击添加网站（第一次添加可能会和我的界面不太一样）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219140534493.png" alt="image-20201219140534493"></p><p>跟着三步走(不要更改验证文件的名字)</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219141104307.png" alt="image-20201219141104307"></p><p>完成上述验证后，点击普通收录，点击sitemap方式提交</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219141402249.png" alt="image-20201219141402249"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219141432986.png" alt="image-20201219141432986"></p><blockquote><p>这里我们需要准备网站地图了，关于sitemap的制作，有很多方式。比如我使用hexo搭建的博客就可以使用hexo-generator-baidu-sitemap插件。</p><p>也可以使用在线的网站来制作，有：<a href="https://www.xml-sitemaps.com/%E3%80%82%E4%B8%8B%E8%BD%BD%E5%88%B6%E4%BD%9C%E5%A5%BD%E7%9A%84sitemap.xml%E6%96%87%E4%BB%B6%E5%B0%86%E5%AE%83%E6%94%BE%E5%88%B0%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95">https://www.xml-sitemaps.com/。下载制作好的sitemap.xml文件将它放到网站根目录</a></p></blockquote><p>提交sitemap.xml完成收录</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219142333254.png" alt="image-20201219142333254"></p><h1 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h1><p>打开链接，会看到下图，跟着指示操作即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219142620355.png" alt="image-20201219142620355"></p><p>提交sitemap.xml</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219143347956.png" alt="image-20201219143347956" style="zoom: 67%;" /><blockquote><p>以上就是如何使搜索引擎收录你的网站了，Google的收录会很快，少则几小时，多则两三天。相比之下百度因为某些原因会非常缓慢，耐心等待把！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> baidu </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确的使用搜索引擎</title>
      <link href="posts/a78e1131/"/>
      <url>posts/a78e1131/</url>
      
        <content type="html"><![CDATA[<blockquote><p>去年的时候通过一篇科普知晓了搜索引擎原来可以这么玩，今天再次被如何正确的使用搜索引擎刷屏。很感谢那篇科普是我面向搜索引擎编程愈发的熟练了😆😆😆。闲着无聊，就写写我日常使用搜索引擎的小技巧吧。本篇介绍简单的技巧，复杂的感觉用不上几次。为了不浪费脑容量，记记常用的就可以。复杂的需要的时候再查找就可以了，一般也用不上（U•ェ•*U）</p></blockquote><h1 id="双引号-“”"><a href="#双引号-“”" class="headerlink" title="双引号 “”"></a>双引号 “”</h1><blockquote><p>它会返回包含双引号内较多内容的词条</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219012059542.png" alt="image-20201219012059542"></p><h1 id="减号"><a href="#减号" class="headerlink" title="减号 -"></a>减号 -</h1><blockquote><p>当你搜索能吃的苹果时，会优先返回苹果公司相关的内容，我们可以使用减号来排除苹果公司这个干扰项。使其返回我们想要的结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219013218189.png" alt="image-20201219013218189"></p><h1 id="关键字-site-xxx-com"><a href="#关键字-site-xxx-com" class="headerlink" title="关键字 site:xxx.com"></a>关键字 site:xxx.com</h1><blockquote><p>它回去指定的网站内寻找包含关键字的内容</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219013540615.png" alt="image-20201219013540615"></p><h1 id="星号通配符"><a href="#星号通配符" class="headerlink" title="* 星号通配符"></a>* 星号通配符</h1><blockquote><p>在搜索时使用星号*，会留下一个占位符，谷歌会根据数据库信息自动填充星号所替代的内容。比如搜索模糊的内容，诗句..</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219014729691.png" alt="image-20201219014729691"></p><h1 id="related-http-xxx-com"><a href="#related-http-xxx-com" class="headerlink" title="related:http://xxx.com"></a>related:<a href="http://xxx.com/">http://xxx.com</a></h1><blockquote><p>可以帮助我寻找同类型的网站</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219014808335.png" alt="image-20201219014808335"></p><h1 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h1><blockquote><p>输入两个关键字，使用空格分开会使查询的结果更精确</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219014558388.png" alt="image-20201219014558388"></p><h1 id="使用搜索引擎进行计算"><a href="#使用搜索引擎进行计算" class="headerlink" title="使用搜索引擎进行计算"></a>使用搜索引擎进行计算</h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219014911522.png" alt="image-20201219014911522"></p><h1 id="filetype"><a href="#filetype" class="headerlink" title="filetype:"></a>filetype:</h1><blockquote><p>查看特定的文件格式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219015154684.png" alt="image-20201219015154684"></p><h1 id="define"><a href="#define" class="headerlink" title="define:"></a>define:</h1><blockquote><p>遇到陌生的单词 ，加上它搜索引擎会告诉你意思和发音</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201219015418438.png" alt="image-20201219015418438"></p><p><strong>我个人比较常用的也就这么多了！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基本语法</title>
      <link href="posts/bbf13a25/"/>
      <url>posts/bbf13a25/</url>
      
        <content type="html"><![CDATA[<h4 id="一、JavaScript基本语法"><a href="#一、JavaScript基本语法" class="headerlink" title="一、JavaScript基本语法"></a>一、JavaScript基本语法</h4><h5 id="1-1、变量声明"><a href="#1-1、变量声明" class="headerlink" title="1.1、变量声明"></a>1.1、变量声明</h5><blockquote><ul><li>在JavaScript中，任何变量都用var关键字来声明，var是varuable的缩写。</li><li>var是声明，a是变量名，语句以分号结尾。</li><li>JavaScript中的关键字不可以当作变量名</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure><blockquote><p>JavaScript的部分关键字</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Javascript关键字(Reserved Words)是指在Javascript语言中有特定含义，成为Javascript语法中一部分的那些字。Javascript关键字是不能作为变量名和函数名使用的。使用Javascript关键字作为变量名或函数名，会使Javascript在载入过程中出现编译错误。不能把关键字、保留字、<span class="literal">true</span>、<span class="literal">false</span>和<span class="literal">null</span>用作标识符。</span><br><span class="line"></span><br><span class="line">js中的关键字可用于表示控制语句的开始或结束，或者用于执行特定操作等。按照规则，关键字也是语言保留的，不能用作标识符。以下就是ECMAScription的全部关键字：</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>、<span class="keyword">else</span>、<span class="keyword">new</span>、<span class="keyword">var</span>、<span class="keyword">case</span>、<span class="keyword">finally</span>、<span class="keyword">return</span>、<span class="keyword">void</span>、<span class="keyword">catch</span>、<span class="keyword">for</span>、<span class="keyword">switch</span>、<span class="keyword">while</span>、<span class="keyword">continue</span>、<span class="function"><span class="keyword">function</span>、<span class="title">this</span>、<span class="title">with</span>、<span class="title">default</span>、<span class="title">if</span>、<span class="title">throw</span>、<span class="title">delete</span>、<span class="title">in</span>、<span class="title">try</span>、<span class="title">do</span>、<span class="title">instranceof</span>、<span class="title">typeof</span>。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">ECMA</span>还描述了另外一组不能用作标识符的保留字。尽管保留字在这门语言中还没有任何特定的用途，但它们有可能将来被用作关键字。下面是<span class="title">ECMA</span>第3版定义的全部保留字：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">abstract</span>、<span class="title">enum</span>、<span class="title">int</span>、<span class="title">short</span>、<span class="title">boolean</span>、<span class="title">export</span>、<span class="title">interface</span>、<span class="title">static</span>、<span class="title">byte</span>、<span class="title">extends</span>、<span class="title">long</span>、<span class="title">super</span>、<span class="title">char</span>、<span class="title">final</span>、<span class="title">native</span>、<span class="title">synchronized</span>、<span class="title">class</span>、<span class="title">float</span>、<span class="title">package</span>、<span class="title">throws</span>、<span class="title">const</span>、<span class="title">goto</span>、<span class="title">private</span> 、<span class="title">transient</span>、<span class="title">debugger</span>、<span class="title">implements</span>、<span class="title">protected</span> 、<span class="title">volatile</span>、<span class="title">double</span>、<span class="title">import</span>、<span class="title">public</span>。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">在代码中使用关键字作为标识符在大多数浏览器中都会倒是“<span class="title">Identifier</span> <span class="title">Expected</span>”（缺少标识符）错误。而使用保留字可能不会导致同样的错误，这要视具体的浏览器而定。一般来说，最好不要使用关键字和保留字作为标识符，一遍与<span class="title">ECMAScript</span>未来的版本保持兼容。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">关键字的内容并不是一成不变的，随着<span class="title">JavaScript</span>版本的提升，关键字也会随之发生变化，比如<span class="title">ES2015</span>新增<span class="title">let</span>和<span class="title">const</span>等为关键字。</span></span><br></pre></td></tr></table></figure><h5 id="1-2、基本类型"><a href="#1-2、基本类型" class="headerlink" title="1.2、基本类型"></a>1.2、基本类型</h5><blockquote><ul><li>变量的基本类型又有 Number、String、Boolean、Undefined、Null五种。</li><li>来声明一个数字Number类型，如下：</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>来声明一个字符串String类型</li><li>你可以使用：</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>来声明一个布尔Boolean类型</li><li>你可以使用：</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>在JavaScript中，当一个变量未被初始化的时候，它的值为undefined。</li><li>如下打印结果：</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">document</span>.write(a);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h5 id="1-3、引用类型"><a href="#1-3、引用类型" class="headerlink" title="1.3、引用类型"></a>1.3、引用类型</h5><blockquote><p>在JavaScript在对象可以直接写出来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">document</span>.write(student.id); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">document</span>.write(student.name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">document</span>.write(student.age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上，student被赋值为了一个JSON，JSON就是我们Java学过的，全称是JavaScript Object Notation，叫做JavaScript对象标记，也就是说，在JavaScript中，JSON是用于标记一个对象的。</p></blockquote><h5 id="1-4、数组类型"><a href="#1-4、数组类型" class="headerlink" title="1.4、数组类型"></a>1.4、数组类型</h5><blockquote><ul><li>数组就是我们之前理解的数组概念一致，而在JavaScript中成为Array类型</li><li>我们说JSON可以标记一个对象，那么它同样可以标记一个数组，就是Java中的JSONArray.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><blockquote><p>接下来我们把对象放入数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;王五&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">0</span>].id)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">0</span>].name)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">0</span>].age)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/br&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">1</span>].id)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">1</span>].name)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">1</span>].age)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/br&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">2</span>].id)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">2</span>].name)</span><br><span class="line"><span class="built_in">document</span>.write(student[<span class="number">2</span>].age)</span><br></pre></td></tr></table></figure><h5 id="1-5、运算符"><a href="#1-5、运算符" class="headerlink" title="1.5、运算符"></a>1.5、运算符</h5><blockquote><p>逻辑运算</p></blockquote><table><thead><tr><th>名称</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>与</td><td>&amp;&amp;</td><td>要求表达式左右两边同为true，整体结果才为true</td></tr><tr><td>或</td><td>||</td><td>要求表达式左右两边只要有一个true，整体结果就为true</td></tr><tr><td>非</td><td>！</td><td>将布尔值取反操作</td></tr></tbody></table><blockquote><p>关系运算</p></blockquote><table><thead><tr><th>名称</th><th>运算符</th></tr></thead><tbody><tr><td>等于</td><td>==</td></tr><tr><td>小于</td><td>&lt;</td></tr><tr><td>小于或等于</td><td>&lt;=</td></tr><tr><td>大于</td><td>&gt;</td></tr><tr><td>大于或等于</td><td>&gt;=</td></tr><tr><td>不等于</td><td>!=</td></tr><tr><td>值和类型相同</td><td>===</td></tr></tbody></table><blockquote><p>单目运算：自增自减</p></blockquote><table><thead><tr><th>名称</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>自增</td><td>++</td><td>变量的值每次加1，再赋给变量</td></tr><tr><td>自减</td><td>–</td><td>变量的值每次减1，再赋给变量</td></tr></tbody></table><blockquote><p>双目运算符</p></blockquote><table><thead><tr><th>名称</th><th>运算符</th></tr></thead><tbody><tr><td>加</td><td>+</td></tr><tr><td>减</td><td>-</td></tr><tr><td>乘</td><td>*</td></tr><tr><td>除</td><td>/</td></tr><tr><td>求余</td><td>%</td></tr><tr><td>赋值</td><td>=</td></tr><tr><td>加等</td><td>+=</td></tr><tr><td>减等</td><td>-=</td></tr><tr><td>除等</td><td>/=</td></tr><tr><td>乘等</td><td>*=</td></tr><tr><td>求余等</td><td>%=</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a+=b;<span class="comment">//相加后赋值,a+b=b</span></span><br><span class="line">a-=b;<span class="comment">//相减后赋值,a-b=b</span></span><br><span class="line">a*=b;<span class="comment">//相乘后赋值,a*b=b</span></span><br><span class="line">a/=b;<span class="comment">//相除后赋值,a/b=b</span></span><br><span class="line">a%=b;<span class="comment">//求余后赋值,a%b=b</span></span><br></pre></td></tr></table></figure><h5 id="1-6、条件分支结构"><a href="#1-6、条件分支结构" class="headerlink" title="1.6、条件分支结构"></a>1.6、条件分支结构</h5><blockquote><p>if-else分支</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;不相等&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch分支</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;值为1&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;值为2&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;值不是1，也不是2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-7、循环结构"><a href="#1-7、循环结构" class="headerlink" title="1.7、循环结构"></a>1.7、循环结构</h5><blockquote><p>for循环</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    a+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(a);</span><br><span class="line"><span class="comment">// 使用for循环对1~100的求和。</span></span><br></pre></td></tr></table></figure><blockquote><p>while循环</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    a+=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(a)</span><br><span class="line"><span class="comment">// 使用while循环对1~100求和。</span></span><br></pre></td></tr></table></figure><blockquote><p>do-while循环</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    a+=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line"><span class="comment">// 使用do-while循环1~100求和。</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>break和continue关键字<ul><li>break用于结束循环</li><li>continue用于结束本次循环</li></ul></li></ul></blockquote><h5 id="1-8、函数"><a href="#1-8、函数" class="headerlink" title="1.8、函数"></a>1.8、函数</h5><blockquote><p>函数定义：用function关键字来声明，后面是方法的名字，参数列表里不写var。整个方法不写返回值类型。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functonName</span>(<span class="params">Paramenters</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法的定义与调用举例：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = add(a,b);</span><br><span class="line"><span class="built_in">document</span>.write(c);<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 这里定义了一个add方法，参数是两个。与Java不同，参数的数据类型并没有。</span></span><br><span class="line"><span class="comment">// 因为就算是写，全都是var，为了保证语法的简洁性，就设计成全都不用写了。</span></span><br><span class="line"><span class="comment">// 返回值也是同样的道理，区别是，如果你写了返回值，那么有返回值，如果没写return，就没有返回值。</span></span><br></pre></td></tr></table></figure><h5 id="1-9、常见弹窗函数"><a href="#1-9、常见弹窗函数" class="headerlink" title="1.9、常见弹窗函数"></a>1.9、常见弹窗函数</h5><blockquote><ul><li>alert弹框：这是一个只能点击确定按钮的弹窗</li><li>alert方法没有返回值，也就是说如果用一个变量去接收返回值，将会得到undefined。无论你点击”确定“还是右上角那个”X“关闭。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;你好&quot;</span>)；</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/12/17/hY7NUSkKvQxnZHT.png" alt="image-20201217163725163"></p><blockquote><ul><li>confirm弹框：这是一个你可以点击确定或者取消的弹窗</li><li>confirm方法与alert 不同，它的返回值是Boolean。当你点击”确定“时，返回true，点击”取消“时返回false。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confirm(<span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201217164513980.png" alt="image-20201217164513980"></p><blockquote><ul><li>prompt弹框：这是一个你可以输入文本内容的弹框<ul><li>第一个参数是提示信息，第二个参数是用户输入的默认值。</li></ul></li><li>当你点击确定的时候，返回用户输入的内容。当你点击取消或者关闭的时候，返回null。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = prompt(<span class="string">&quot;请输入你的名字：&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(name);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201217165136081.png" alt="image-20201217165136081"></p><h5 id="1-10、事件"><a href="#1-10、事件" class="headerlink" title="1.10、事件"></a>1.10、事件</h5><table><thead><tr><th>事件名称</th><th>描述</th></tr></thead><tbody><tr><td>onchange</td><td>HTML元素内容改变</td></tr><tr><td>onclick</td><td>用户点击HTML元素</td></tr><tr><td>onmouseover</td><td>用户将鼠标移入一个HTML元素中</td></tr><tr><td>onmousemove</td><td>用户在一个HTML元素移动鼠标</td></tr><tr><td>onmouseout</td><td>用户从一个HTML元素上移开鼠标</td></tr><tr><td>onkeyup</td><td>键盘</td></tr><tr><td>onkeydown</td><td>用户按下键盘</td></tr><tr><td>onload</td><td>浏览器已完成页面的加载</td></tr><tr><td>onsubmit</td><td>表单提交</td></tr></tbody></table><h5 id="1-11正则表达式"><a href="#1-11正则表达式" class="headerlink" title="1.11正则表达式"></a>1.11正则表达式</h5><blockquote><ul><li>正则表达式是描述字符模式的对象。</li><li>正则表达式用户对字符串模式匹配及检索替换。</li><li>语法：<ul><li>var patt = new RegExp(pattern,modifiers);</li><li>var patt = /pattern/modfifiers;</li></ul></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\a+&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\a6/</span>;</span><br></pre></td></tr></table></figure><blockquote><p>修饰符：用于执行区分大小写和全局匹配</p></blockquote><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找第一个匹配后停止）</td></tr><tr><td>m</td><td>执行多行匹配</td></tr></tbody></table><blockquote><p>方括号：用于查找某个范围内的字符</p></blockquote><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符</td></tr><tr><td>[^abc]</td><td>查找不在方括号之间的字符</td></tr><tr><td>[0-9]</td><td>查找任何从0至9的数字</td></tr><tr><td>[a-z]</td><td>查找任何从小写a到小写z的字符</td></tr><tr><td>[A-Z]</td><td>查找任何从大写A到大写Z的字符</td></tr><tr><td>[A-z]</td><td>查找任何从大写A到小写z的字符</td></tr><tr><td>(red|blue|green)</td><td>查找任何指定的选项</td></tr></tbody></table><blockquote><p>RegExp 对象方法</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>compile</td><td>编译正则表达式</td></tr><tr><td>exec</td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td>test</td><td>检索字符串中指定的值。返回true 或 false。</td></tr></tbody></table><blockquote><p>支持正则表达式的String对象方法</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>search</td><td>检索与正则表达式相匹配的值</td></tr><tr><td>match</td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td>reolace</td><td>替换与正则表达式匹配的子串</td></tr><tr><td>split</td><td>把字符串分割为字符数组</td></tr></tbody></table><blockquote><ul><li>正则表达式的使用</li><li>test方法：搜索字符串指定的值，根据结果并返回真或假</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt.test(<span class="string">&quot;I am coming&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><ul><li>正则表达式的使用</li><li>exec()方法：检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配项，则返回null。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;e&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(patt.exec(<span class="string">&quot;I am coming&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="二、JavaScript的DOM"><a href="#二、JavaScript的DOM" class="headerlink" title="二、JavaScript的DOM"></a>二、JavaScript的DOM</h4><h5 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h5><blockquote><ul><li>通过HTML DOM，可访问 JavaScript HTML文档的所有元素。</li><li>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</li><li>HTML DOM 模型被构造为对象的树。</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1608211102448&di=475f235c8663563742ce80b7bcaf9d06&imgtype=0&src=http://d.hiphotos.baidu.com/zhidao/pic/item/023b5bb5c9ea15ced5e1bbd1b1003af33b87b2df.jpg"></p><blockquote><ul><li>通过可编程的对象模型，JavaScriipt获得了足够的能力来创建动态的HTML。<ul><li>JavaScript 能够改变页面中的所有HTML元素。</li><li>JavaScript 能够改变页面中的所有HTML属性。</li><li>JavaScript 能够改变页面中的所有CSS样式。</li><li>JavaScript 能够对页面中的所有事件做出反应。</li></ul></li></ul></blockquote><h5 id="2-2、查找HTML元素"><a href="#2-2、查找HTML元素" class="headerlink" title="2.2、查找HTML元素"></a>2.2、查找HTML元素</h5><blockquote><ul><li>通常，通过JavaScript，操作需要的HTM元素。</li><li>为了做到这件事情，您需要先找到该元素。有三种方法来做这件事：<ul><li>通过id找到HTML元素<ul><li>在DOM中查找HTML元素最简单的方法，是通过使用元素的id</li><li>方法：document.getElememntById(“id”);</li><li>如果找到该元素，该方法将以对象的形式返回元素。</li><li>如果未找到该元素，则为null</li></ul></li><li>通过标签名找到HTML元素<ul><li>方法：getElementsByTagName(“标签名”)；</li></ul></li><li>通过类目找到HTML元素<ul><li>方法：getElememntByClassName(“class属性的值”)</li></ul></li></ul></li></ul></blockquote><h5 id="2-3、改变HTML"><a href="#2-3、改变HTML" class="headerlink" title="2.3、改变HTML"></a>2.3、改变HTML</h5><blockquote><p>改变HTML输出流：document,write()可用于直接向HTML输出流写内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;Hello,world!&quot;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201217193200531.png" alt="image-20201217193200531"></p><blockquote><p>改变HTML内容：使用innerHTML属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;main&quot;</span>&gt;Hello,World!&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).innerHTML=<span class="string">&quot;Hello,JavaScript!&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201217193623635.png" alt="image-20201217193623635"></p><blockquote><p>改变HTML属性的属性值：document.getElememntById.属性名 = 新属性值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">main</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).style = <span class="string">&quot;color:blue;&quot;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4、CSS变化"><a href="#2-4、CSS变化" class="headerlink" title="2.4、CSS变化"></a>2.4、CSS变化</h5><blockquote><ul><li><p>语法：</p><p>对象.style.css属性名=新样式；</p><p>具体请看下列代码：</p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">main</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">document.getElementById(&quot;main&quot;).style.color = &quot;red&quot;;   <span class="comment">&lt;!--结束时不需要加分号；--&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).style.fontFamily = <span class="string">&quot;monospace&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).style.fontSize = <span class="string">&quot;100px&quot;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-5、DOM事件"><a href="#2-5、DOM事件" class="headerlink" title="2.5、DOM事件"></a>2.5、DOM事件</h5><blockquote><ul><li>HTML DOM允许我们通过触发事件来执行代码。</li><li>比如以下事件：<ul><li>元素被点击</li><li>页面完成加载</li><li>输入框修改</li></ul></li><li>本例改变id=”id1”的HTML元素样式，当用户点击按钮时：</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">main</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;main&#x27;).style.color=&#x27;red&#x27;&quot;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>点击前</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201217202758017.png" alt="image-20201217202758017"></p><blockquote><p>点击后</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201217202823554.png" alt="image-20201217202823554"></p><blockquote><ul><li>HTML DOM使JavaScript有能力对HTML事件做出反应。<ul><li>在本例中，当用户子啊<h1>元素上点击时，会改变其内容：</li></ul></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;this.innerHTML=&#x27;OOPS&#x27;&quot;</span>&gt;</span>点击文本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>本例从事件处理器调用一个函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;changeText(this)&quot;</span>&gt;</span>点击文本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeText</span>(<span class="params">h1</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">h1.innerHTML = <span class="string">&quot;OOPL&quot;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>HTML DOM允许您使用JavaScript来向HTML元素分配事件：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;displayDate()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;displayDate()&#125;    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-6、EventListener"><a href="#2-6、EventListener" class="headerlink" title="2.6、EventListener"></a>2.6、EventListener</h5><blockquote><ul><li>addEventListener()方法</li><li>在用户点击按钮时触发监听事件；</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,aa);</span><br></pre></td></tr></table></figure><blockquote><ul><li>addEventListener()方法用于向指定元素添加事件</li><li>addEventListener()方法添加的事件不会覆盖已存在的事件</li><li>你可以向一个元素添加多个事件</li><li>你可以向同个元素添加多个同类型的事件，如：两个”click“事件</li><li>你可以向任何DOM对象添加事件监听，不仅仅是HTML元素，如：windows对象。</li><li>addEventListener()方法可以更简单的控制事件（冒泡和捕获）。</li><li>当你使用addEventListener()方法时，JavaScript从HTML标记中分离开来，可读性更强。</li></ul></blockquote><blockquote><p>你可以使用removeEventListener()方法来移除事件的监听。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event,<span class="function"><span class="keyword">function</span>,<span class="title">useCapure</span>)</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>event</td><td>事件的类型（如”click“或”mousedown“）</td></tr><tr><td>function</td><td>事件触发后调用的函数</td></tr><tr><td>useCapture</td><td>用于描述事件是冒泡还是捕获。该参数可选</td></tr></tbody></table><blockquote><p>当用户点击元素时弹出”“Hello，World”；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>,mufunction);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mufunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Hello,World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>addEventListener()方法允许向同个元素添加多个事件，且不会覆盖已存在的事件；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>,function1);</span><br><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>,function2);</span><br></pre></td></tr></table></figure><blockquote><p>你可以向同个元素添加不同类型的事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>,function1);</span><br><span class="line">element.addEventListener(<span class="string">&quot;mouseover&quot;</span>,function2);</span><br><span class="line">element.addEventListener(<span class="string">&quot;mouseout&quot;</span>,function3);</span><br></pre></td></tr></table></figure><blockquote><ul><li>addEventListener()方法允许你在HTML DOM对象添加监听事件，HTML DOM对象如：HTML元素，HTML文档。window对象。或者其它支出的事件对象如：xmlHttpResquest对象。</li><li>当用户重置窗口大小时添加事件监听：</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;窗口大小被重置了！&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><ul><li>事件的传递有两种：冒泡与捕获。</li><li>事件传递定义了元素事件触发的顺序。如果你将<p>元素插入到<div>元素中，用户点击<p>元素，哪个元素的“click”事件先被触发呢？<ul><li>在<strong>冒泡</strong>中，内部元素的事件会先被触发，然后再触发外部的元素即：<p>元素的点击事件先触发，然后会触发<div>元素的点击事件。</li><li>再<strong>捕获</strong>中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即：<div>元素的点击事件先触发，然后再触发<p>元素的点击事件。</li></ul></li><li>addEventListener()方法可以指定“useCapure‘参数来设置传递类型；</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(event,<span class="function"><span class="keyword">function</span>,<span class="title">useCapture</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>默认值为false，即冒泡传递，当值为true时，事件使用捕获传递。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,mufunction,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>removeEventListener()方法移除由addEventListener()方法添加的事件句柄：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">&quot;click&quot;</span>,myfunction);</span><br></pre></td></tr></table></figure><h5 id="2-7、操作元素"><a href="#2-7、操作元素" class="headerlink" title="2.7、操作元素"></a>2.7、操作元素</h5><blockquote><ul><li>如需向HTML DOM添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。<ul><li>创建元素：document.creatrElement()</li><li>追加子元素：appendChild()</li><li>删除子元素：removeChild()</li></ul></li><li>如下来例子</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;d1&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;第一段文字&lt;/p&gt; </span><br><span class="line">    &lt;p&gt;第一段文字&lt;/p&gt;    </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;点击添加&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;点击删除&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">       btn.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;这是一段JS添加的文本&quot;</span>);</span><br><span class="line">       p.appendChild(text);</span><br><span class="line">       d1.appendChild(p);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">    btn2.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line">        d1.removeChild(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="三、浏览器BOM"><a href="#三、浏览器BOM" class="headerlink" title="三、浏览器BOM"></a>三、浏览器BOM</h4><blockquote><ul><li>浏览器对象模型(BOM-Browser Object)使JavaScript有能力与浏览器”对话“。</li><li>由于现代浏览器几乎实现了JavaScript交互性的相同方法和属性，因此常被认为是BOM的方法和属性</li></ul></blockquote><h5 id="3-1、window"><a href="#3-1、window" class="headerlink" title="3.1、window"></a>3.1、window</h5><blockquote><ul><li>所有浏览器都支持window对象。它表示浏览器窗口。</li><li>所有JavaScript全局对象、函数以及变量均自动成为window对象的成员。</li><li>全局变量是window对象的属性。</li><li>全局函数是window对象的方法。</li><li>甚至HTML DOM 的document也是window对象的属性之一。</li></ul></blockquote><blockquote><ul><li>window的尺寸<ul><li>对于Internet Explorer、Chrome、FireFox<ul><li>window.innerHeight - 浏览器窗口的内部高度(包括滚动条)</li><li>window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)</li></ul></li></ul></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> height = <span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth</span><br></pre></td></tr></table></figure><blockquote><ul><li>Window Location<ul><li>window.location 对象用于获得当前页面的地址(URL),并把浏览器重定向到新的页面。</li><li>window.location 对象在编写时可不使用window这个前缀。一些例子：<ul><li>location,hostname 返回web主机的域名</li><li>location.pathname 返回当前页面的路径和文件名</li><li>location.port 返回web主机的端口(80或443)</li><li>location.protocol 返回所使用的web协议(http://或https://)</li><li>location.href 返回当前页面的URL</li><li>location.assign() 加载新的文档</li></ul></li></ul></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Load new Doc&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;newDoc()&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">newDoc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.assign(<span class="string">&quot;http://www.baidu.com/&quot;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>Window Screen<ul><li>可用宽度：screen.availWidth 属性返回反问者屏幕的宽度，以像素计算，减去界面特性，比如窗口任务栏。</li><li>可用高度：screen.availHeight 属性返回访问者屏幕的高度，以像素计算，减去界面特性，比如窗口任务栏。</li></ul></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;可用宽度：&quot;</span>+screen.ayvailWidth);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;可用高度：&quot;</span>+screen.availHeight);</span><br></pre></td></tr></table></figure><blockquote><ul><li>Window History<ul><li>window.history 对象包含浏览器的历史</li><li>window.history 对象在编写时可不使用window这个前缀<ul><li>history.black()</li><li>history.forward()</li></ul></li><li>一些方法示例如下：</li></ul></li></ul></blockquote><blockquote><p>history.black()–与在浏览器点击后退按钮相同</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">goBack</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="built_in">window</span> .history. back()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt; /head&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Back&quot;</span> <span class="attr">onclick</span>= <span class="string">”goBack()</span>&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>history.forward()–与浏览器中点击向前相同</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">goForward</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="built_in">window</span> .history. forward()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt; /head&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>= <span class="string">”button</span>&quot; <span class="attr">value</span>=<span class="string">&quot; Forward&quot;</span> <span class="attr">onclick</span>= <span class="string">”goForward()</span>&quot;&gt;</span></span><br><span class="line">&lt; /body&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>window Navigator<ul><li>window.navigator 对象在编写时可不使用window这个前缀</li></ul></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">txt = &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>浏览器代号:”+ navigator . appCodeName + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">txt+= &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>浏览器名称: ”+ navigator . appName + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot; ;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">txt+=” <span class="tag">&lt;<span class="name">p</span>&gt;</span>浏览器版本:”+ navigator . appVersion + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot; ;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">txt+=” <span class="tag">&lt;<span class="name">p</span>&gt;</span>启用Cookies:”+ navigator . cookieEnabled +” <span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">txt+=” <span class="tag">&lt;<span class="name">p</span>&gt;</span>硬件平台:”+ navigator . platform + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot; ;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">txt+= &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>用户代理: ”+ navigator . userAgent + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> &quot; ;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">txt+= &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>用户代理语言: ”+ navigator . systemLanguage + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span> . getElementById(<span class="string">&quot; example&quot;</span>) . innerHTML=txt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-2、JavaScript定时器"><a href="#3-2、JavaScript定时器" class="headerlink" title="3.2、JavaScript定时器"></a>3.2、JavaScript定时器</h5><blockquote><ul><li>定义定时器：<ul><li>setInterval(’调用函数‘,毫秒时间)：每间隔固定毫秒值就执行一次函数</li><li>setTimeout(’调用函数‘,毫秒时间)：在固定时间之后执行一次调用函数</li></ul></li><li>关闭定时器;<ul><li>clearInterval(定时器名称)</li><li>clearTimeout(定时器名称)</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机图片API</title>
      <link href="posts/e56aaba5/"/>
      <url>posts/e56aaba5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>博客从halo转到hexo有一段时间了，开启了文章封面的图片后。每次写博客的时候总是找个封面图花少老半天的时间😒😒😒，因为我比较在意这个事情🤣🤣🤣。想了以下可以用JS实现，但是我比较懒。所以想到了随机图片的api，有问题上知乎果然有随机图片的api，所以整理一下我比较喜欢的api</p></blockquote><blockquote><p>链接收集自知乎问答</p><p>由于链接很多并没有查证来源，如果你是该链接的作者：“谢谢您的开发与开放使用”。</p><p>地址：<a href="https://www.zhihu.com/question/21168322">https://www.zhihu.com/question/21168322</a></p></blockquote><h1 id="以下为链接和链接所展示的图片"><a href="#以下为链接和链接所展示的图片" class="headerlink" title="以下为链接和链接所展示的图片"></a>以下为链接和链接所展示的图片</h1><p>1、<a href="https://api.ixiaowai.cn/mcapi/mcapi.php">https://api.ixiaowai.cn/mcapi/mcapi.php</a></p><img src= "/img/loading.gif" data-lazy-src="https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqq3cz03j21kw0w0gwr.jpg" style="zoom:25%;" /><p>2、<a href="https://api.dujin.org/bing/1920.php">https://api.dujin.org/bing/1920.php</a></p><img src= "/img/loading.gif" data-lazy-src="https://api.dujin.org/bing/1920.php" style="zoom:25%;" /><p>3、<a href="https://api.ixiaowai.cn/gqapi/gqapi.php">https://api.ixiaowai.cn/gqapi/gqapi.php</a></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/gqapi.php" style="zoom:25%;" /><p>4、<a href="https://acg.yanwz.cn/scenery/api.php">https://acg.yanwz.cn/scenery/api.php</a></p><img src= "/img/loading.gif" data-lazy-src="https://acg.yanwz.cn/scenery/api.php" style="zoom:25%;" /><p>5、<a href="https://unsplash.it/1600/900?random">https://unsplash.it/1600/900?random</a></p><img src= "/img/loading.gif" data-lazy-src="https://unsplash.it/1600/900?random" style="zoom:25%;" />]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Spring整合Mybatis出现Access denied for user &#39;Think&#39;@&#39;localhost&#39; (using password: YES)</title>
      <link href="posts/8be34fcd/"/>
      <url>posts/8be34fcd/</url>
      
        <content type="html"><![CDATA[<p> 在整合mybatis时出现Access denied for user ‘Think’@’localhost’ (using password: YES)</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20200305143749419.png" alt="image-20200305143749419"></p><p>找了好半天，网上好多改密码。发现没什么用，可能是我问题描述得不清楚。</p><p>后来看了<a href="https://www.cnblogs.com/xss512/">小小酥512</a>才知道问题</p><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题原因：</p><p>在系统中也有个username属性，这时系统变量覆盖了Properties中的值，这时取得username的值为系统的用户名Administrator，密码为properties中的password去查询数据库，此时用户名名和密码并不匹配就会报错。在Spring完成注入时是用 “${..}”  方式获取值完成注入的。而通过这种表达式也能直接获取到JVM系统属性……….</p><p>解决方案：</p><p>方案一：</p><p>将properties文件中的username换成user或其他就字符串就可以成功获取连接访问数据库。建议：username时敏感词汇，为了安全起见还是尽量不要使用username。</p><p>方案二：</p><p>在Spring配置文件中修改成：&lt;context:property-placeholder location=”classpath:/db.properties” system-properties-mode=”NEVER”/&gt; 添加一个system-properties-mode属性 </p><p>该属性有4个属性：</p><ul><li><p>ENVIRONMENT”：表示占位符应该针对当前环境和任何本地属性进行解析;(从Spring 3.1开始</p><p>属性值默认为“ENVIRONMENT”)</p></li><li><p>“NEVER”：表示占位符只针对本地属性解析，而不针对系统属性解析;</p></li><li><p>“FALLBACK”：表示占位符应该针对任何本地属性进行解析，然后针对系统属性进行解析;</p></li><li><p>“OVERRIDE”：表示占位符应该首先针对系统属性进行解析，然后针对任何本地属性进行解析;　　　　　　</p></li></ul><p><strong>原文：</strong></p><pre><code>Controls how to resolve placeholders against system properties. As of Spring 3.1, this    attribute value defaults to &quot;ENVIRONMENT&quot;, indicating that resolution of placeholders    against system properties is handled via PropertySourcesPlaceholderConfigurer and its    delegation to the current Spring Environment object.For maximum backward compatibility, this attribute is preserved going forward with the3.1 version of the context schema, and any values other than the default &quot;ENVIRONMENT&quot;will cause a traditional PropertyPlaceholderConfigurer to be registered instead of thenewer PropertySourcesPlaceholderConfigurer variant. In this case, the Spring Environmentand its property sources are not interrogated when resolving placeholders. Users areencouraged to consider this attribute deprecated, and to take advantage of theEnvironment and PropertySource mechanisms. See ConfigurableEnvironment javadoc for examples.&quot;ENVIRONMENT&quot; indicates placeholders should be resolved against the current Environment and against any local properties;&quot;NEVER&quot; indicates placeholders should be resolved only against local properties and never against system properties;&quot;FALLBACK&quot; indicates placeholders should be resolved against any local properties and then against system properties;&quot;OVERRIDE&quot; indicates placeholders should be resolved first against system properties and then against any local properties;</code></pre><p><strong>机翻：</strong></p><p>控制如何根据系统属性解析占位符。从Spring 3.1开始</p><p>属性值默认为“ENVIRONMENT”，表示占位符的解析</p><p>对系统属性的处理是通过PropertySourcesPlaceholderConfigurer及其</p><p>委托给当前Spring环境对象。</p><p>为了获得最大的向后兼容性，此属性在向前执行时保留</p><p>3.1上下文模式的版本，以及除默认“环境”之外的任何值</p><p>会导致注册一个传统的PropertyPlaceholderConfigurer而不是</p><p>新PropertySourcesPlaceholderConfigurer变体。在本例中，是Spring环境</p><p>在解析占位符时，不会询问它的属性源。用户</p><p>建议考虑不赞成使用此属性，并利用</p><p>环境和属性源机制。有关示例，请参见ConfigurableEnvironment javadoc。</p><p>“ENVIRONMENT”：表示占位符应该针对当前环境和任何本地属性进行解析;</p><p>“NEVER”：表示占位符只针对本地属性解析，而不针对系统属性解析;</p><p>“回退”：表示占位符应该针对任何本地属性进行解析，然后针对系统属性进行解析;</p><p>“OVERRIDE”：表示占位符应该首先针对系统属性进行解析，然后针对任何本地属性进行解析;</p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 发现解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring &amp; Mybatis 整合</title>
      <link href="posts/e147a258/"/>
      <url>posts/e147a258/</url>
      
        <content type="html"><![CDATA[<p><strong>目录结构：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20200305145807737.png" alt="image-20200305145807737"></p><p><strong>所需要得Jar包：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13-beta-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectjweaver--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1、编写实体类、接口、映射文件、db-properties、mybatis-config-xml、spring-dao-xml"><a href="#1、编写实体类、接口、映射文件、db-properties、mybatis-config-xml、spring-dao-xml" class="headerlink" title="1、编写实体类、接口、映射文件、db.properties、mybatis-config.xml、spring-dao.xml"></a>1、编写实体类、接口、映射文件、db.properties、mybatis-config.xml、spring-dao.xml</h2><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>dao层接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xu.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper映射文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xu.mapper.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>db.properties:</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><hr><p><strong>mybatis-config.xml:</strong></p><p>虽然可以全部在spring配置，还是把别名和注册Mapper放到这里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--每一个xxxMapper.xml都要在这里注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xu/mapper/UsersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-dao.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载db.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;usermapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、编写实现类-UserMapperImpl-，并注册到Spring"><a href="#2、编写实现类-UserMapperImpl-，并注册到Spring" class="headerlink" title="2、编写实现类(UserMapperImpl)，并注册到Spring"></a>2、编写实现类(UserMapperImpl)，并注册到Spring</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xu.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UsersMapper.class).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xu.mapper.UsersMapper;</span><br><span class="line"><span class="keyword">import</span> com.xu.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-dao.xml&quot;</span>);</span><br><span class="line">        UsersMapper usermapper = context.getBean(<span class="string">&quot;usermapper&quot;</span>, UsersMapper.class);</span><br><span class="line">        <span class="keyword">for</span> (Users users : usermapper.select()) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20200305155840001.png" alt="image-20200305155840001"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 整合 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将Hexo博客迁移到新设备</title>
      <link href="posts/767a5efb/"/>
      <url>posts/767a5efb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>由于重装了系统，博客环境也要跟着迁移。看了网上了一系列的教程，说要把必要的上传到GitHub的新分支上保存。感觉非常麻烦，思考下之后就用自己的方法了，结果没问题。说实话有点懵逼，太简单了。不知道是因为是大佬git玩得溜还是存在什么问题我不知道！至少我现在用着挺好的。</p></blockquote><h1 id="相关步骤"><a href="#相关步骤" class="headerlink" title="相关步骤"></a>相关步骤</h1><blockquote><p>1、将博客文件夹整体发送到新的设备</p><p>2、安装Node.js、Git环境，配置好npm的源</p><p>3、将Git工具连接到GitHub，具体可以在Hexo分类，Hexo+GitHubPages搭建博客那篇有说；</p><p>4、下载和安装Hexo (在博客目录下使用)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><p>5、像之前一样清理、生成、启动，就可以在本地预览了！</p></blockquote><p><strong>至此，博客迁移完成。请愉快的写作吧！</strong></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博迁移客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK环境变量配置</title>
      <link href="posts/3f60947a/"/>
      <url>posts/3f60947a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>由于系统重装了，一切都要开头再来！虽然繁琐，但那种清理干净的感觉真的很舒服。到装JDK的时候，忘记环境变量怎么配了(🤣🤣🤣)。闲着也是没事记录一下吧，说不定以后有机会用到呢，也可以帮助到需要的人</p></blockquote><h1 id="下载安装JDK"><a href="#下载安装JDK" class="headerlink" title="下载安装JDK"></a>下载安装JDK</h1><blockquote><p>关于Oracle账号</p><p>网上有许多热心网友分享的Oracle账号，我们拿来用就可以了。千万不要搞破坏！！！</p></blockquote><p><strong>JDK的地址：</strong><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><h2 id="打开配置窗口"><a href="#打开配置窗口" class="headerlink" title="打开配置窗口"></a>打开配置窗口</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201216081849344.png" alt="image-20201216081849344"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201216082106293.png" alt="image-20201216082106293"></p><h2 id="添加JAVA-HOME环境变量"><a href="#添加JAVA-HOME环境变量" class="headerlink" title="添加JAVA_HOME环境变量"></a>添加JAVA_HOME环境变量</h2><blockquote><p><strong>在系统变量中新建一个 <code>JAVA_HOME</code>的变量名，变量值为 <font color=red>你的JDK的安装目录</font>。如：E:\Java\jdk1.8.0_271</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201216082349114.png" alt="image-20201216082349114"></p><h2 id="添加CLASSPATH-环境变量"><a href="#添加CLASSPATH-环境变量" class="headerlink" title="添加CLASSPATH 环境变量"></a>添加CLASSPATH 环境变量</h2><blockquote><p><strong>在系统变量中新建一个 <code>CLASSPATH</code>的变量名,变量值为</strong><code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201216083240169.png" alt="image-20201216083240169"></p><h2 id="添加到Path环境变量"><a href="#添加到Path环境变量" class="headerlink" title="添加到Path环境变量"></a>添加到Path环境变量</h2><blockquote><p><strong>在系统变量中找到一个 <code>path</code>的变量名,选择后点击编辑，追加下面两条</strong></p><p><code>%JAVA_HOME%\bin</code></p><p><code>%CLASSPATH%</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201216084614306.png" alt="image-20201216084614306"></p><h2 id="检查环境变量是否配置成功"><a href="#检查环境变量是否配置成功" class="headerlink" title="检查环境变量是否配置成功"></a>检查环境变量是否配置成功</h2><blockquote><p><strong>在任意地方打开CMD窗口，输入以下命令，信息是否正确输出</strong></p><p><code>java</code></p><p><code>java -version</code></p><p><code>javac -version</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20201216085113922.png" alt="image-20201216085113922"></p><p><strong>配置完成，谢谢观看！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_Transactional</title>
      <link href="posts/4f78041f/"/>
      <url>posts/4f78041f/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Transactional"><a href="#Spring-Transactional" class="headerlink" title="Spring-Transactional"></a>Spring-Transactional</h1><p><strong>事务管理是应用系统开发中必不可少的一部分。Spring 为事务管理提供了丰富的功能支持。</strong></p><p><strong>声明式事务有两种方式，一种是在配置文件（xml）中做相关的事务规则声明，另一种是基于 <code>@Transactional</code></strong> <strong>注解的方式。注释配置是目前流行的使用方式。</strong></p><h2 id="注解管理事务的实现步骤"><a href="#注解管理事务的实现步骤" class="headerlink" title="注解管理事务的实现步骤"></a>注解管理事务的实现步骤</h2><p><strong>使用 @Transactional 注解管理事务的实现步骤分为两步。</strong></p><p><strong><font color=blue>第一步</font>，在 xml 配置文件中添加事务配置信息。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><font color=blue>第二步</font>，将 @Transactional 注解添加到合适的方法上，并设置合适的属性信息。</strong></p><p><strong><font color=red>@Transactional 注解的属性信息</font></strong></p><table><thead><tr><th align="left">属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</td></tr><tr><td align="left">propagation</td><td align="left">事务的传播行为，默认值为 <code>REQUIRED</code> 。</td></tr><tr><td align="left">isolation</td><td align="left">事务的隔离度，默认值采用 <code>DEFAULT</code> 。</td></tr><tr><td align="left">timeout</td><td align="left">事务的超时时间，默认值为 <code>-1</code> 。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td></tr><tr><td align="left">read-only</td><td align="left">指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td></tr><tr><td align="left">rollback-for</td><td align="left">用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td></tr><tr><td align="left">no-rollback-for</td><td align="left">抛出 no-rollback-for 指定的异常类型，不回滚事务。</td></tr></tbody></table><p><strong>除此以外，<code>@Transactional</code> 注解也可以添加到类级别上。当把 <code>@Transactional</code> 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。</strong></p><p><strong>方法级别的事务属性信息会覆盖类级别的相关配置信息。</strong></p><p><code>**@Transactional</code> 注解的标注于类上：**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.SUPPORTS, readOnly=true)</span></span><br><span class="line"><span class="meta">@Service(value =&quot;employeeService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span></span></span><br></pre></td></tr></table></figure><h3 id="注解方式的事务使用注意事项"><a href="#注解方式的事务使用注意事项" class="headerlink" title="注解方式的事务使用注意事项"></a>注解方式的事务使用注意事项</h3><p>当您对 Spring 的基于注解方式的实现步骤和事务内在实现机制有较好的理解之后，就会更好的使用注解方式的事务管理，避免当系统抛出异常，数据不能回滚的问题。</p><h4 id="正确的设置-Transactional-的-propagation-属性"><a href="#正确的设置-Transactional-的-propagation-属性" class="headerlink" title="正确的设置 @Transactional 的 propagation 属性"></a>正确的设置 @Transactional 的 propagation 属性</h4><p>本来期望目标方法进行事务管理，但若是错误的配置这三种 propagation，事务将不会发生回滚。</p><ol><li><p><code>TransactionDefinition.PROPAGATION_SUPPORTS</code>：</p><p>如果当前存在事务，则加入该事务；</p><p>如果当前没有事务，则以非事务的方式继续运行。</p></li><li><p><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code>：</p><p>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p></li><li><p><code>TransactionDefinition.PROPAGATION_NEVER</code>：</p><p>以非事务方式运行，如果当前存在事务，则抛出异常。</p></li></ol><h4 id="正确的设置-Transactional-的-rollbackFor-属性"><a href="#正确的设置-Transactional-的-rollbackFor-属性" class="headerlink" title="正确的设置 @Transactional 的 rollbackFor 属性"></a>正确的设置 @Transactional 的 rollbackFor 属性</h4><p>默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外的异常，Spring 都不会回滚事务！</p><p>如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor。例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED, rollbackFor= MyException.class)</span></span><br></pre></td></tr></table></figure><p>若在目标方法中抛出的异常是 rollbackFor 指定的异常的子类，事务同样会回滚。</p><h4 id="Transactional-只能应用到-public-方法才有效"><a href="#Transactional-只能应用到-public-方法才有效" class="headerlink" title="@Transactional 只能应用到 public 方法才有效"></a>@Transactional 只能应用到 public 方法才有效</h4><p>只有 @Transactional 注解应用到 public 方法，才能进行事务管理。</p><p>Spring AOP 会检查目标方法的修饰符是不是 public，若不是 public，就不会获取 @Transactional 的属性配置信息，最终会造成不会用 TransactionInterceptor 来拦截该目标方法进行事务管理。</p><h4 id="避免-Spring-的-AOP-的自调用问题"><a href="#避免-Spring-的-AOP-的自调用问题" class="headerlink" title="避免 Spring 的 AOP 的自调用问题"></a>避免 Spring 的 AOP 的自调用问题</h4><p>在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。</p><p>若同一类中的其他没有 @Transactional 注解的方法内部调用有 @Transactional 注解的方法，有 @Transactional 注解的方法的事务被忽略，不会发生回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        insertOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//insert log info</span></span><br><span class="line">        <span class="comment">//insertOrder</span></span><br><span class="line">        <span class="comment">//updateAccount</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>insertOrder()</code> 方法尽管有 <code>@Transactional</code> 注解，但它被内部方法 <code>insert()</code> 调用，因此 <code>insertOrder()</code> 的事务被忽略，出现异常事务不会发生回滚。</p><h2 id="XML配置实现管理事务"><a href="#XML配置实现管理事务" class="headerlink" title="XML配置实现管理事务"></a>XML配置实现管理事务</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步：配置声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二步：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结合AOP、实现事务的织入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给哪些方法配置事务--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务的传播特性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:metmod</span> <span class="attr">name</span>=<span class="string">&quot;方法名1&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:metmod</span> <span class="attr">name</span>=<span class="string">&quot;方法名2&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:metmod</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><span class="comment">&lt;!-- * :代表全部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第三步：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务的切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xxx.xxx.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_AOP笔记</title>
      <link href="posts/b3a30946/"/>
      <url>posts/b3a30946/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring-AOP"></a>Spring-AOP</h1><h1 id="AOP-基本概念"><a href="#AOP-基本概念" class="headerlink" title="AOP 基本概念"></a>AOP 基本概念</h1><p>显示中有一些内容并不是面向对象技术（OOP）可以解决的，比如事务处理。在 JDBC 代码中，最繁琐的问题就是无穷无尽的 try … catch … finally … 语句 和 数据库资源关闭 的问题，而且代码会存在大量的重复，而你又不能不写。</p><p>一个正常执行的 SQL 的逻辑步骤如下：</p><ol><li>打开通过数据库连接池获得数据库链接资源，并做一定的设置工作。</li><li>执行对应的 SQL 语句（通常是增删改），对数据进行操作。</li><li>如果 SQL 执行过程中发生异常，回滚事务。</li><li>如果 SQL 执行过程中没有发生异常，最后提交事物。</li><li>到最后的阶段，需要关闭一些连接资源。</li></ol><p>参看上述流程，你会发现无论是执行什么具体的 SQL，流程都是一样的！即，到了特定时刻一定会执行某个特定操作，并不因 SQL 的不同而不同 !</p><p>在 OOP 中，模块化单元是『类』（Class），而在 AOP 中，模块化的单元是『 切面』（Aspect）。</p><p>AOP 最早由 AOP 联盟的组织提出的，并制定了一套规范。Spring AOP 遵守 AOP 联盟的规范。</p><p>Spring 的 AOP 的底层用到两种代理机制：</p><ol><li><p>JDK 动态代理</p><p>如果目标类遵循某个接口，Spring AOP 底层采用 JDK 方案生成代理对象</p></li><li><p>Cglib 动态代理</p><p>如果目标类不遵循任何接口，Spring AOP 底层采用 cglib 方案生成代理对象。</p></li></ol><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>AOP 涉及到如下问题：在 <strong>什么类</strong> 的 <strong>什么方法</strong> 的 <strong>什么地方</strong>，做出 <strong>什么样</strong> 的增强。AOP 的功能简而言之就是：<em>在不修改方法源文件的情况下，为源文件的特定部位增加新的代码</em> 。</p><h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><p>切入点表达式决定了哪些类的哪些方法会被『插入』新代码。它『回答』了对 <strong>什么类</strong> 的 <strong>什么方法</strong> 做出增强。</p><p>最常用的切入点表达式是 <strong><code>execution</code></strong> 表达式，其语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[方法访问修饰符] 方法返回值 包名.类名.方法名(方法的参数)</span><br></pre></td></tr></table></figure><p>『方法访问修饰符』部分是<strong>可选</strong>部分；『其它』部分是<strong>必要</strong>部分。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">execution( * com.demo.dao.EmployeeDao.*(..) )</span><br><span class="line"></span><br><span class="line">execution( <span class="keyword">public</span> * demo.dao.EmployeeDao.*(..) )</span><br><span class="line"></span><br><span class="line">execution( <span class="keyword">public</span> String demo.dao.EmployeeDao.*(..) )</span><br><span class="line"></span><br><span class="line">execution( <span class="keyword">public</span> String demo.dao.EmployeeDao.*(String, ..) )</span><br><span class="line"></span><br><span class="line">execution( * demo.dao.*.*(..) )</span><br></pre></td></tr></table></figure><ul><li><p><strong>返回值匹配</strong>:</p><p>可以为 <code>*</code>，表示任何返回值，全路径的类名等。</p></li><li><p><strong>方法名匹配</strong>:</p><p>指定方法名。</p><p>例如：<code>*</code> 代表所有方法； <code>set*</code>，代表以 <code>set</code> 开头的所有方法.</p></li><li><p><strong>参数匹配</strong>:</p><p>指定方法参数(数量、类型及顺序)。</p><p>例如：<code>(..)</code> 代表所有参数；<code>(*)</code> 代表一个参数； <code>(*, String)</code> 代表第一个参数为任何值，第二个为 String 类型。</p></li></ul><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><p>通知类型回答了 <strong>什么位置</strong> 增强 <strong>什么样</strong> 的代码。</p><table><thead><tr><th align="left">注解</th><th align="left">通知</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Before</td><td align="left">在被代理对象的方法前调用</td><td align="left"></td></tr><tr><td align="left">@Around</td><td align="left">将被代理方法封装起来</td><td align="left">环绕通知，它将覆盖原有方法，但是允许通过反射调用原有方法</td></tr><tr><td align="left">@After</td><td align="left">在被代理对象方法后调用</td><td align="left"></td></tr><tr><td align="left">@AfterReturning</td><td align="left">在被代理对象正常返回后调用</td><td align="left">要求被代理对象的方法执行过程中没有发生异常</td></tr><tr><td align="left">@AfterThrowing</td><td align="left">在被代理对象的方法抛出异常后调用</td><td align="left">要求被代理对象的方法执行过程中发生异常</td></tr></tbody></table><p>Spring 只支持方法拦截 。</p><h1 id="使用-AspectJ-注解配置-Spring-AOP"><a href="#使用-AspectJ-注解配置-Spring-AOP" class="headerlink" title="使用 @AspectJ 注解配置 Spring AOP"></a>使用 @AspectJ 注解配置 Spring AOP</h1><p>Spring 实现 AOP 功能的方式有两种：**<code>@AspectJ 注解</code>** 方式；**<code>XML 配置</code>** 方式。</p><p><code>补充</code>，AOP 概念并非 Spring 所特有，Spring 也并非支持 AOP 编程的唯一框架。在 Spring 之前提供 AOP 功能的，具有里程碑式的框架叫 <strong>AspectJ 框架</strong>。AspectJ 框架的使用方式比较独特（不简便），在 Spring AOP 出现后就慢慢被 Spring AOP 所取代。但是，AspectJ 框架设计了一套注解，非常简便和合理，并且被广大 AspectJ 的使用者所熟知，所以 Spring AOP 直接借用这套注解，也就是我们这里所说的 @AspectJ 注解。</p><p>由于 @AspectJ 注解是 Spring『借用』的别人的注解，所以使用时需要引入它。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aspectj.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aspectj.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Spring 的配置文件中，也需要引入/声明 AOP 的 namspace :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans</span><br><span class="line">    ...</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        ...</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><p>并且，由于 <code>@AspectJ</code> 注解并非 Spring 框架的一部分，所以需要在配置文件中声明 『启用 @AspectJ 注解』 功能，否则，Spring 并『不认识』 <code>@AspectJ</code> 的一系列注解。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者使用 @Component 注解 + 包扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bean.Dept&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aspect1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bean.DeptAspect1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>再重复一遍，使用 Spring AOP 的核心问题：在 <strong>什么类</strong> 的 <strong>什么方法</strong> 的 <strong>什么地方</strong>，做出 <strong>什么样</strong> 的增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 注意，不要忘记在切面类的头上加 @Aspect 注解。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptAspect1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturuing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，上述代码中 <code>execution(...)</code> 部分有大量重复现象。为此，可以提供一个 <code>@Pointcut</code> 来进行“缩写”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptAspect1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">()</span> </span>&#123;  <span class="comment">// 这个方法是空的。需要的不是它的内容，需要的是它的名字。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;xxx()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;xxx()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;xxx()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;xxx())</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public void afterReturning() &#123; ... &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @AfterThrowing(&quot;</span>xxx())<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public void afterThrowing() &#123; ... &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>另外，有时你要拦截/增强的方法是有参数的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>为此，你也可以在增强方法中获得这些参数，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* bean.Dept.sayHi(..))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;execution(* bean.Dept.sayHi(..)) &amp;&amp; args(name, age)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;xxx() &amp;&amp; args(name, age)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-XML-配置-Spring-AOP"><a href="#使用-XML-配置-Spring-AOP" class="headerlink" title="使用 XML 配置 Spring AOP"></a>使用 XML 配置 Spring AOP</h1><p>通过 XML 配置 Spring AOP 功能，在 XML 文件中出现的各种『要素』本质上和 @AspectJ 注解中出现过的内容本质上并没有两样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptAspect2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturuing</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bean.Dept&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aspect2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bean.DeptAspect2&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;aspect2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* bean.Dept.sayHi(..)) and args(name, int)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* bean.Dept.sayHi(..)) and args(name, int)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_IOC笔记</title>
      <link href="posts/5e4d2d0d/"/>
      <url>posts/5e4d2d0d/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring-IOC"></a>Spring-IOC</h1><h2 id="什么是IOC？"><a href="#什么是IOC？" class="headerlink" title="什么是IOC？"></a>什么是IOC？</h2><ul><li><strong>Ioc即Inverse of Control，中文为控制反转。</strong></li><li><strong>在Spring中，创建对象的工作不再由应用程序(<font color=blue>程序员主动的使用new关键字</font>)主动完成，而是由Spring容器负责创建，然后注入给应用程序，由Spring来管理应用程序中的所有对象及其依赖关系。</strong></li><li><strong>通俗说就是程序员在代码中无需使用new关键字来创建对象，创建对象的任务交给了Spring。然后Spring根据xml中配置的属性，将其注入到对象中。（<font color=blue>创建对象并赋值</font>）</strong></li></ul><h2 id="实例化-Spring-IoC-容器"><a href="#实例化-Spring-IoC-容器" class="headerlink" title="实例化 Spring IoC 容器"></a>实例化 Spring IoC 容器</h2><p>Spring 核心容器的理论很简单：<strong>Spring 核心容器就是一个超级大工厂，所有的对象都会被当成 Spring 核心容器管理的对象</strong>。</p><p>你必须实例化 Spring IoC 容器，读取其配置文件来创建 Bean 实例。然后你可以从 Spring IoC 容器中得到可用的 Bean 实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory</span><br><span class="line">└── ApplicationContext</span><br><span class="line">    └── ClassPathXmlApplicationContext</span><br></pre></td></tr></table></figure><p>Spring IoC 容器主要是基于 <strong>BeanFactory</strong> 和 <strong>ApplicationContext</strong> 两个接口：</p><ul><li><strong><code>BeanFactory</code></strong> 是 Spring IoC 容器的顶层接口</li><li><strong><code>ApplicationContext</code></strong> 是最常用接口</li><li><strong><code>ClassPathXmlApplicationContext</code></strong> 是 ApplicationContext 的实现类。顾名思义，它从 classpath 中加载一个 XML 配置文件，构建一个应用程序上下文。你也可以指定多个配置文件。</li></ul><p><strong>BeanFactory</strong> 接口定义了 Spring IoC 整个体系中中最重要的方法（簇）：<strong>getBean()</strong> 方法。这个方法用于从 Spring IoC 容器中获得 Bean 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;service.xml&quot;</span>, <span class="string">&quot;dao.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>在获得应用程序上下文（也就是IoC容器）后，你只需要调用 <strong>getBean()</strong> 方法并传入唯一的 Bean ID/名称和 Bean 的 Class 对象，就可以获得容器中的 Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Human tom = context.getBean(<span class="string">&quot;tom&quot;</span>, Human.class);</span><br></pre></td></tr></table></figure><h2 id="Spring创建Bean-Spring创建对象"><a href="#Spring创建Bean-Spring创建对象" class="headerlink" title="Spring创建Bean(Spring创建对象)"></a>Spring创建Bean(Spring创建对象)</h2><p>Spring可以帮你创建、管理Bean对象，但你需要“告诉”它要创建、管理哪些对象。</p><p>Spring允许你在一个（或者多个）xml配置文件中配置Bean，对于Spring容器，这些个配置文件就是它创建Bean对象的依据。</p><p>一个Spring xml的基本配置样式是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个Spring xml文件我们可以通过<code>import</code>标签进行导入，和多为一：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>创建 Bean(对象) 的方式常见三种：</p><blockquote><ul><li><p>类自身的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"><span class="comment">// 实体类(Student)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建对象的几种方式:</span></span><br><span class="line"><span class="comment">// 1 、 通过对象的构造方法</span></span><br><span class="line">Student1 student = <span class="keyword">new</span> Student1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>工厂类提供的工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"><span class="comment">// 实体类(Student)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"><span class="comment">// Student类的工厂类1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentFactory1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Student1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2 、通过工厂类的工厂方法</span></span><br><span class="line">Student1 student1 = StudentFactory1.getInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>工厂对象提供的工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"><span class="comment">// 实体类(Student)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"><span class="comment">// Student类的工厂类2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentFactory2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  Student <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Student1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.microboom.xu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 3 、通过工厂对象的工厂方法</span></span><br><span class="line">StudentFactory2 student1factory = <span class="keyword">new</span> Student1Factory2();</span><br><span class="line">Student student2 = studentfactory.getInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：第2、3中方法其实差不多，结合实际情况使用</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Spring使用类自身的构造方法"><a href="#Spring使用类自身的构造方法" class="headerlink" title="Spring使用类自身的构造方法"></a>Spring使用类自身的构造方法</h3><p>每个 bean 都必须提供一个唯一的名称或id，以及一个完全限定的类名，用来让 Spring IoC 容器对其进行创建。Spring 通过类的构造方法来创建 Bean 对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.Xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring使用工厂类提供的工厂方法"><a href="#Spring使用工厂类提供的工厂方法" class="headerlink" title="Spring使用工厂类提供的工厂方法"></a>Spring使用工厂类提供的工厂方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;工厂类&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;工厂方法&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring使用工厂对象提供的工厂方法"><a href="#Spring使用工厂对象提供的工厂方法" class="headerlink" title="Spring使用工厂对象提供的工厂方法"></a>Spring使用工厂对象提供的工厂方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明创建工厂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;工厂类&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;工厂对象id&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;工厂方法&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring装配简单属性"><a href="#Spring装配简单属性" class="headerlink" title="Spring装配简单属性"></a>Spring装配简单属性</h2><p>装配，即为 Bean 的属性进行 初始化 / 赋值。</p><p><strong>简单类型</strong> 是指： 基本数据类型、基本数据类型包装类 和 字符串 。</p><p>装配方式有两种：</p><blockquote><ul><li>通过 构造方法 装配</li><li>通过 setter 装配</li></ul></blockquote><h3 id="构造方法装配"><a href="#构造方法装配" class="headerlink" title="构造方法装配"></a>构造方法装配</h3><p>通过构造方法装配，即设置 Spring 通过调用有参构造方法（默认是调用无参构造方法）来创建对象。在 bean 元素内使用 <strong>constructor-arg</strong> 子元素，即可触发构造方法装配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>index</strong> 属性表示构造函数形参 <strong>索引</strong>（从0开始）。如果参数的类型具有唯一性，那么可以使用 <strong>type</strong> 属性，通过 <strong>参数类型</strong> 来指定构造方法和参数值。</p><p>为了简化配置，Spring 提供了一个名为 <strong>c</strong> 的 schema，来简化配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;...&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;...&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">c:_0</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">c:_1</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种简写方式，完全不用出现 <strong>costructor-arg</strong> 子元素，只需在 <strong>bean</strong> 元素中多增加几个 <strong>c:_索引=”参数值”</strong> 这样的属性。</p><h3 id="setter-装配"><a href="#setter-装配" class="headerlink" title="setter 装配"></a>setter 装配</h3><p>通过 setter 装配，即设置 Spring 在（通过无参构造方法）创建对象后，通过调用对象的属性的 setter 方法来为对象的属性赋值。在 bean 元素内使用 <strong>property</strong> 子元素，即可触发 setter 装配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>property</strong> 元素的 <strong>name</strong> 属性用于指定对象的属性名，<strong>value</strong> 属性用于指定要设置值。</p><p>为了简化配置，Spring 提供了一个名为 <strong>p</strong> 的 schema，来简化配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;...&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;...&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hemiao.bean.Human&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种简写方式，完全不用出现 <strong>property</strong> 子元素，只需在 <strong>bean</strong> 元素中多增加几个 <strong>p:属性名=”属性值”</strong> 这样的属性。</p><h2 id="Spring装配复杂属性"><a href="#Spring装配复杂属性" class="headerlink" title="Spring装配复杂属性"></a>Spring装配复杂属性</h2><p>更复杂的属性类型是集合类型（数组、List、Set、Map）属性。</p><p>Bean 的属性可能远不止基本类型这么简单，还有可能是基本类型的集合（List、Set 和 Map）。这种情况下，属性的赋值不再是 <code>property-value</code> 这种结构，而是 <code>property-list-value</code> 三层结构。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;数组属性名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;List属性名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Set属性名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Map属性名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span>/&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果集合是引用类型的集合，那么使用的子元素就从 <strong>value</strong> 改为 <strong>ref</strong>。map 使用的是 <strong>key-ref</strong> 和 <strong>value-ref</strong> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myDataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myDataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">&quot;a ref&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用的集合还有一种简写形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">class</span>=<span class="string">&quot;类的完全限定名&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">class</span>=<span class="string">&quot;类的完全限定名&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">&quot;a ref&quot;</span> <span class="attr">class</span>=<span class="string">&quot;类的完全限定名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>当一个 Bean 需要访问另一个 Bean 时，你可以显示指定引用装配它。不过，Spring IoC 容器提供自动装配功能，只需要在 <strong>bean</strong> 的 <strong>autowire</strong> 属性中指定自动装配模式就可以了。</p><table><thead><tr><th align="left">装配模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">no</td><td align="left">默认值。不执行自动装配。你必须显示地装配所依赖对象</td></tr><tr><td align="left">byName</td><td align="left">以 Bean 的属性名为依据，装配一个与属性名同名的 Bean</td></tr><tr><td align="left">byType</td><td align="left">以 Bean 的属性类型为依据，装配一个与之同类型的 Bean</td></tr><tr><td align="left">constructor</td><td align="left">通过构造方法初始化 Bean 的属性，并依据参数的类型，装配一个与参数同类型的 Bean</td></tr></tbody></table><p><font color=blue>尽管自动装配很强大，但是代价是降低了 Bean 配置的可读性。在实践中，建议仅在依赖关系不复杂的应用中使用。</font></p><h2 id="注解代替XML配置"><a href="#注解代替XML配置" class="headerlink" title="注解代替XML配置"></a>注解代替XML配置</h2><p><strong><font color=red>component-scan标签默认情况下自动扫描指定路径下的包（含所有子包），将带有@Component、@Repository、@Service、@Controller</font>标签的类自动注册到spring容器。对标记了 Spring’s @Required、@Autowired、JSR250’s @PostConstruct、@PreDestroy、@Resource、JAX-WS’s @WebServiceRef、EJB3’s @EJB、JPA’s @PersistenceContext、@PersistenceUnit等注解的类进行对应的操作使注解生效（包含了annotation-config标签的作用）。</strong></p><p><strong>关键是怎么获得通过扫描方式被spring容器管理的bean</strong></p><p><strong><font color=blue>getBean的默认名称是类名（头字母小写）</font>，如果想自定义，可以@Service(“aaaaa”)这样来指定。<br>这种bean默认是“singleton”的，如果想改变，可以使用@Scope(“prototype”)来改变。</strong></p><p><strong>在 XML 配置文件中加上 <code>&lt;context:component-scan base-package=&quot;Bean所在的包路径&quot;/&gt;</code> 即可开启 Spring 的自动扫描功能，这是使用注解替代XML配置的前提。</strong></p><h3 id="Component-注解"><a href="#Component-注解" class="headerlink" title="@Component 注解"></a>@Component 注解</h3><p><strong>@Component</strong> 注解用于标注于 Bean 的类上。凡是被标注了该注解的类（只要在扫描路径下）都会被 Spring 创建。</p><p><font color=blue>@Component 注解有唯一的属性 <strong>value</strong> 属性。它用来为 Bean 命名。同理它的语义化子注解也有</font></p><p>@Component 注解有三个语义化的子注解：</p><blockquote><ul><li><strong>@Repository</strong>（用于持久层）</li><li><strong>@Service</strong> （用于业务层）</li><li><strong>@Controller</strong>（用于 Web 层）</li></ul></blockquote><h3 id="Value-注解"><a href="#Value-注解" class="headerlink" title="@Value 注解"></a>@Value 注解</h3><p><strong>@Value</strong> 注解用于标注于<strong>简单类型</strong>属性上。凡是被标注了该注解的属性都会被 Spring 注入值（赋值）。</p><p>@Value 注解有唯一的属性 <strong>value</strong> 属性。它用来为简单属性指定值。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201214001249.png"></p><h3 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired 注解"></a>@Autowired 注解</h3><p><strong>@Autowired</strong> 注解用于标注于<strong>引用类型</strong>属性上。凡是被标注了该注解的属性都会被 Spring 以 <strong>类型</strong> 为依据注入另一个 Bean 的引用。</p><p>@Autowired 注解有唯一的属性 <strong>required</strong> 属性（默认值为 <code>true</code>）。它用来指示该对该属性的注入是否为必须（默认<em>必须</em>），即，在 Spring IoC 容器中没有发现符合类型的其他Bean时，会抛出异常。</p><h3 id="Qualifier-注解-配合-Autowired注解使用"><a href="#Qualifier-注解-配合-Autowired注解使用" class="headerlink" title="@Qualifier 注解(配合@Autowired注解使用)"></a>@Qualifier 注解(配合@Autowired注解使用)</h3><p><strong>@Qualifier</strong> 注解需要结合 <strong>@Autowired</strong> 注解使用。它用于标注于引用类型属性上。凡是被标注了该注解的属性都会被 Spring 以 <strong>bean的id</strong> 为依据注入（就是我们可以通过bean的id为依据，注入这个指定的bean）。</p><p>@Qualifier 注解有唯一的属性 <strong>value</strong> 属性。它用于指示需要注入的另一个 Bean 的Id。</p><h3 id="Resource-注解"><a href="#Resource-注解" class="headerlink" title="@Resource 注解"></a>@Resource 注解</h3><p><font color=blue>它是JDK自带的注解，它是@Autowired &amp;&amp; @Qualifier两种注解的结合体</font></p><p>它<font color=blue>默认</font>先通过Bean的Id、名来寻找并注入，如果找不到就通过类型来注入</p><h2 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h2><p>默认情况下，Spring IoC 容器只会对一个 Bean 创建一个实例。即单例。Spring IoC 提供了 4 种 <strong>作用域</strong>，它决定了 Spring IoC 是否/何时 生成一个新的对象。常见有：</p><ul><li><font color=red>singleton（单例）</font>：默认值。在整个应用中，Spring 只为其生成一个 Bean 的实例。</li><li><font color=red>prototype（原型）</font>：Spring 每次都会生成一个 Bean 的实例。</li></ul><p>在 XML 配置文件中， 通过 bean 元素的 <strong>scope</strong> 属性进行设置。该属性取值：<code>singleton</code> | <code>prototype</code> | 其他 。</p><p>在 注解 配置中，使用 <strong>@Scope</strong> 注解，该注解标注于 Bean 的类上（常见于 @Component 之下）。该注解有唯一属性 <strong>value</strong> 属性，其取值有： <code>singleton</code> | <code>prototype</code> | 其他。  </p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel加速GitPages访问速度</title>
      <link href="posts/fe8751f5/"/>
      <url>posts/fe8751f5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>由于GitHub访问速度感人，相比之下Vercel速度则会快上不少。当然也有很多方法还降低这种情况，比如部署到国内的Gitee上，Gitee需要手动更新。像我这样的懒癌患者就果断放弃了，也可以使用CDN来降低延迟，不过相比之下Vercel还是挺简单的。鼠标点几下就可以完成！👏👏👏</p></blockquote><h1 id="注册Vercel"><a href="#注册Vercel" class="headerlink" title="注册Vercel"></a>注册Vercel</h1><p><strong>使用GitHub账号登录，GitHub的主邮箱建议为Gmail</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213150947.png"></p><h1 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213151541.png"></p><p><strong>填写仓库的地址：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213152042.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213151623.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213152224.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213152700.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213153013.png"></p><p><strong>点击Visit即可预览</strong></p><blockquote><p>至此，使用Vercel加速GitPages完成。在我们编辑完文章推送到GitHub后，Vercel会自动的仓库发生更新后。自动的重新部署博客。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+GitHub搭建博客</title>
      <link href="posts/90d1f040/"/>
      <url>posts/90d1f040/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引言</p><p>由于前阵子阿里云到期了没办法只能转战Hexo+GitHub的静态博客🤣。网上已经有很多相关的教程了，为什么我还要写呢？主要是想记录下属于我自己的足迹吧！最重要的是搭建自己的博客可以在庞大的互联网中有一个清净的地方，记录下自己的生活，总结学习的笔记，等等…….</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p> <strong>由于Hexo是基于Node.js的静态框架，我们需要安装Node.js。我们最后部署到Git平台需要Git工具</strong></p><p><strong>以下的安装我们默认下一步就可以</strong></p></blockquote><h2 id="安装Node-js（推荐LTS版本，下载慢的话可以使用淘宝镜像）"><a href="#安装Node-js（推荐LTS版本，下载慢的话可以使用淘宝镜像）" class="headerlink" title="安装Node.js（推荐LTS版本，下载慢的话可以使用淘宝镜像）"></a>安装Node.js（推荐LTS版本，下载慢的话可以使用淘宝镜像）</h2><p><strong>Node.js地址:</strong>     <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><strong>淘宝镜像地址:</strong>     <a href="https://npm.taobao.org/mirrors/node?spm=a2c6h.14029880.0.0.735975d7TbkG1v">https://npm.taobao.org/mirrors/node?spm=a2c6h.14029880.0.0.735975d7TbkG1v</a></p><p>不过豆瓣插件不支持V14版本的Node.js，需要的话可以使用V12版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213115746.png"></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><strong>Git地址:</strong>     <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213115822.png"></p><h2 id="检查是否成功安装"><a href="#检查是否成功安装" class="headerlink" title="检查是否成功安装"></a>检查是否成功安装</h2><blockquote><p><font color=red>分别</font>输入以下命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><blockquote><p>如果安装正确，显示如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213120316.png"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote><p>由于node.js的服务器在国外，速度可能会有点慢。我们可以设置npm的仓库为淘宝镜像</p></blockquote><h2 id="设置npm的仓库为淘宝镜像"><a href="#设置npm的仓库为淘宝镜像" class="headerlink" title="设置npm的仓库为淘宝镜像"></a>设置npm的仓库为淘宝镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry &quot; https:&#x2F;&#x2F;registry.npm.taobao.org &quot;</span><br></pre></td></tr></table></figure><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="初始化-Blog"><a href="#初始化-Blog" class="headerlink" title="初始化 Blog"></a>初始化 Blog</h2><blockquote><p>blog：指博客的目录；如果没有像(hexo init E:\Blog)这样具体的指定，且没有新建Blog文件夹。在命令运行后会自动在当前路径下新建Blog文件夹，我们以后关于博客的操作都将在这个文件夹，文件夹名字可以随意取.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>初始化后的文件夹如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213122259.png"></p><h2 id="切换到-Blog目录下"><a href="#切换到-Blog目录下" class="headerlink" title="切换到 Blog目录下"></a>切换到 Blog目录下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure><h2 id="安装-Blog"><a href="#安装-Blog" class="headerlink" title="安装 Blog"></a>安装 Blog</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="启动预览-Blog"><a href="#启动预览-Blog" class="headerlink" title="启动预览 Blog"></a>启动预览 Blog</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s    # 如果发现端口被占用，可以-p指定端口  hexo s -p 5000</span><br></pre></td></tr></table></figure><p>如果一切都没有问题，在浏览器的地址栏输入：<a href="http://localhost:4000/">http://localhost:4000</a> 即可预览博客</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213123218.png" style="zoom: 50%;" /><h2 id="Hexo-常用的命令"><a href="#Hexo-常用的命令" class="headerlink" title="Hexo 常用的命令"></a>Hexo 常用的命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo cl #清除生成的博客静态文件(hexo clean 的缩写)</span><br><span class="line">hexo g #生成博客静态文件(hexo generate 的缩写)</span><br><span class="line">hexo s #启动博客的本地预览(hexo server 的缩写)</span><br><span class="line">hexo d #推送博客到远程仓库(hexo deploy 的缩写)</span><br><span class="line">hexo new &quot;xxx&quot; #新建名为xxx的文章</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们可以将几个命令一起执行，使用 &amp; 隔开即可</span></span><br><span class="line">hexo cl &amp; hexo g &amp; hexo s  </span><br></pre></td></tr></table></figure><h1 id="部署到GitPages"><a href="#部署到GitPages" class="headerlink" title="部署到GitPages"></a>部署到GitPages</h1><h2 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h2><p>百度即可</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><blockquote><ul><li><p>Repository name : <code>usname.git.io</code>   username为你的用户名，必须这样写，不然可能会有些问题</p></li><li><p>Description: 仓库的描述</p></li><li><p>选择 <code>public</code></p></li><li><p>Initialize this repository with: 可以选择<code>Add a README file</code>,也可以不选</p></li><li><p>点击<code>Create Repository</code>,完成仓库的创建</p></li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213125618.png"></p><h2 id="Git工具链接到GitHub"><a href="#Git工具链接到GitHub" class="headerlink" title="Git工具链接到GitHub"></a>Git工具链接到GitHub</h2><ul><li>CMD命令行分别执行一下命令</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot; # username是你的Github用户名，注意大小写保持一致</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;your email address&quot; # your email address填写你Github注册用的邮箱</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;your email address&quot;  # 生成SSH公钥，your email address同上填</span><br></pre></td></tr></table></figure><ul><li>完成上述命令后会在<code>C:\Users\用户名\.ssh</code>目录下生成一个密钥</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213130255.png"></p><ul><li>用记事本打开<code>id_rsa.pub</code>文件，复制里面的全部内容</li><li>登录GitHub，点击头像，选择 <code>settings</code> 按钮，选择 <code>SSH and GPG keys</code> 项，点击 <code>New SSH Key</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213130936.png"></p><ul><li>填入刚在 <code>id_rsa.pub</code>文件内复制的内容<ul><li>Title: 添加你需要的描述信息(比如是用来做什么的)</li><li>Key：填入复制的内容</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213131511.png"></p><ul><li><p>查看是否连接成功，输入如下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213131920.png"></p><p>出现上图提示，则表示成功！</p></li></ul><ul><li><p>打开Blog目录下的<code>_config.yml</code>文件，找到deploy(该配置项在末尾)和url项进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>    <span class="comment"># 填git即可</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span> <span class="comment"># 仓库地址，username为GitHub的用户名</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 使用main分支，2020年10月1日master分支改为了main</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://xurongchang.github.io</span>  <span class="comment"># GitPages的url，该链接可以在仓库的setting中存在</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>    <span class="comment"># 根目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>GitPages的url，仓库的setting往下翻即可找到！</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201213135324.png"></p></li></ul></li></ul><h2 id="安装-Hexo-推送-Git-插件"><a href="#安装-Hexo-推送-Git-插件" class="headerlink" title="安装 Hexo 推送 Git 插件"></a>安装 Hexo 推送 Git 插件</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>由于之前的生成的文件会导致我能不能及时的看到效果，我们需要清除之前生成的静态文件并重新生成。</p><p>在推送之前我们先本地预览一下，是否出现错误，以免推送后不必要的麻烦。清理，生成，启动组合命令</p><p>如下：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp; hexo g &amp; hexo s</span><br><span class="line"></span><br><span class="line"># 确认无问题后，hexo d 命令推送到GitHub。GitHub会自动帮我们部署！</span><br><span class="line"></span><br><span class="line">hexo d # 推送到GitHub</span><br></pre></td></tr></table></figure><p><strong>我们可以使用填写的<code>url</code>来查看是否推送成功！</strong></p><h1 id="美化博客："><a href="#美化博客：" class="headerlink" title="美化博客："></a>美化博客：</h1><p><strong>我使用的 Jerry 大佬的Bufferfly主题，该主题的教程已经非常的详细的。如果觉得主题还可以，请访问下面的链接跟着配置即可！</strong></p><p><strong>Bufferfly主题教程地址：</strong>    <a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制笔记</title>
      <link href="posts/83a8cfac/"/>
      <url>posts/83a8cfac/</url>
      
        <content type="html"><![CDATA[<p><font color=blue>这篇笔记是根据秦疆老师的视频整理而成，记录一下</font></p><p><font color=blue>大佬的地址：<a href="https://space.bilibili.com/95256449">https://space.bilibili.com/95256449</a></font></p><h1 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射(Reflection)"></a>反射(Reflection)</h1><ul><li><strong>Reflection(反射) : 反射机制允许程序在执行期间借助ReflectionAPI取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</strong> </li><li><strong>类加载完后，堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为 ：反射。</strong></li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p><strong>对象照镜子后可以得到的信息 ：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构(class/innterface/enum/annotation/primitive type/void/[])的有关信息。</strong></p><ul><li><p><strong>Class本身也是一个类</strong></p></li><li><p><strong>Class对象只能由系统建立</strong></p></li><li><p><strong>一个加载的类在JVM中只会有一个Class实例</strong></p></li><li><p><strong>一个Class对象对应的是一个加载到JVM中的一个.class文件</strong></p></li><li><p><strong>每个类的实例都会记得自己是由哪个Class实例所生成</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212173524.png"></p><ul><li><strong>通过Class可以完整的得到一个类中所有被加载的结构</strong></li><li><strong>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</strong></li></ul><h2 id="Class类常用方法"><a href="#Class类常用方法" class="headerlink" title="Class类常用方法"></a>Class类常用方法</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212173933.png"></p><h2 id="获得Class类的几种方式"><a href="#获得Class类的几种方式" class="headerlink" title="获得Class类的几种方式"></a>获得Class类的几种方式</h2><p><strong>A 、若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person.class;</span><br></pre></td></tr></table></figure><p><strong>B 、已知某个类的实例，调用该实例的getClass()方法获取Class对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = person.getClass();</span><br></pre></td></tr></table></figure><p><strong>C、已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;demo.Stufent&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>D 、内置基本数据类型可以直接用类名.Type 获取Class对象。</strong></p><p><strong>E 、还可以利用ClassLoader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//获取Class对象的几种方式：</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、方式A：通过对象获得</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、方式B：通过Class.forname获得</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.xu.pojo.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、方式C:通过 .Class获得</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、方式D：内置的基本类型的包装类都有一个 Type 属性（只有内置的基本类型有）</span></span><br><span class="line">        Class t1 = Integer.TYPE;</span><br><span class="line">        System.out.println(t1.hashCode());</span><br><span class="line">        System.out.println(t1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哪些类型可以有Class对象？"><a href="#哪些类型可以有Class对象？" class="headerlink" title="哪些类型可以有Class对象？"></a>哪些类型可以有Class对象？</h2><ul><li><strong>class : 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类。</strong></li><li><strong>interfac : 接口</strong></li><li><strong>[] : 数组</strong></li><li><strong>enum : 枚举</strong></li><li><strong>annoatation : 注解@interface</strong></li><li><strong>primitive type : 基本数据类型</strong></li><li><strong>void</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Object.class; <span class="comment">// 类</span></span><br><span class="line">      Class c2 = Comparable.class; <span class="comment">// 接口</span></span><br><span class="line">      Class c3 = String[].class; <span class="comment">// 一位数组</span></span><br><span class="line">      Class c4 = <span class="keyword">int</span>[][].class; <span class="comment">// 二维数组</span></span><br><span class="line">      Class c5 = Override.class; <span class="comment">// 注解</span></span><br><span class="line">      Class c6 = ElementType.class; <span class="comment">// 枚举</span></span><br><span class="line">      Class c7 = Integer.class; <span class="comment">// 基本数据类型</span></span><br><span class="line">      Class c8 = <span class="keyword">void</span>.class; <span class="comment">// void</span></span><br><span class="line">      Class c9 = Class.class; <span class="comment">// Class</span></span><br></pre></td></tr></table></figure><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212174139.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212174229.png"></p><h2 id="类初始化"><a href="#类初始化" class="headerlink" title="类初始化"></a>类初始化</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180307.png"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180509.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180548.png"></p><h2 id="获取类运行时的结构"><a href="#获取类运行时的结构" class="headerlink" title="获取类运行时的结构"></a>获取类运行时的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.xu.pojo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、获取类的名字</span></span><br><span class="line">        String name = c1.getName();</span><br><span class="line">        String simpleName = c1.getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;类的名字：--》&quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;类简单的名字：--》&quot;</span>+simpleName);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------分割线--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 、获取类的公共属性</span></span><br><span class="line">        Field[] fields1 = c1.getFields();  <span class="comment">// 只能获取 public 修饰的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;返回类的公共属性：--》&quot;</span>+field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取类的所有属性</span></span><br><span class="line">        Field[] fields2 = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;返回类的所有属性：--》&quot;</span>+field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类指定的属性</span></span><br><span class="line">        Field field = c1.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回类指定的属性：--》&quot;</span>+field);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------分割线--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 、 获取类所有的公共方法</span></span><br><span class="line">        Method[] methods1 = c1.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;返回本类及其父类的public方法：--》&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取类的所有方法</span></span><br><span class="line">        Method[] methods2 = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;返回本类的所有方法：--》&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回类中指定的方法</span></span><br><span class="line">        Method ttt = c1.getDeclaredMethod(<span class="string">&quot;ttt&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回类中指定的方法&quot;</span>+ttt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------分割线--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、获取构造器</span></span><br><span class="line">        Constructor[] constructors1 = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor[] constructors2 = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Declared&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的构造器</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, Integer.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定的构造器：&quot;</span>+constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射操作属性和方法"><a href="#反射操作属性和方法" class="headerlink" title="反射操作属性和方法"></a>反射操作属性和方法</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180735.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180815.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180851.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212180930.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射操作属性和方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 通过反射获取Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.xu.pojo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过有参构造器创造对象</span></span><br><span class="line">        Person person1 = (Person) c1.getDeclaredConstructor(String.class,Integer.class).newInstance(<span class="string">&quot;琳琅&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过无参构造器创造对象</span></span><br><span class="line">        Person person2 = (Person)c1.newInstance();</span><br><span class="line">        <span class="comment">//System.out.printf(String.valueOf(person2));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用一个方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(person2, <span class="string">&quot;无暇&quot;</span>);</span><br><span class="line">        <span class="comment">//invoke:激活的意思</span></span><br><span class="line">        <span class="comment">//invoke（&quot;对象&quot;，&quot;传入方法的值&quot;）</span></span><br><span class="line">        System.out.println(person2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        Person person3 = (Person)c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>); <span class="comment">// 如果属性是私有的，我们需要关闭程序的安全检测，属性或方法setAccessible(true)</span></span><br><span class="line">        name.set(person3,<span class="string">&quot;飞扬&quot;</span>);</span><br><span class="line">        System.out.println(person3.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反射获取注解信息"><a href="#反射获取注解信息" class="headerlink" title="反射获取注解信息"></a>反射获取注解信息</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201212181103.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自定义注解</title>
      <link href="posts/ba74bcdf/"/>
      <url>posts/ba74bcdf/</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Java常用的三个内置注解："><a href="#Java常用的三个内置注解：" class="headerlink" title="Java常用的三个内置注解："></a>Java常用的三个内置注解：</h2><ul><li><p><strong>@Override : 定义在Java.lang.Override中，表示覆盖父类方法；</strong></p></li><li><p><strong>@Deprecated : 定义在Java.lang.Deprecated中，表示不建议使用的；</strong></p></li><li><p><strong>@SuppressWarning : 定义在Java.lang.SuppressWarning中，抑制警告信息；</strong></p></li></ul><h2 id="元注解："><a href="#元注解：" class="headerlink" title="元注解："></a>元注解：</h2><ul><li><strong>元注解的作用就是负责注解其它注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其它annotation类型作说明。</strong></li><li><strong>可以在Java.lang.annotation包中可以找到4个元注解，它们分别是（@Target，@Retention，@Documented，@Inherited）</strong><ul><li><strong>@Target : 用于描述注解的使用范围（即：被描述的注解可以用在什么地方）；</strong></li><li><strong>@Retention : 表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE&gt;CLASS&gt;RUNTIME）;</strong></li><li><strong>@Documented : 说明该注解将被包含在JavaDoc中；</strong></li><li><strong>Inherited : 说明子类可以继承父类中的该注解；</strong></li></ul></li></ul><h2 id="自定义注解："><a href="#自定义注解：" class="headerlink" title="自定义注解："></a>自定义注解：</h2><ul><li><p><strong>使用@interface自定义注解时，自动继承了Java.lang.annotation.Annotation接口；</strong></p></li><li><p><strong>定义注解的格式：</strong></p><ul><li><p><strong>public @interface 注解名 {定义的内容}</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>  <span class="comment">// 注解的使用范围，多个用逗号隔开</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解的生命周期  SOURCE&gt;CLASS&gt;RUNTIME</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注解中参数只有一个的话，参数名一般使用value</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span>  <span class="comment">// 注解的使用范围，多个用逗号隔开</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解的生命周期  SOURCE&gt;CLASS&gt;RUNTIME</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>默认值的问题</strong></p><ul><li><p><strong>没有定义默认值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation(name = &quot;张三&quot;,sex = 0)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span>  <span class="comment">// 注解的使用范围，多个用逗号隔开</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解的生命周期  SOURCE&gt;CLASS&gt;RUNTIME</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用注解时括号内必须有值，如果不想写，我们可以在定义注解时定义一个默认值；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>定义了默认值：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span>  <span class="comment">// 注解的使用范围，多个用逗号隔开</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解的生命周期  SOURCE&gt;CLASS&gt;RUNTIME</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sex</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用注解时括号内必须有值，如果不想写，我们可以在定义注解时定义一个默认值；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>我们如何读取注解呢？我们可以通过反射机制！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="posts/1822a0ce/"/>
      <url>posts/1822a0ce/</url>
      
        <content type="html"><![CDATA[<h1 id="1、CSS的相关知识点："><a href="#1、CSS的相关知识点：" class="headerlink" title="1、CSS的相关知识点："></a>1、CSS的相关知识点：</h1><p><strong>①发展史</strong></p><p>css1. 0</p><p>css2.0  DIV+CSS，HTML和CSS结构分离思想，网页变得更简单</p><p>css2.1  浮动，定位</p><p>css3.0  圆角，阴影，动画…..浏览器兼容性…….</p><p><strong>②CSS的基本语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--规范，&lt;Style&gt; 标签可以编写CSS代码，每一个声明最好使用分号隔开</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">选择器&#123;</span></span><br><span class="line"><span class="comment">声明1;</span></span><br><span class="line"><span class="comment">声明2;</span></span><br><span class="line"><span class="comment">声明3;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">例子：</span></span><br><span class="line"><span class="comment">    &lt;style&gt;</span></span><br><span class="line"><span class="comment">        h1&#123;</span></span><br><span class="line"><span class="comment">            color: red;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &lt;/style&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③外部引入CSS的方法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用&lt;link&gt;即可引入CSS，&lt;link&gt;标签最好写在&lt;head&gt;标签的内部--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④使用CSS的优势：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、CSS2.0后，HTML和CSS的都可以分成独立的文件，HTML文件只有html，网页变得更简单的！(即内容和表现分离！)</span><br><span class="line">2、网页结构表现统一的话，可以实现复用。</span><br><span class="line">3、样式十分丰富。</span><br><span class="line">4、利用SEO（搜索引擎优化），容易被搜索引擎收录！</span><br></pre></td></tr></table></figure><p><strong>⑤使用CSS的三种方式：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--第二种方式(内部样式)：在 &lt;Style&gt; 标签中编写CSS代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">&lt;!--第三种方式(外部样式)：通过 &lt;link&gt; 标签连接到外部的CSS文件--&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--第一种方式(行内样式)：在标签元素中编写一个 Style 属性，编写样式即可！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><font color=red>注意点：</font></strong></p><p><strong>如果这三种方式全部作用于一个位置，他们的<font color=red>应用优先级</font>为：<u><code>就近原则(即哪种方式离标签越近，标签就会使用哪种方式的 CSS 样式)</code></u></strong></p><p><strong>⑥拓展：外部样式的两种写法：</strong></p><p><code>1、链接式：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>/&gt;</span><span class="comment">&lt;!--链接式写法，CSS3.0中出现的写法--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>2、导入式：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="comment">/*导入式写法，CSS2.1中出现的写法。现已废弃*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><p><strong>1、属性不同：</strong></p><p><font size=4 color=red face="黑体">link是html提供的标签，不仅可以加载css文件，还能定义 RSS、rel 连接属性等。而</font></p><p><font size=4 color=red face="黑体">@import是css中的语法规则 </font></p><p><strong>2、加载顺序不同：</strong></p><p><font size=4 color=red face="黑体">页面打开时，link引用的css文件被加载。而@import引用的CSS等页面加载完后最后加载。</font></p><p><strong>3、兼容性：</strong></p><p><font size=4 color=red face="黑体">@import是css2.1后提出的，而link是不存在兼容问题。</font></p><p><strong>4、DOM控制性：</strong></p><p><font size=4 color=red face="黑体">js操作DOM，可以使用link改变样式，无法使用@import的方式使用样式。</font></p><h1 id="2、选择器"><a href="#2、选择器" class="headerlink" title="2、选择器"></a>2、选择器</h1><h3 id="2-1、基本选择器："><a href="#2-1、基本选择器：" class="headerlink" title="2.1、基本选择器："></a>2.1、基本选择器：</h3><p>1、标签选择器            选择一类标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="css">        格式：标签名&#123;&#125;</span></span><br><span class="line">        例子：</span><br><span class="line">        h1&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        选中所有h1标签，并将它们的颜色设为红色！</span><br><span class="line">        */</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、类选择器                选择所以 class 属性相同的标签，可以跨标签使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="css">        格式：.类名&#123;&#125;</span></span><br><span class="line">        例子：</span><br><span class="line"><span class="css">        <span class="selector-class">.linlang</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        选中所有class属性为 linlang 标签，并将它们的颜色设为红色！ 类选择器可以跨标签使用！</span><br><span class="line">        */</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;linlang&quot;</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;linlang&quot;</span>&gt;</span>我是H2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;linlang&quot;</span>&gt;</span>我是H3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、ID选择器                全局唯一！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*格式：#ID名&#123;&#125;</span><br><span class="line">        例子：</span><br><span class="line"><span class="css">        <span class="selector-id">#linlang</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        选中 ID 为 linlang 标签，并将它们的颜色设为红色！ ID选择器全局唯一！*/</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;linlang&quot;</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=red face="黑体">选择器的优先级：不遵循就近原则，ID选择器 &gt; 类选择器 &gt; 标签选择器</font></p><h3 id="2-2、层次选择器："><a href="#2-2、层次选择器：" class="headerlink" title="2.2、层次选择器："></a>2.2、层次选择器：</h3><p>1、后代选择器            后代选择器选择一个元素的所有后代。</p><p>2、子选择器                子选择器只选择元素的直接后来，即后代的后代不会受影响。</p><p>3、相邻兄弟选择器        相邻兄弟选择器可以选择同一个父元素下自身所在位置向下一个兄弟元素（对下不对上）</p><p>4、兄弟选择器            兄弟选择器可以选择同一个父元素下自身所在位置向下的所有兄弟元素（对下不对上）</p><h3 id="2-3、结构伪类选择器"><a href="#2-3、结构伪类选择器" class="headerlink" title="2.3、结构伪类选择器"></a>2.3、结构伪类选择器</h3><p><strong>伪类可以理解为过滤的意思</strong></p><p><strong>伪类选择器以 ：开头</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">        /*要求：选中<span class="tag">&lt;<span class="name">ul</span>&gt;</span>下面的第一个<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签,定位到li1*/</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="xml">        /*要求：选中<span class="tag">&lt;<span class="name">ul</span>&gt;</span>下面的最后一个<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签，定位到li3*/</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="xml">        /*要求：选中<span class="tag">&lt;<span class="name">body</span>&gt;</span>下面的第一个<span class="tag">&lt;<span class="name">p</span>&gt;</span>标签，定位到p1*/</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>&#123;         <span class="comment">/*释义：找到&lt;P&gt;元素的父级元素的所有子元素，按照顺序数第2个子元素*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">blue</span>;        <span class="comment">/*nth-child是按照顺序来的*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="xml">        /*要求：选中<span class="tag">&lt;<span class="name">body</span>&gt;</span>下面的第一个<span class="tag">&lt;<span class="name">p</span>&gt;</span>标签，定位到p1*/</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;  <span class="comment">/*释义：找到&lt;P&gt;元素的父级元素的同类型所有子元素&lt;P&gt;，按照顺序数第1个子元素*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">yellow</span>; <span class="comment">/*nth-of-type是按照同类型的顺序的来的*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4、属性选择器"><a href="#2-4、属性选择器" class="headerlink" title="2.4、属性选择器"></a>2.4、属性选择器</h3><p><strong>相当于ID选择器+class选择器的结合(配合正则表达式食用，效果更佳哦！)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        a&#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            font-weight: bold ;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            display: block;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line"></span><br><span class="line">        =    表示：绝对等于</span><br><span class="line">        *=   表示：包含这个元素</span><br><span class="line">        ^=   表示：以这个元素开头</span><br><span class="line">        $=   表示：以这个元素结尾</span><br><span class="line"></span><br><span class="line">        语法规则：选择到的元素 [属性过滤]&#123;声明1;声明2;声明3;&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[class$=bbb]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;   释义：通过标签选择器 选择所有的<span class="selector-tag">a</span>标签 ，<span class="selector-attr">[class$=bbb]</span>表示<span class="selector-tag">class</span>属性中以<span class="selector-tag">bbb</span>结尾的<span class="selector-tag">a</span>标签</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a[href*=&quot;css/1.jpg&quot;]&#123;   释义：通过标签选择器 选择所有的a标签 ，[href*=&quot;css/1.jpg&quot;]表示href属性中包含css/1.jpg的a标签</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        */</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.huawei.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb xxx&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb xxx&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb xxx&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb xxx&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bbb xxx&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bbb xxx&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;css/1.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa bbb xxx&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3、相关的属性"><a href="#3、相关的属性" class="headerlink" title="3、相关的属性"></a>3、相关的属性</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>:文本对齐方式   <span class="selector-tag">center</span>居中、<span class="selector-tag">right</span>右边、<span class="selector-tag">left</span>左边</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-indent</span>:首行缩进  单位推荐<span class="selector-tag">em</span>一般2<span class="selector-tag">em</span>就行</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">line-height</span>:行高这个行高指该元素的高度，如果行高等于盒子高度，则居中！</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-decoration</span>：下划线  <span class="selector-tag">none</span>无、<span class="selector-tag">underline</span>有、<span class="selector-tag">line-through</span>删除线、<span class="selector-tag">overline</span>上划线</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-shadow</span>:阴影 相关参数：1、阴影颜色 2、水平偏移 3、垂直偏移 4、阴影半径</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、伪类链接"><a href="#4、伪类链接" class="headerlink" title="4、伪类链接"></a>4、伪类链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#FF0000</span>;&#125; <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125; <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125; <span class="comment">/* 鼠标划过链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125; <span class="comment">/* 已选中的链接 */</span></span><br></pre></td></tr></table></figure><h1 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">none去掉圆点</span></span><br><span class="line"><span class="comment">decimal数字</span></span><br><span class="line"><span class="comment">circle空心圆</span></span><br><span class="line"><span class="comment">square正方行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6、背景图片"><a href="#6、背景图片" class="headerlink" title="6、背景图片"></a>6、背景图片</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">bgckground-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/1.jpg&quot;</span>);</span><br><span class="line">    bgckground-repeat：no-repeat;</span><br><span class="line">    <span class="selector-tag">bgckground-position</span><span class="selector-pseudo">:20px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">背景图片默认是铺满整个屏幕的，我们需要添加 </span></span><br><span class="line"><span class="comment">bgckground-repeat：no-repeat  取消平铺</span></span><br><span class="line"><span class="comment">改变图片的位置，我们需要添加</span></span><br><span class="line"><span class="comment">bgckground-position:参数1(以左上角原点为中心，</span></span><br><span class="line"><span class="comment">左右（x轴）的偏移量) 参数2(以左上角原点为中心，上下（y轴）的偏移量)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">简写：</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="comment">/*颜色、图片地址 图片的位置 平铺方式*/</span></span><br><span class="line">    <span class="attribute">bgckground</span>:blue <span class="built_in">url</span>(<span class="string">&quot;images/1.jpg&quot;</span>) <span class="number">20px</span> <span class="number">30px</span> no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7、display"><a href="#7、display" class="headerlink" title="7、display"></a>7、display</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">display的相关属性值：</span></span><br><span class="line"><span class="comment">none---》隐藏该元素</span></span><br><span class="line"><span class="comment">block---》将该元素变为块元素</span></span><br><span class="line"><span class="comment">inline---》将该元素变为行内元素</span></span><br><span class="line"><span class="comment">inline-block---》块元素和行内元素的结合，是块元素，也可以在一行！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="8、浮动-float"><a href="#8、浮动-float" class="headerlink" title="8、浮动(float)"></a>8、浮动(float)</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;<span class="comment">/*向左浮动 */</span></span><br><span class="line">    <span class="attribute">float</span>:right;<span class="comment">/* 向右浮动 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9、父级边框塌陷问题"><a href="#9、父级边框塌陷问题" class="headerlink" title="9、父级边框塌陷问题"></a>9、父级边框塌陷问题</h1><p><strong>由于浮动后，内容脱离标准文档流。会造成父级边框塌陷！</strong></p><p><font color=red><strong>4种解决方案：</strong></font></p><p><font color=blue><strong>1、增加父级边框的高度</strong></font></p><p><font color=blue><strong>2、在漂浮的元素后面增加一个空的  div ，并清除该 div 的左右浮动！</strong></font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both</span><br><span class="line">    margin:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clear的相关属性值：</span></span><br><span class="line"><span class="comment">clear：right;右侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">    clear：left;左侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">    clear：both;两侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">    clear：none;</span></span><br></pre></td></tr></table></figure><p><font color=blue><strong>3、overflow</strong></font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在浮动元素的父级中添加overflow：hidden属性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;div id=&quot;father&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt; <span class="selector-tag">div1</span> &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt; <span class="selector-tag">div2</span> &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt; <span class="selector-tag">div3</span> &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden自动隐藏</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">overflow的相关属性，</span></span><br><span class="line"><span class="comment">overflow：hidden  内容超出部分自动隐藏</span></span><br><span class="line"><span class="comment">overflow：scroll  内容超出部分以滚动条出现并查看</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><font color=blue><strong>4、父类元素添加一个伪类：after,并添加以下相关属性</strong></font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    display:block</span><br><span class="line">    clear:both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对比display和float</strong></p><p><strong>display：让内容排成一排，缺点：放置的方向不可控。</strong></p><p><strong>float：让内容排成一排，缺点：要解决父级边框塌陷的问题，推荐第4种解决方案。</strong></p><h1 id="10-、定位"><a href="#10-、定位" class="headerlink" title="10 、定位"></a>10 、定位</h1><h3 id="10-1、相对定位"><a href="#10-1、相对定位" class="headerlink" title="10.1、相对定位"></a>10.1、相对定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*相对定位：*/</span> <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=red>相对于自身的位置，进行偏移</font>。相对定位的话，它并<font color=red>没有脱离</font>标准文档流，所以<font color=red>原来的位置会被保留！</font></strong></p><h3 id="10-2、绝对定位"><a href="#10-2、绝对定位" class="headerlink" title="10.2、绝对定位"></a>10.2、绝对定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*绝对定位*/</span><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=red>相对于父级元素或浏览器的位置，进行偏移</font>。绝对定位的话，它<font color=red>脱离了标准文档流</font>，所以<font color=red>原来的位置不会被保留！</font></strong></p><p><font color=blue><strong>注意点：</strong></font></p><p><font color=blue><strong>1、父级元素没有使用定位的话，是相对于浏览器位置进行偏移的！</strong></font></p><p><font color=blue><strong>2、父级元素存在定位的话，是相对于父级元素的位置进行偏移的！</strong></font></p><hr><h3 id="10-3、固定定位"><a href="#10-3、固定定位" class="headerlink" title="10.3、固定定位"></a>10.3、固定定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*固定定位：*/</span><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure><h3 id="10-4、Z-index"><a href="#10-4、Z-index" class="headerlink" title="10.4、Z-index"></a>10.4、Z-index</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">z-index</span>: 22;<span class="comment">/*可以用来提升定位后，重叠元素的层级！*/</span></span><br></pre></td></tr></table></figure><h3 id="10-5、背景透明度属性"><a href="#10-5、背景透明度属性" class="headerlink" title="10.5、背景透明度属性"></a>10.5、背景透明度属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*背景透明度*/</span><span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="posts/5bd9b965/"/>
      <url>posts/5bd9b965/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong><a href="https://www.cnblogs.com/miracle77hp/articles/11163532.html">https://www.cnblogs.com/miracle77hp/articles/11163532.html</a></strong></p><p><strong>感谢博主！</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Git下载：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p><h2 id="Linux-平台上安装"><a href="#Linux-平台上安装" class="headerlink" title="Linux 平台上安装"></a><font color=blue>Linux 平台上安装</font></h2><p>Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。</p><p>在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：</p><p>各 Linux 系统可以使用其安装包管理工具（apt-get、yum 等）进行安装：</p><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h3><p>Debian/Ubuntu Git 安装命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</span></span><br><span class="line"><span class="bash">  libz-dev libssl-dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install git</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br><span class="line">git version 1.8.1.2</span><br></pre></td></tr></table></figure><h3 id="Centos-RedHat"><a href="#Centos-RedHat" class="headerlink" title="Centos/RedHat"></a>Centos/RedHat</h3><p>如果你使用的系统是 Centos/RedHat 安装命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install curl-devel expat-devel gettext-devel \</span></span><br><span class="line"><span class="bash">  openssl-devel zlib-devel</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install git-core</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br><span class="line">git version 1.7.1</span><br></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>我们也可以在官网下载源码包来安装，最新源码包下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>安装指定系统的依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### Centos/RedHat ##########</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install curl-devel expat-devel gettext-devel \</span></span><br><span class="line"><span class="bash">  openssl-devel zlib-devel</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### Debian/Ubuntu ##########</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</span></span><br><span class="line"><span class="bash">  libz-dev libssl-dev</span></span><br></pre></td></tr></table></figure><p>解压安装下载的源码包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf git-1.7.2.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> git-1.7.2.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make prefix=/usr/<span class="built_in">local</span> all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make prefix=/usr/<span class="built_in">local</span> install</span></span><br></pre></td></tr></table></figure><h2 id="Windows-平台上安装"><a href="#Windows-平台上安装" class="headerlink" title="Windows 平台上安装"></a><font color=blue>Windows 平台上安装</font></h2><p><strong>直接一路next ！</strong></p><h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><h5 id="查看不同级别的配置文件"><a href="#查看不同级别的配置文件" class="headerlink" title="查看不同级别的配置文件"></a>查看不同级别的配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看系统配置</span></span><br><span class="line">git config --system --list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户配置</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><h5 id="Git相关配置文件的位置"><a href="#Git相关配置文件的位置" class="headerlink" title="Git相关配置文件的位置"></a>Git相关配置文件的位置</h5><p>1）、Git\etc\gitconfig    :     Git安装目录下的 gitconfig    –system     系统级</p><p>2）、C：Users\Administrator\ .gitconfig     ：c盘用户目录下     –global     用户当前的配置</p><h5 id="配置个人的用户名称和电子邮件地址"><a href="#配置个人的用户名称和电子邮件地址" class="headerlink" title="配置个人的用户名称和电子邮件地址"></a>配置个人的用户名称和电子邮件地址</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name Heary</span><br><span class="line">git config --global user.email 1612893803@qq.com</span><br></pre></td></tr></table></figure><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="img"></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><p><strong>工作区：</strong></p><p>工作区就是你存放代码的地方，新建一个文件夹就是一个工作区。</p><p><strong>本地仓库：</strong></p><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/image-20200714170916551.png"></p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。</p><p><img src= "/img/loading.gif" data-lazy-src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><p>文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p><strong>远程仓库：</strong></p><p>简单理解就是在线版的本地仓库。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><p><img src= "/img/loading.gif" data-lazy-src="https://www.liaoxuefeng.com/files/attachments/919021987875136/0" alt="learn-branches"></p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。</p><p>但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p><h1 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h1><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge </span><br></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><p>开始前我们先创建一个测试目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir gitdemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gitdemo/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line">Initialized empty Git repository...</span><br><span class="line"><span class="meta">$</span><span class="bash"> touch README</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add README</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&#x27;第一次版本提交&#x27;</span></span></span><br><span class="line">[master (root-commit) 3b58100] 第一次版本提交</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README</span><br></pre></td></tr></table></figure><hr><h2 id="Git-分支管理-1"><a href="#Git-分支管理-1" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><h3 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3><p>列出分支基本命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p><p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p><p>如果我们要手动创建一个分支。执行 <strong>git branch (branchname)</strong> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch testing</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 <strong>testing</strong>。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>testing</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;runoob.com&#x27;</span> &gt; test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&#x27;add test.txt&#x27;</span></span></span><br><span class="line">[master 3e92c19] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout testing</span></span><br><span class="line">Switched to branch &#x27;testing&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br></pre></td></tr></table></figure><p>当我们切换到 <strong>testing</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们有重新出现了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b newtest</span></span><br><span class="line">Switched to a new branch &#x27;newtest&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span> </span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br><span class="line"><span class="meta">$</span><span class="bash"> touch runoob.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;removed test.txt、add runoob.php&#x27;</span></span></span><br><span class="line">[newtest c1501a2] removed test.txt、add runoob.php</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 runoob.php</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        runoob.php</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。</p><p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除分支命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><p>例如我们要删除 testing 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d testing</span></span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge newtest</span></span><br><span class="line">Updating 3e92c19..c1501a2</span><br><span class="line">Fast-forward</span><br><span class="line"> runoob.php | 0</span><br><span class="line"> test.txt   | 1 -</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 runoob.php</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        runoob.php</span><br></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p><p>合并完后就可以删除分支:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d newtest</span></span><br><span class="line">Deleted branch newtest (was c1501a2).</span><br></pre></td></tr></table></figure><p>删除后， 就只剩下 master 分支了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat runoob.php</span></span><br></pre></td></tr></table></figure><p>首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>创建 change_site 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b change_site</span></span><br><span class="line">Switched to a new branch &#x27;change_site&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim runoob.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> head -3 runoob.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;changed the runoob.php&#x27;</span></span></span><br><span class="line">[change_site 7774248] changed the runoob.php</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 runoob.php 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat runoob.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim runoob.php    <span class="comment"># 修改内容如下</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat runoob.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">echo 1;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">diff --git a/runoob.php b/runoob.php</span><br><span class="line">index e69de29..ac60739 100644</span><br><span class="line">--- a/runoob.php</span><br><span class="line">+++ b/runoob.php</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+&lt;?php</span><br><span class="line">+echo 1;</span><br><span class="line">+?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;修改代码&#x27;</span></span></span><br><span class="line">[master c68142b] 修改代码</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge change_site</span></span><br><span class="line">Auto-merging runoob.php</span><br><span class="line">CONFLICT (content): Merge conflict in runoob.php</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat runoob.php     <span class="comment"># 代开文件，看到冲突内容</span></span></span><br><span class="line">&lt;?php</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">echo 1;</span><br><span class="line">=======</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; change_site</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim runoob.php</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> cat runoob.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">echo 1;</span><br><span class="line">echo &#x27;runoob&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">diff --cc runoob.php</span><br><span class="line">index ac60739,b63d7d7..0000000</span><br><span class="line">--- a/runoob.php</span><br><span class="line">+++ b/runoob.php</span><br><span class="line">@@@ -1,3 -1,3 +1,4 @@@</span><br><span class="line">  &lt;?php</span><br><span class="line"> +echo 1;</span><br><span class="line">+ echo &#x27;runoob&#x27;;</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">UU runoob.php</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add runoob.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">M  runoob.php</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line">[master 88afe0e] Merge branch &#x27;change_site&#x27;</span><br></pre></td></tr></table></figure><p>现在我们成功解决了合并中的冲突，并提交了结果</p><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h5 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h5><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0 </span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a v0.9 85fc7e7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --oneline --decorate --graph</span></span><br><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 (tag: v0.9) 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><strong>根据<a href="https://www.cnblogs.com/miracle77hp/articles/11163532.html%E7%9A%84%E6%95%B4%E7%90%86%E3%80%82">https://www.cnblogs.com/miracle77hp/articles/11163532.html的整理。</a></strong></p><h5 id="1、新建仓库"><a href="#1、新建仓库" class="headerlink" title="1、新建仓库"></a>1、新建仓库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库 </span></span><br><span class="line">$ git init</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库 </span></span><br><span class="line">$ git init [project-name]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史 </span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h5 id="2、增加、删除文件"><a href="#2、增加、删除文件" class="headerlink" title="2、增加、删除文件"></a>2、增加、删除文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 添加指定文件到暂存区 </span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区 </span></span><br><span class="line">$ git add .</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认 </span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交 </span></span><br><span class="line">$ git add -p</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区 </span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区 </span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h5 id="3、代码提交"><a href="#3、代码提交" class="headerlink" title="3、代码提交"></a>3、代码提交</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区 </span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区 </span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交时显示所有diff信息 </span></span><br><span class="line">$ git commit -v</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息 </span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化 </span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h5 id="4、分支"><a href="#4、分支" class="headerlink" title="4、分支"></a>4、分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支 </span></span><br><span class="line">$ git branch</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出所有远程分支 </span></span><br><span class="line">$ git branch -r</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支 </span></span><br><span class="line">$ git branch -a</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支 </span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支 </span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line"> </span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区 </span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 切换到上一个分支 </span></span><br><span class="line">$ git checkout -</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间 </span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 合并指定分支到当前分支 </span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支 </span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除远程分支 </span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line"></span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h5 id="5、标签"><a href="#5、标签" class="headerlink" title="5、标签"></a>5、标签</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag </span></span><br><span class="line">$ git tag</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个tag在当前commit </span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个tag在指定commit </span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除本地tag </span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交指定tag </span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交所有tag </span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag </span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h5 id="6、查看信息"><a href="#6、查看信息" class="headerlink" title="6、查看信息"></a>6、查看信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件 </span></span><br><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件 </span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词 </span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行 </span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 </span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名 </span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line"> </span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff </span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序 </span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过 </span></span><br><span class="line">$ git blame [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示两次提交之间的差异 </span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码 </span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件 </span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交 </span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h5 id="7、远程同步"><a href="#7、远程同步" class="headerlink" title="7、远程同步"></a>7、远程同步</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示所有远程仓库 </span></span><br><span class="line">$ git remote -v</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息 </span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并 </span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库 </span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h5 id="8、撤销"><a href="#8、撤销" class="headerlink" title="8、撤销"></a>8、撤销</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区 </span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区 </span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区 </span></span><br><span class="line">$ git checkout .</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit </span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"> </span><br><span class="line">$ git revert [commit]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入 </span></span><br><span class="line">$ git stash</span><br><span class="line"> </span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h5 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包 </span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch笔记</title>
      <link href="posts/f14ce4db/"/>
      <url>posts/f14ce4db/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173335.png" alt="elastic-logo"></p><h1 id="一、ElasticSearch介绍"><a href="#一、ElasticSearch介绍" class="headerlink" title="一、ElasticSearch介绍"></a>一、ElasticSearch介绍</h1><h3 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h3><blockquote><p>1、在海量数据中执行搜素功能时，如果使用MySql，效率太低。</p><p>2、关键字输入的不准确，一样可以搜索到想要的数据</p><p>3、将搜索关键字，以红色的字体展示</p></blockquote><h3 id="1-2-ES的介绍"><a href="#1-2-ES的介绍" class="headerlink" title="1.2 ES的介绍"></a>1.2 ES的介绍</h3><blockquote><p>ES 是一个使用Java语言并且基于Lucene编写的搜索引擎框架，它提供了分布式的全文搜索功能，提供了一个统一的基于RESTful风格的WEB接口，官方客户端也对多种语言都提供了相应的API。</p><p>Lucene : Lucene 本身就是一个搜索引擎的 底层。</p><p>分布式 ： ES主要为了突出它的横向扩展能力。</p><p>全文检索： 将一段词语进行分词，并且将分出来的单个词语统一放到 一个分词库中，在搜索时，根据关键字去分词库中检索，找到匹配的内容。(倒排索引)</p><p>RESTful风格的WEB接口：只需要发送一个http请求，并且根据请求方式不同，携带的参数不同，执行相应的功能。</p></blockquote><h3 id="1-3-ES的由来"><a href="#1-3-ES的由来" class="headerlink" title="1.3 ES的由来"></a>1.3 ES的由来</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173419.png" alt="image-20200724172118585"></p><h3 id="1-4-ES和Solr的区别"><a href="#1-4-ES和Solr的区别" class="headerlink" title="1.4 ES和Solr的区别"></a>1.4 ES和Solr的区别</h3><blockquote><p>1、Solr在查询死数据时，速度相对于ES会更快。但是数据时实时变化的，查询效率会下降很多，ES的查      询效率变化并不大</p><p>2、Solr搭建集群需要依赖ZooKeeper来帮助管理，ES本身支持集群搭建，不需要第三方。</p><p>3、ES对云计算和大数据支持非常好。</p><p>4、ES的文档很健全</p></blockquote><h3 id="1-5-倒排索引"><a href="#1-5-倒排索引" class="headerlink" title="1.5 倒排索引"></a>1.5 倒排索引</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173500.png" alt="image-20200807125012845"></p><blockquote><p>将存放的数据，以一定方式进行分词，并将分词的内容存放到一个单独的分词库中</p><p>当用户去查询数据时，会将用户查询的关键词进行分词</p><p>然后去分词库中匹配内容，最终得到数据的id标识</p><p>根据id标识去存放数据的位置拉取指定的内容</p></blockquote><h1 id="二、ElaticSearch安装"><a href="#二、ElaticSearch安装" class="headerlink" title="二、ElaticSearch安装"></a>二、ElaticSearch安装</h1><h3 id="2-1-、安装ES-amp-Kibana"><a href="#2-1-、安装ES-amp-Kibana" class="headerlink" title="2.1 、安装ES &amp; Kibana"></a>2.1 、安装ES &amp; Kibana</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version:&quot;3.1&quot;</span><br><span class="line">services:</span><br><span class="line">elasticsearch:</span><br><span class="line">image: daocloud.io/library/elasticsearch:6.5.4</span><br><span class="line">restart: always</span><br><span class="line">container_name: elasticsearch</span><br><span class="line">ports:</span><br><span class="line">- 9200: 9200</span><br><span class="line">kibana:</span><br><span class="line">image: daocloud.io/library/kibana:6.5.4</span><br><span class="line">restart: always</span><br><span class="line">container_name: kibana</span><br><span class="line">ports:</span><br><span class="line">-5601: 5601</span><br><span class="line">environment:</span><br><span class="line">- elasticsearch_url=http://47.115.11.82:9200</span><br><span class="line">depends_on:</span><br><span class="line">- elasticsearch</span><br></pre></td></tr></table></figure><h3 id="2-2-、安装-IK-分词器"><a href="#2-2-、安装-IK-分词器" class="headerlink" title="2.2 、安装 IK 分词器"></a>2.2 、安装 IK 分词器</h3><blockquote><p>下载 IK 分词器的地址：</p><p>进入到ES容器内部，跳转到bin目录下，执行bin目录下的脚本文件：</p><p>./elasticsearch-plugin install </p><p>IK提供了两个分词算法：ik_smart和ik_word，其中ik_smart为最少切分，ik_word为最细粒度划分。</p></blockquote><h1 id="三、ElasticSearch基本操作"><a href="#三、ElasticSearch基本操作" class="headerlink" title="三、ElasticSearch基本操作"></a>三、ElasticSearch基本操作</h1><h3 id="3-1、ES的结构"><a href="#3-1、ES的结构" class="headerlink" title="3.1、ES的结构"></a>3.1、ES的结构</h3><h5 id="3-1-1-、索引Index、分片和备份。"><a href="#3-1-1-、索引Index、分片和备份。" class="headerlink" title="3.1.1 、索引Index、分片和备份。"></a>3.1.1 、索引Index、分片和备份。</h5><blockquote><p>ES 的服务中，可以创建多个索引。类似Mysql的多个数据库</p><p>每一个索引默认被分成5片存储。</p><p>每一个分片都会存在至少一个备份分片。</p><p>备份分片默认不会帮助检索数据，当ES检索压力特别大的时候，备份分片才会帮助检索数据。</p><p>备份分片必须放在不同的服务器中。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173546.png" alt="image-20200807151543708"></p><h5 id="3-1-2-、类型Type"><a href="#3-1-2-、类型Type" class="headerlink" title="3.1.2 、类型Type"></a>3.1.2 、类型Type</h5><blockquote><p>一个索引下，可以创建多个类型。类似Mysql中不同的表</p><p>Ps:根据版本的不同，类型可创建的数量也不同</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173702.png" alt="image-20200807151731292"></p><h5 id="3-1-3-、文档Doc"><a href="#3-1-3-、文档Doc" class="headerlink" title="3.1.3 、文档Doc"></a>3.1.3 、文档Doc</h5><blockquote><p>一个类型下有多个文档。这个文档类似于Mysql中的多行数据。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173754.png" alt="image-20200807152002952"></p><h3 id="3-2-、操作ES的Restful语法"><a href="#3-2-、操作ES的Restful语法" class="headerlink" title="3.2 、操作ES的Restful语法"></a>3.2 、操作ES的Restful语法</h3><blockquote><p>GET请求:</p><pre><code>http://ip:port/index:查询索引信息http://ip:port/index/type/doc_id:查询指定的文档信息</code></pre><p>POST请求:</p><pre><code>http://ip:port/index/type/_search:查询文档，可以在请求体中添加json字符串来代表查询条件http://ip:port/index/type/doc_id/_update:修改文档，在请求体中指定ison字符串代表修改的具体信息_</code></pre><p>PUT请求:</p><pre><code>http://ip;port/index:创建一个索引，需要在请求体中指定索引的信息，类型，结构http://ip:port/index/type/_mappings:代表创建索引时，指定索引文档存储的属性的信息</code></pre><p>DELETE请求:</p><pre><code>http://ip:port/index:删除跑路http://ip:port/index/type/doc_id:删除指定的文档</code></pre></blockquote><h5 id="3-1-4-、属性Filed"><a href="#3-1-4-、属性Filed" class="headerlink" title="3.1.4 、属性Filed"></a>3.1.4 、属性Filed</h5><blockquote><p>一个文档中，可以包含多个属性。类似于Mysql中一行数据存在多个列。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173858.png" alt="image-20200807152414336"></p><h3 id="3-3、-索引的操作"><a href="#3-3、-索引的操作" class="headerlink" title="3.3、 索引的操作"></a>3.3、 索引的操作</h3><h5 id="3-3-1-、创建一个索引"><a href="#3-3-1-、创建一个索引" class="headerlink" title="3.3.1 、创建一个索引"></a>3.3.1 、创建一个索引</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个索引</span><br><span class="line">PUT /person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span>:<span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-2-、查看索引信息"><a href="#3-3-2-、查看索引信息" class="headerlink" title="3.3.2 、查看索引信息"></a>3.3.2 、查看索引信息</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211173946.png" alt="image-20200807163753875"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看索引信息</span><br><span class="line">GET /person</span><br></pre></td></tr></table></figure><h5 id="3-3-3-、删除索引"><a href="#3-3-3-、删除索引" class="headerlink" title="3.3.3 、删除索引"></a>3.3.3 、删除索引</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除索引</span><br><span class="line">DELETE /person</span><br></pre></td></tr></table></figure><h3 id="3-4、ES中-Filed-可以指定的类型"><a href="#3-4、ES中-Filed-可以指定的类型" class="headerlink" title="3.4、ES中 Filed 可以指定的类型"></a>3.4、ES中 Filed 可以指定的类型</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 字符串类型</span><br><span class="line">* text- 一般用于全文检索，将当前的filed进行分词</span><br><span class="line">* keyword- 当前的filed不会被分词</span><br><span class="line"></span><br><span class="line"># 数值类型</span><br><span class="line">* long</span><br><span class="line">* integer</span><br><span class="line">* short</span><br><span class="line">* byte</span><br><span class="line">* double</span><br><span class="line">* float</span><br><span class="line">* half_float- 精度比float小一半</span><br><span class="line">* scaled_float  - 根据一个long和一个scaled来表达一个浮点型，long-345,scaled-100  ----&gt;3.45</span><br><span class="line"></span><br><span class="line"># 时间类型</span><br><span class="line">* date类型，针对时间类型指定具体的格式</span><br><span class="line"></span><br><span class="line"># 布尔类型</span><br><span class="line">* Boolean类型，表达true和false</span><br><span class="line"></span><br><span class="line"># 二进制类型</span><br><span class="line">* binary类型暂时支持base64 encod string</span><br><span class="line"></span><br><span class="line"># 范围类型</span><br><span class="line">* long_range    - 赋值时，无需指定具体的内容，只需要存储一个范围即可，指定gt,lt,gte,lte</span><br><span class="line">* integer_range - 同上</span><br><span class="line">* double_range- 同上</span><br><span class="line">* float_range- 同上</span><br><span class="line">* date_range- 同上</span><br><span class="line">* ip_range- 同上</span><br><span class="line"></span><br><span class="line"># 经纬度类型</span><br><span class="line">* geo_point     - 用来存储经纬度</span><br><span class="line"></span><br><span class="line"># ip类型</span><br><span class="line">* ip        - 可以存储ipv4或者ipv6</span><br></pre></td></tr></table></figure><h3 id="3-5、创建索引并指定数据结构"><a href="#3-5、创建索引并指定数据结构" class="headerlink" title="3.5、创建索引并指定数据结构"></a>3.5、创建索引并指定数据结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引，并指定数据结构</span><br><span class="line">PUT /book</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">     # 分片数</span><br><span class="line">    <span class="string">&quot;number_of_shards&quot;</span>: <span class="number">5</span>,</span><br><span class="line">     # 备份数</span><br><span class="line">    <span class="string">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">   # 指定数据结构</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    # 类型  Type</span><br><span class="line">    <span class="string">&quot;nover&quot;</span>:&#123;</span><br><span class="line">      # 文档存储的Filed 有哪些</span><br><span class="line">      <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">      # Filed的属性名</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">          # 属性的类型</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">          # 指定分词器</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">          # 指定当前的Filed可以被作为查询的条件</span><br><span class="line">          <span class="string">&quot;index&quot;</span>:<span class="string">&quot;true&quot;</span>,</span><br><span class="line">          # 是否需要额外存储，默认false</span><br><span class="line">          <span class="string">&quot;store&quot;</span>:<span class="string">&quot;false&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;author&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;count&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;onSale&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;date&quot;</span>,</span><br><span class="line">           # 时间类型的格式化方式</span><br><span class="line">          <span class="string">&quot;format&quot;</span>:<span class="string">&quot;yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;descr&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6、文档的操作"><a href="#3-6、文档的操作" class="headerlink" title="3.6、文档的操作"></a>3.6、文档的操作</h3><blockquote><p>文档在ES服务中的唯一标识，<code>_index</code>，<code>_type</code>，<code>_id</code> 三个内容为组合，锁定一个文档，来添加还是修改。</p></blockquote><h5 id="3-6-1、新建文档"><a href="#3-6-1、新建文档" class="headerlink" title="3.6.1、新建文档"></a>3.6.1、新建文档</h5><p><code>自动生成_id</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加文档，自动生成id</span><br><span class="line">POST /book/nover</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;盘龙&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>:<span class="string">&quot;我吃西红柿&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;count&quot;</span>:<span class="string">&quot;100000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;onSale&quot;</span>:<span class="string">&quot;2009-01-01&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;descr&quot;</span>:<span class="string">&quot;大小的血睛鬃毛狮，力大无穷的紫睛金毛猿，毁天灭地的九头蛇皇，携带着毁灭雷电的恐怖雷龙……&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 返回的结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;book&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;nover&quot;</span>,</span><br><span class="line">  &quot;_id&quot; : &quot;Gq3H5nMBvQ2hcQ99m2Bc&quot;,    -----&gt; # 自动指定的id</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 0,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>手动指定_id</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加文档，手动生成id</span><br><span class="line">POST /book/nover/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;遮天&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>:<span class="string">&quot;辰东&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;count&quot;</span>:<span class="string">&quot;100000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;onSale&quot;</span>:<span class="string">&quot;2008-01-01&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;descr&quot;</span>:<span class="string">&quot;冰冷与黑暗并存的宇宙深处，九具庞大的龙尸拉着一口青铜古棺，亘古长存。这是太空探测器在枯寂的宇宙中捕捉到的一幅极其震撼的画面。九龙拉棺，究竟是...&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 返回的结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;book&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;nover&quot;</span>,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,    -----&gt; # 手动指定的id</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 0,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-2、修改文档"><a href="#3-6-2、修改文档" class="headerlink" title="3.6.2、修改文档"></a>3.6.2、修改文档</h5><p><code>覆盖式修改</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 添加文档，自动生成id</span><br><span class="line">POST /book/nover/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;盘龙&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>:<span class="string">&quot;我吃西红柿&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;count&quot;</span>:<span class="string">&quot;100000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;onSale&quot;</span>:<span class="string">&quot;2009-01-01&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;descr&quot;</span>:<span class="string">&quot;大小的血睛鬃毛狮，力大无穷的紫睛金毛猿，毁天灭地的九头蛇皇，携带着毁灭雷电的恐怖雷龙……&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doc修改</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改文档，基于doc方式</span><br><span class="line">POST /book/nover/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">     # 指定需要修改的filed和对应的值</span><br><span class="line">    &quot;count&quot;:&quot;123456&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-3、删除文档"><a href="#3-6-3、删除文档" class="headerlink" title="3.6.3、删除文档"></a>3.6.3、删除文档</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 根据id删除文档</span><br><span class="line">DELETE /book/nover/文档的id</span><br></pre></td></tr></table></figure><h1 id="四、Java操作ElasticSearch"><a href="#四、Java操作ElasticSearch" class="headerlink" title="四、Java操作ElasticSearch"></a>四、Java操作ElasticSearch</h1><h3 id="4-1、Java连接ES"><a href="#4-1、Java连接ES" class="headerlink" title="4.1、Java连接ES"></a>4.1、Java连接ES</h3><blockquote><p>1、创建Maven工程</p></blockquote><blockquote><p>2、导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1、elasticsearch --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、elasticsearch高级API --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建测试类，连接ES</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESClint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestHighLevelClient <span class="title">getClient</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HttpHost对象</span></span><br><span class="line">        HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>,<span class="number">9200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 restClientBuilder</span></span><br><span class="line">        RestClientBuilder clientBuilder = RestClient.builder(httpHost);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 RestHighLevelClient</span></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(clientBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2、Java创建索引"><a href="#4-2、Java创建索引" class="headerlink" title="4.2、Java创建索引"></a>4.2、Java创建索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、准备索引的 settings</span></span><br><span class="line">        Settings.Builder settings = Settings.builder()</span><br><span class="line">                .put(<span class="string">&quot;number_of_shards&quot;</span>, <span class="number">3</span>)</span><br><span class="line">                .put(<span class="string">&quot;number_of_replicas&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、准备关于索引结构的 mappings</span></span><br><span class="line">        XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                    .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                        .startObject(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text&quot;</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">&quot;birthday&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;date&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;format&quot;</span>,<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、将settings 和 mappings 封装到request对象中</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">                .settings(settings)</span><br><span class="line">                .mapping(type,mappings);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、通过 client 对象去连接 ES 创建索引</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resp:&quot;</span>+response.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、检查索引是否存在、删除索引"><a href="#4-3、检查索引是否存在、删除索引" class="headerlink" title="4.3、检查索引是否存在、删除索引"></a>4.3、检查索引是否存在、删除索引</h3><p><code>检查索引是否存在</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exists</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、准备request对象</span></span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest();</span><br><span class="line">        request.indices(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过client去操作</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、输出</span></span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、准备request对象</span></span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest();</span><br><span class="line">        request.indices(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过client对象执行</span></span><br><span class="line">        AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、输出</span></span><br><span class="line">        System.out.println(delete.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>删除索引</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、准备request对象</span></span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest();</span><br><span class="line">        request.indices(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过client对象执行</span></span><br><span class="line">        AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、输出</span></span><br><span class="line">        System.out.println(delete.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-、Java操作文档"><a href="#4-4-、Java操作文档" class="headerlink" title="4.4 、Java操作文档"></a>4.4 、Java操作文档</h3><h5 id="4-4-1、添加文档操作"><a href="#4-4-1、添加文档操作" class="headerlink" title="4.4.1、添加文档操作"></a>4.4.1、添加文档操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();     <span class="comment">// 获得jackson的mapper对象</span></span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、准备一组json数据</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">21</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        String json = mapper.writeValueAsString(person);  <span class="comment">// 将person 对象序列化成json</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、准备request对象</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(index,type,person.getId().toString());</span><br><span class="line">        request.source(json, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过client对象操作</span></span><br><span class="line">        IndexResponse index = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2、修改文档"><a href="#4-4-2、修改文档" class="headerlink" title="4.4.2、修改文档"></a>4.4.2、修改文档</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建一个Map，指定需要修改的内容</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;鸢九&quot;</span>);</span><br><span class="line">        String doc_id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="comment">// 2、创建request对象，封装数据</span></span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(index,type,doc_id);</span><br><span class="line">        updateRequest.doc(map);</span><br><span class="line">        <span class="comment">// 3、通过client对象执行</span></span><br><span class="line">        UpdateResponse update = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-4-3、删除文档"><a href="#4-4-3、删除文档" class="headerlink" title="4.4.3、删除文档"></a>4.4.3、删除文档</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、直接封装request对象，根据id删除嘛</span></span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(index,type,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过client对象执行</span></span><br><span class="line">        DeleteResponse delete = client.delete(request,RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、输出</span></span><br><span class="line">        System.out.println(delete.getResult().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-4、Java批量操作文档"><a href="#4-4-4、Java批量操作文档" class="headerlink" title="4.4.4、Java批量操作文档"></a>4.4.4、Java批量操作文档</h5><p><strong>批量添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkCreatDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、准备多个数据</span></span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">24</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        Person person3 = <span class="keyword">new</span> Person(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">25</span>, <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        String json1 = mapper.writeValueAsString(person1);</span><br><span class="line">        String json2 = mapper.writeValueAsString(person2);</span><br><span class="line">        String json3 = mapper.writeValueAsString(person3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、创建Request，将多个数据封装进去</span></span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest(index,type,person1.getId().toString()).source(json1,XContentType.JSON));</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest(index,type,person2.getId().toString()).source(json2,XContentType.JSON));</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest(index,type,person3.getId().toString()).source(json3,XContentType.JSON));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、用client执行</span></span><br><span class="line">        BulkResponse bulk = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">        System.out.println(bulk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>批量删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client = ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type  = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkDeleteDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、封装request对象</span></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> DeleteRequest(index,type,<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> DeleteRequest(index,type,<span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过Client对象执行</span></span><br><span class="line">        BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、输出</span></span><br><span class="line">        System.out.println(bulk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、ElasticSearch练习"><a href="#五、ElasticSearch练习" class="headerlink" title="五、ElasticSearch练习"></a>五、ElasticSearch练习</h1><ul><li>索引 ： sms-logs-index</li><li>类型：sms-logs-type</li></ul><table><thead><tr><th>字段名称</th><th>备注</th></tr></thead><tbody><tr><td>createDate</td><td>创建时间String</td></tr><tr><td>sendDate</td><td>发送时间 date</td></tr><tr><td>longCode</td><td>发送长号码 如 16092389287811 string</td></tr><tr><td>Mobile</td><td>如 13000000000</td></tr><tr><td>corpName</td><td>发送公司名称，需要分词检索</td></tr><tr><td>smsContent</td><td>下发短信内容，需要分词检索</td></tr><tr><td>State</td><td>短信下发状态 0 成功 1 失败 integer</td></tr><tr><td>Operatorid</td><td>运营商编号1移动2联通3电信 integer</td></tr><tr><td>Province</td><td>省份</td></tr><tr><td>ipAddr</td><td>下发服务器IP地址</td></tr><tr><td>replyTotal</td><td>短信状态报告返回时长 integer</td></tr><tr><td>Fee</td><td>扣费 integer</td></tr></tbody></table><h3 id="5-1、POJO类"><a href="#5-1、POJO类" class="headerlink" title="5.1、POJO类"></a>5.1、POJO类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsLogs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer Id;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date sendDate;</span><br><span class="line">    <span class="keyword">private</span> String longCode;</span><br><span class="line">    <span class="keyword">private</span> String Mobile;</span><br><span class="line">    <span class="keyword">private</span> String CorpName;</span><br><span class="line">    <span class="keyword">private</span> String SmsContent;</span><br><span class="line">    <span class="keyword">private</span> Integer State;</span><br><span class="line">    <span class="keyword">private</span> Integer OperatorId;</span><br><span class="line">    <span class="keyword">private</span> String Province;</span><br><span class="line">    <span class="keyword">private</span> String IpAddr;</span><br><span class="line">    <span class="keyword">private</span> Integer ReplyTotal;</span><br><span class="line">    <span class="keyword">private</span> String Fee;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String doc = <span class="string">&quot;冰冷与黑暗并存的宇宙深处，九具庞大的龙尸拉着一口青铜古棺，亘古长存。&quot;</span> +<span class="string">&quot;这是太空探测器在枯寂的宇宙中捕捉到的一幅极其震撼的画面。九龙拉棺，究竟是回到了上古，还是来&quot;</span> +<span class="string">&quot;到了星空的彼岸？一个浩大的仙侠世界，光怪陆离，神秘无尽。热血似火山沸腾，激情若瀚海汹涌，欲&quot;</span> +<span class="string">&quot;望如深渊无止境……登天路，踏歌行，弹指遮天。激情若瀚海汹涌，欲望如深渊无止境……登天路，踏歌行，&quot;</span> +<span class="string">&quot;弹指遮天激情若瀚海汹涌，欲望如深渊无止境……登天路，踏歌行，弹指遮天激情若瀚海汹涌，欲望如深;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、创建索引和导入数据"><a href="#5-2、创建索引和导入数据" class="headerlink" title="5.2、创建索引和导入数据"></a>5.2、创建索引和导入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备关于索引的setting</span></span><br><span class="line">        Settings.Builder settings = Settings.builder()</span><br><span class="line">                .put(<span class="string">&quot;number_of_shards&quot;</span>, <span class="number">3</span>)</span><br><span class="line">                .put(<span class="string">&quot;number_of_replicas&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.准备关于索引的mapping</span></span><br><span class="line">        XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;corpName&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;createDate&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;date&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;format&quot;</span>, <span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;fee&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;long&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;ipAddr&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;ip&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;longCode&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;mobile&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;operatorId&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;province&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;replyTotal&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;sendDate&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;date&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;format&quot;</span>, <span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;smsContent&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;state&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line">        <span class="comment">// 3.将settings和mappings 封装到到一个Request对象中</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">                .settings(settings)</span><br><span class="line">                .mapping(type,mappings);</span><br><span class="line">        <span class="comment">// 4.使用client 去连接ES</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;response:&quot;</span>+response.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">bulkCreateDoc</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备多个json 对象</span></span><br><span class="line">        String longcode = <span class="string">&quot;1008687&quot;</span>;</span><br><span class="line">        String mobile =<span class="string">&quot;138340658&quot;</span>;</span><br><span class="line">        List&lt;String&gt; companies = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        companies.add(<span class="string">&quot;腾讯课堂&quot;</span>);</span><br><span class="line">        companies.add(<span class="string">&quot;阿里旺旺&quot;</span>);</span><br><span class="line">        companies.add(<span class="string">&quot;海尔电器&quot;</span>);</span><br><span class="line">        companies.add(<span class="string">&quot;海尔智家公司&quot;</span>);</span><br><span class="line">        companies.add(<span class="string">&quot;格力汽车&quot;</span>);</span><br><span class="line">        companies.add(<span class="string">&quot;苏宁易购&quot;</span>);</span><br><span class="line">        List&lt;String&gt; provinces = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        provinces.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        provinces.add(<span class="string">&quot;重庆&quot;</span>);</span><br><span class="line">        provinces.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        provinces.add(<span class="string">&quot;晋城&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">16</span> ; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            SmsLogs s1 = <span class="keyword">new</span> SmsLogs();</span><br><span class="line">            s1.setId(i);</span><br><span class="line">            s1.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">            s1.setSendDate(<span class="keyword">new</span> Date());</span><br><span class="line">            s1.setLongCode(longcode+i);</span><br><span class="line">            s1.setMobile(mobile+<span class="number">2</span>*i);</span><br><span class="line">            s1.setCorpName(companies.get(i%<span class="number">5</span>));</span><br><span class="line">            s1.setSmsContent(SmsLogs.doc.substring((i-<span class="number">1</span>)*<span class="number">20</span>,i*<span class="number">20</span>));</span><br><span class="line">            s1.setState(i%<span class="number">2</span>);</span><br><span class="line">            s1.setOperatorId(i%<span class="number">3</span>);</span><br><span class="line">            s1.setProvince(provinces.get(i%<span class="number">4</span>));</span><br><span class="line">            s1.setIpAddr(<span class="string">&quot;127.0.0.&quot;</span>+i);</span><br><span class="line">            s1.setReplyTotal(i*<span class="number">3</span>);</span><br><span class="line">            s1.setFee(i*<span class="number">6</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            String json1  = mapper.writeValueAsString(s1);</span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(index,type,s1.getId().toString()).source(json1, XContentType.JSON));</span><br><span class="line">            System.out.println(<span class="string">&quot;数据&quot;</span>+i+s1.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.client 执行</span></span><br><span class="line">        BulkResponse responses = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.输出结果</span></span><br><span class="line">        System.out.println(responses.getItems().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、ElasticSearch的各种查询"><a href="#六、ElasticSearch的各种查询" class="headerlink" title="六、ElasticSearch的各种查询"></a>六、ElasticSearch的各种查询</h1><h3 id="6-1、term-amp-terms查询"><a href="#6-1、term-amp-terms查询" class="headerlink" title="6.1、term&amp;terms查询"></a>6.1、term&amp;terms查询</h3><h5 id="6-1-1、term查询"><a href="#6-1-1、term查询" class="headerlink" title="6.1.1、term查询"></a>6.1.1、term查询</h5><blockquote><p>term的查询代表是完全匹配，搜索之前不会对你搜索的关键词进行分词，直接去文档分词库中匹配内容。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: 0,# limit 的第一个 ？  </span><br><span class="line">  &quot;size&quot;: 5,# limit 的第二个 ？   这两个用来分页</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;province&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;上海&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java代码实现方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建request对象，基本所有的查询都使用SearchRequest</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件,并将查询条件封装到Request对象中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.from(<span class="number">0</span>);</span><br><span class="line">        builder.size(<span class="number">5</span>);</span><br><span class="line">        builder.query(QueryBuilders.termQuery(<span class="string">&quot;province&quot;</span>,<span class="string">&quot;上海&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Clinet执行</span></span><br><span class="line">        SearchResponse search = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、返回结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : search.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-1-2、terms查询"><a href="#6-1-2、terms查询" class="headerlink" title="6.1.2、terms查询"></a>6.1.2、terms查询</h5><blockquote><p>terms和term的查询机制是一样的，都不会将指定的关键字进行分词，直接去分词库中匹配内容，找到相应的结果并返回。</p><p>terms是针对一个字段可能是多个值的时候使用。</p><p>term类似MySql中的：where   province = “上海”；</p><p>terms类似MySql中的：where   province = “上海” or  where   province = “北京”   or    where   province = “广州”；</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># terms查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;province&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">        <span class="string">&quot;北京&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java代码实现方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// terms查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termsQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并封装到Request对象中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.from(<span class="number">0</span>);</span><br><span class="line">        builder.size(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 指定多个查询条件</span></span><br><span class="line">        builder.query(QueryBuilders.termsQuery(<span class="string">&quot;province&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、获得结果遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、match查询"><a href="#6-2、match查询" class="headerlink" title="6.2、match查询"></a>6.2、match查询</h3><blockquote><p>match查询属于高级查询，他会根据你查询的字段类型不一样，采用不同的查询方式。</p><ul><li>查询是日期或者是数值的话，它会将基于你的字符串查询内容转换为日期或者数值对待。</li><li>如果查询的是一个不被分词的内容(keyword)，match查询不会对你查询的关键字进行分词。</li><li>如果查询的内容是一个可以被分词的内容(text)，，match查询会将你指定的查询内容根据一定的方式去分词，去分词库中匹配指定的内容。</li></ul><p>match查询，实际底层就是多个term查询，将多个term查询的结果封装到了一起。</p></blockquote><h5 id="6-2-1、match-all查询"><a href="#6-2-1、match-all查询" class="headerlink" title="6.2.1、match_all查询"></a>6.2.1、match_all查询</h5><blockquote><p>查询全部内容，不指定查询条件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># match_all查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// match_all 查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// match_all 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchALLQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并封装到Request对象中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.from(<span class="number">0</span>);</span><br><span class="line">        builder.size(<span class="number">10</span>);       <span class="comment">// ES默认值显示10条数据，如需展示更多，需要手动指定Size的大小</span></span><br><span class="line">        builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        </span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client对象执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一共查询到&quot;</span>+resp.getHits().getHits().length+<span class="string">&quot;条数据！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-2、match查询"><a href="#6-2-2、match查询" class="headerlink" title="6.2.2、match查询"></a>6.2.2、match查询</h5><blockquote><p>指定一个Filed做为查询条件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># match查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;踏歌行&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// match查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// match 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并封装到Request对象中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">           </span><br><span class="line">        <span class="comment">//------------------------------------------------------</span></span><br><span class="line">        builder.query(QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>,<span class="string">&quot;青铜古棺&quot;</span>));</span><br><span class="line">        <span class="comment">//------------------------------------------------</span></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client对象执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一共查询到&quot;</span>+resp.getHits().getHits().length+<span class="string">&quot;条数据！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-3、布尔match查询"><a href="#6-2-3、布尔match查询" class="headerlink" title="6.2.3、布尔match查询"></a>6.2.3、布尔match查询</h5><blockquote><p>基于一个Filed匹配的内容，采用and或者or的方式进行连接查询</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 布尔match查询,基于 and</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;青铜古棺 太空探测&quot;</span></span><br><span class="line">        , <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span># 基于 and 连接，查询的内容既包括青铜古棺，又包括太空探测。</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 布尔match查询，基于 or</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;青铜古棺 太空探测&quot;</span># 基于 and 连接，查询的内容是青铜古棺，也可以是太空探测。</span><br><span class="line">        , <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;or&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// booleanMatch 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">booleanMatchQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并封装到Request对象中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// ES默认值显示10条数据，如需展示更多，需要手动指定Size的大小</span></span><br><span class="line">        <span class="comment">//------------------------------------------------------</span></span><br><span class="line">        builder.query(QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>,<span class="string">&quot;青铜古棺 太空探</span></span><br><span class="line"><span class="string">                                               // 选择 AND 或者 OR</span></span><br><span class="line"><span class="string">                                               测&quot;</span>).operator(Operator.AND));  </span><br><span class="line">        <span class="comment">//------------------------------------------------</span></span><br><span class="line">          request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client对象执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-4、multi-match查询"><a href="#6-2-4、multi-match查询" class="headerlink" title="6.2.4、multi_match查询"></a>6.2.4、multi_match查询</h5><blockquote><p>match是在一个Filed中筛选关键字，multi_match是一个关键字在多个Filed中查询</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># multi_match查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: [<span class="string">&quot;province&quot;</span>,<span class="string">&quot;smsContent&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiMatchQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定条件，添加进request</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.multiMatchQuery(<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;province&quot;</span>,<span class="string">&quot;smsContent&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一共查询到&quot;</span>+resp.getHits().getHits().length+<span class="string">&quot;条数据！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3、其它查询"><a href="#6-3、其它查询" class="headerlink" title="6.3、其它查询"></a>6.3、其它查询</h3><h5 id="6-3-1、id查询"><a href="#6-3-1、id查询" class="headerlink" title="6.3.1、id查询"></a>6.3.1、id查询</h5><blockquote><p>根据id查询，类似MySql中 where id = ？</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 根据id查询</span><br><span class="line">GET /sms-logs-index/sms-logs-type/1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fingById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建GetRequest</span></span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(index,type,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、执行查询</span></span><br><span class="line">        GetResponse resp = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、遍历查询后的结果</span></span><br><span class="line">        Map&lt;String, Object&gt; map = resp.getSourceAsMap();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-2、ids查询"><a href="#6-3-2、ids查询" class="headerlink" title="6.3.2、ids查询"></a>6.3.2、ids查询</h5><blockquote><p>根据多个id查询，类似MySql中 where id in (1,2,3….)</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 根据ids查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ids&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;values&quot;</span>: [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并添加到request中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.idsQuery().addIds(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client查询</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-3、prefix查询"><a href="#6-3-3、prefix查询" class="headerlink" title="6.3.3、prefix查询"></a>6.3.3、prefix查询</h5><blockquote><p>前缀查询，指定一段关键字做为前缀，从而查询以关键字开头的文档</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># prefix查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;海尔&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prefix 前缀查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并添加到request中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.prefixQuery(<span class="string">&quot;corpName&quot;</span>,<span class="string">&quot;海尔&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client查询</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-4、fuzzy查询"><a href="#6-3-4、fuzzy查询" class="headerlink" title="6.3.4、fuzzy查询"></a>6.3.4、fuzzy查询</h5><blockquote><p>模糊查询，我们输入字符的大概，ES会根据输入的内容大概匹配一下结果</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># fuzzy查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;海尔电集&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prefix_length&quot;</span>: <span class="number">3</span># 用来指定前面几个字符是不能出现错误的</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fuzzy 模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fuzzyQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并添加到request中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.fuzzyQuery(<span class="string">&quot;corpName&quot;</span>,<span class="string">&quot;海尔电集&quot;</span>).prefixLength(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client查询</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-5、wildcard查询"><a href="#6-3-5、wildcard查询" class="headerlink" title="6.3.5、wildcard查询"></a>6.3.5、wildcard查询</h5><blockquote><p>通配查询，和MySql中的like是一个东西。可以在查询时，在字符串中通配符 * 和 占位符 ？</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># wildcard 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;格力*&quot;</span># 可以使用 * 和 ？ 指定通配符和占位符</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wildcard 通配查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">wildCardQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并添加到request中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.wildcardQuery(<span class="string">&quot;corpName&quot;</span>,<span class="string">&quot;格力*&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Client查询</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-6、range查询"><a href="#6-3-6、range查询" class="headerlink" title="6.3.6、range查询"></a>6.3.6、range查询</h5><blockquote><p>范围查询，只针对数值类型，对一个Filed进行大于或者小于范围</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># range 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;fee&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">20</span></span><br><span class="line">          # 可以使用 gt：&gt;gte:&gt;=lt:&lt;lte:&lt;=</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range 范围查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并将其添加至Request</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.rangeQuery(<span class="string">&quot;fee&quot;</span>).gt(<span class="number">10</span>).lt(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行查询</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-7、regexp查询"><a href="#6-3-7、regexp查询" class="headerlink" title="6.3.7、regexp查询"></a>6.3.7、regexp查询</h5><blockquote><p>正则查询 ，通过你编写的正则表达式去匹配内容</p><p>PS：<a href="">prefix、fuzzy、wildcard 和 regexp 的查询效率相对比较低，在要求高效率的时候，尽量避免使用。</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># regexp 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;regexp&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;138[0-9]&#123;7&#125;&quot;</span># 编写正则表达式</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JAVA 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line"></span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// regexp 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regexpQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定查询条件，并将其添加到request对象中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.regexpQuery(<span class="string">&quot;mobile&quot;</span>,<span class="string">&quot;138[0-9]&#123;7&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回的结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4、深分页Scroll"><a href="#6-4、深分页Scroll" class="headerlink" title="6.4、深分页Scroll"></a>6.4、深分页Scroll</h3><blockquote><p>ES对 from+Size是有限制的，from和size之和不能超过1w，超过后效率非常低。</p><p>原理：</p><p>from+size在ES查询数据的方式：</p><ul><li>第一步、将用户输入的关键字进行分词。</li><li>第二步、去分词库中进行检索，得到文档id。</li><li>第三步、去各个分片中拉取指定的数据(耗时较长)。</li><li>第四步、数据根据分数(score)进行排序(耗时较长)。</li><li>第五步、根据from的起始值，舍弃起始值之前的数据。</li><li>第六步、返回结果。</li></ul><p>Scroll+size在ES查询数据的方式：</p><ul><li>第一步、将用户输入的关键字进行分词。</li><li>第二步、去分词库中进行检索，得到文档id。</li><li>第三步、将文档的id存放在ES的上下文中，</li><li>第四步、根据你指定的size的个数去ES中检索指定个数的数据，拿完数据的文档id，会从上下文中移除。</li><li>第五步、如果需要下一页的内容，直接去上下文中找后续的内容。</li><li>第六步、循环第四步和第五步</li></ul><p><a href="">Scroll 查询方式、不适合做实时查询，因为他是查询后放在内存，只是根据size的大小来拿出一部分，下一页的话还是去内存拿查好的，直到拿完。</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 执行scroll 查询，返回第一页数据，并且将文档id存放在上下文中</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search?scroll=1m# 指定文档的生存时间，1m=1分钟</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;:2,# 每次查询的条数</span><br><span class="line">  &quot;sort&quot;:[# 排序，根据指定的字段进行排序 </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;fee&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>:<span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 根据scroll查询下一页数据</span><br><span class="line">POST /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scroll_id&quot;</span>:# 根据第一步得到的scroll_id去指定</span><br><span class="line">  <span class="string">&quot;DnF1ZXJ5VGhlbkZldGNoAwAAAAAAAG6CFkNpUS0yRnNxU2g2bU9JQjBGWTNJV0EAAAAAAABugRZDaVEtMkZzcVNoNm1PSUIwRlkzSVdBAAAAAAAAboMWQ2lRLTJGc3FTaDZtT0lCMEZZM0lXQQ==&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scroll&quot;</span>:<span class="string">&quot;1m&quot;</span># scroll 的生存时间</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除scroll在上下文中的数据</span><br><span class="line">DELETE /_search/scroll/# scroll的id</span><br><span class="line">DnF1ZXJ5VGhlbkZldGNoAwAAAAAAAG6CFkNpUS0yRnNxU2g2bU9JQjBGWTNJV0EAAAAAAABugRZDaVEtMkZzcVNoNm1PSUIwRlkzSVdBAAAAAAAAboMWQ2lRLTJGc3FTaDZtT0lCMEZZM0lXQQ==</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现scroll查询、scroll下一页、删除scroll</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Scroll 查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建SearchRequest</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定scroll的生存时间</span></span><br><span class="line">        request.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、指定查询条件，并添加到request中</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.matchAllQuery());   <span class="comment">// 查询条件</span></span><br><span class="line">        builder.size(<span class="number">3</span>);    <span class="comment">// 每次查多少条</span></span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、通过Client执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、获得Scroll_id</span></span><br><span class="line">        String scroll_Id = resp.getScrollId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、返回结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------首页---------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">    <span class="comment">// scroll 下一页</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 7、创建SearchScrollRequest,开始下一页</span></span><br><span class="line">            SearchScrollRequest scrollRequest = <span class="keyword">new</span> SearchScrollRequest(scroll_Id);</span><br><span class="line">            <span class="comment">// 指定Scroll的生存时间</span></span><br><span class="line">            scrollRequest.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8、执行查询，返回结果</span></span><br><span class="line">            SearchResponse searchResponse = client.scroll(scrollRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 9、是否最后一下，是否查到了数据</span></span><br><span class="line">            SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">            <span class="keyword">if</span> (hits != <span class="keyword">null</span> &amp;&amp; hits.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------------------------下一页---------------------&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">                    System.out.println(sourceAsMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------------------------没有更多了---------------------&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">    <span class="comment">// scroll 删除 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 10、创建clearScroll</span></span><br><span class="line">        ClearScrollRequest clearScrollRequest = <span class="keyword">new</span> ClearScrollRequest();</span><br><span class="line">            <span class="comment">// 11、指定scroll_id</span></span><br><span class="line">        clearScrollRequest.addScrollId(scroll_Id);</span><br><span class="line">            <span class="comment">// 12、在上下文中删除scroll</span></span><br><span class="line">        client.clearScroll(clearScrollRequest,RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5、delete-by-query"><a href="#6-5、delete-by-query" class="headerlink" title="6.5、delete-by-query"></a>6.5、delete-by-query</h3><blockquote><p>根据term、match等方式查询删除文档，将查询出来的文档删除</p><p>ps：</p><p><a href="">如果你需要删除的内容，是index下的大部分内容，推荐创建一个全新的index，将需要保留的内容添加进全新的索引。</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># delete-by-query</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;fee&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delteByQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建deleteByQuery</span></span><br><span class="line">        DeleteByQueryRequest deleteByQueryRequest = <span class="keyword">new</span> DeleteByQueryRequest(index);</span><br><span class="line">        deleteByQueryRequest.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定检索条件         和SearchRequest指定检索条件不一样</span></span><br><span class="line">        deleteByQueryRequest.setQuery(QueryBuilders.rangeQuery(<span class="string">&quot;fee&quot;</span>).gte(<span class="number">10</span>).lte(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行删除</span></span><br><span class="line">        BulkByScrollResponse bulkByScrollResponse = client.deleteByQuery(deleteByQueryRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出返回结果</span></span><br><span class="line">        System.out.println(bulkByScrollResponse.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6、复合查询"><a href="#6-6、复合查询" class="headerlink" title="6.6、复合查询"></a>6.6、复合查询</h3><h5 id="6-6-1、bool查询"><a href="#6-6-1、bool查询" class="headerlink" title="6.6.1、bool查询"></a>6.6.1、bool查询</h5><blockquote><p>复合过滤器，将你的多个查询条件以一定的逻辑 组合在一起</p><ul><li>must：所有的条件以must组合在一起，表示 and 的意思。</li><li>must_not：将must_not中的条件，全部都不能匹配，表示 not 的意思。</li><li>should：所有的条件用 should 组合在一起表示 or 的意思。</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 查询城市为上海或者北京</span><br><span class="line"># 运营商不能是联通</span><br><span class="line"># smscontent必须包含一口和太空</span><br><span class="line"># bool查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;province&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;上海&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;province&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;北京&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;operatorId&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;九龙&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;拉棺&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boolQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、添加执行条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 查询城市为上海或者北京</span></span><br><span class="line">        boolQuery.should(QueryBuilders.termQuery(<span class="string">&quot;province&quot;</span>,<span class="string">&quot;上海&quot;</span>));</span><br><span class="line">        boolQuery.should(QueryBuilders.termQuery(<span class="string">&quot;province&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">        <span class="comment">// 运营商不能是联通</span></span><br><span class="line">        boolQuery.mustNot(QueryBuilders.termQuery(<span class="string">&quot;operatorId&quot;</span>,<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        <span class="comment">//smscontent必须包含九龙和拉棺</span></span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>,<span class="string">&quot;九龙&quot;</span>));</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>,<span class="string">&quot;拉棺&quot;</span>));</span><br><span class="line">        <span class="comment">// 把boolQuery添加进builder</span></span><br><span class="line">        builder.query(boolQuery);</span><br><span class="line">        <span class="comment">// 把检索条件添加进Request</span></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行操作</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-6-2、boosting查询"><a href="#6-6-2、boosting查询" class="headerlink" title="6.6.2、boosting查询"></a>6.6.2、boosting查询</h5><blockquote><p>boosting 查询可以帮助我们去影响查询后的score</p><ul><li>postive：postive中查询得到的内容，才会返回结果集。</li><li>negative：如果negative中查询的内容匹配，并且postive中查询的内容也匹配。我们可以操控negative_boost的指定系数，从而降低文档的score，查询结果的排序也会降低</li><li>negative_boost：指定系数，必须小于1.0.</li></ul><p>关于查询时文档的score时怎么计算的：</p><ul><li>搜索的关键字在文档中出现的频次越高，分数越高。</li><li>指定的文档内容越短，分数越高。</li><li>搜索时，指定的关键字会被分词，这个分词的内容，在分词库 中匹配的越多，分数越高。</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># boosting 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;boosting&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;positive&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;九龙拉棺&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;negative&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;上古&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;negative_boost&quot;</span>: <span class="number">0.2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// boosting 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boostingQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、添加执行条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        BoostingQueryBuilder boostingQueryBuilder = QueryBuilders.boostingQuery(</span><br><span class="line">                QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>, <span class="string">&quot;九龙拉棺&quot;</span>),</span><br><span class="line">                QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>, <span class="string">&quot;上古&quot;</span>)</span><br><span class="line">        ).negativeBoost(<span class="number">0.5f</span>);</span><br><span class="line">        <span class="comment">// 把boostingQueryBuilder添加进builder</span></span><br><span class="line">        builder.query(boostingQueryBuilder);</span><br><span class="line">        <span class="comment">// 把检索条件添加进Request</span></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行操作</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7、filter查询"><a href="#6-7、filter查询" class="headerlink" title="6.7、filter查询"></a>6.7、filter查询</h3><blockquote><p>query：根据你查询的条件，去计算文档匹配度得到一个分数，并且根据分数进行排序，不会做缓存。</p><p>filter：根据你的查询条件去查询文档，不会去计算分数，而且filter会对经常过滤的数据进行缓存</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># filter 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;trem&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;corpName&quot;</span>:<span class="string">&quot;格力汽车&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;range&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;fee&quot;</span>:&#123;</span><br><span class="line">              <span class="attr">&quot;lte&quot;</span>:<span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// # filter 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建SearchRequest对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、添加执行条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;corpName&quot;</span>,<span class="string">&quot;格力汽车&quot;</span>));</span><br><span class="line">        boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;fee&quot;</span>).lte(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 把boolQuery添加进builder</span></span><br><span class="line">        builder.query(boolQuery);</span><br><span class="line">        <span class="comment">// 把检索条件添加进Request</span></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行操作</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历返回结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8、高亮查询"><a href="#6-8、高亮查询" class="headerlink" title="6.8、高亮查询"></a>6.8、高亮查询</h3><blockquote><p>高亮查询就是将用户输入的关键字，查询后，以特殊的样式返回在结果中。</p><p>高亮展示的数据，本身就是文档的一个Filed，单独将Filed以highlight的形式返回</p><p>ES中提供了一个highlight属性，用来高亮，和query同级别：</p><ul><li>fragment_size：高亮查询返回多少个字符</li><li>pre_tags：指定前缀标签，例如：<font color=red></li><li>post_tags：指定后缀标签，例如：</font></li><li>fileds：指定哪几个Filed字段以高亮形式返回</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 高亮查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;九龙拉棺&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;font color=red&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/font&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fragment_size&quot;</span>:<span class="number">10</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高亮查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">highLightQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        <span class="comment">// 2、指定查询条件和高亮</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>,<span class="string">&quot;九龙拉棺&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定高亮</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(<span class="string">&quot;smsContent&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        highlightBuilder.preTags(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">&quot;&lt;font&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        builder.highlighter(highlightBuilder);</span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出高亮结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            System.out.println(highlightFields.get(<span class="string">&quot;smsContent&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9、聚合查询"><a href="#6-9、聚合查询" class="headerlink" title="6.9、聚合查询"></a>6.9、聚合查询</h3><blockquote><p>ES的聚合查询和MySql的类似，但是要比MySql的丰富。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚合查询，RestFul语法</span><br><span class="line">POST /index/type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;聚合查询的名字(随意取)&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;cardinality(不同聚合函数的名字)&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;属性&quot;</span>: <span class="string">&quot;值&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-9-1、去重计数"><a href="#6-9-1、去重计数" class="headerlink" title="6.9.1、去重计数"></a>6.9.1、去重计数</h5><blockquote><p>在一次查询中，每条数据都有自己的省份，现在要统计不同的省份一共出现了几次？数据中有很多条可能省份都一样，我们需要去掉重复出现的，再统计一共出现了多少次。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚合查询，去重计数</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;agg&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;cardinality&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;province&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合查询,去重计数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo14</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cardinalityQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        <span class="comment">// 2、指定聚合查询的方式</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.aggregation(AggregationBuilders.cardinality(<span class="string">&quot;agg&quot;</span>).field(<span class="string">&quot;province&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出聚合查询的结果</span></span><br><span class="line">        Cardinality agg = resp.getAggregations().get(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line">        System.out.println(agg.getValue());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-9-2、范围统计"><a href="#6-9-2、范围统计" class="headerlink" title="6.9.2、范围统计"></a>6.9.2、范围统计</h5><blockquote><p>统计一定范围内文档出现的个数</p><p>统计可以针对数值类行，也可以针对日期类型，也可以针对ip类型</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># 聚合查询，范围内个数统计,数值类型</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;agg&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">           <span class="attr">&quot;to&quot;</span>: <span class="number">10</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 聚合查询，范围内个数统计,日期类型</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;agg&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;createDate&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;yyyy-MM-dd&quot;</span>, </span><br><span class="line">       <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;2000-01-01&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;2020-12-30&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;2000-01-01&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;2020-01-01&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 聚合查询，范围内个数统计,IP类型</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;agg&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;ip_range&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;ipAddr&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;127.0.0.0&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;127.0.0.30&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;127.0.0.0&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;127.0.0.10&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合函数 范围统计</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定聚合函数查询方式</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.aggregation(AggregationBuilders.range(<span class="string">&quot;agg&quot;</span>).field(<span class="string">&quot;id&quot;</span>).addRange(<span class="number">0</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">        Range agg = resp.getAggregations().get(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Range.Bucket bucket : agg.getBuckets()) &#123;</span><br><span class="line">            String key = bucket.getKeyAsString();</span><br><span class="line">            Object from = bucket.getFrom();</span><br><span class="line">            Object to = bucket.getTo();</span><br><span class="line">            <span class="keyword">long</span> docCount = bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;key:--&gt;&quot;</span>+key);</span><br><span class="line">            System.out.println(<span class="string">&quot;from:--&gt;&quot;</span>+from);</span><br><span class="line">            System.out.println(<span class="string">&quot;to:--&gt;&quot;</span>+to);</span><br><span class="line">            System.out.println(<span class="string">&quot;docCount:--&gt;&quot;</span>+docCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-9-3、统计聚合"><a href="#6-9-3、统计聚合" class="headerlink" title="6.9.3、统计聚合"></a>6.9.3、统计聚合</h5><blockquote><p>它可以帮你查询指定Filed的最大值、最小值、平均值、平方和 ……..</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚合查询，统计聚合</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;agg&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;extended_stats&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;id&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合函数 范围统计</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;sms-logs-index&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;sms-logs-type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendedStatsQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建Request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定聚合函数查询方式</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.aggregation(AggregationBuilders.extendedStats(<span class="string">&quot;agg&quot;</span>).field(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">        ExtendedStats agg = resp.getAggregations().get(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> max = agg.getMax();</span><br><span class="line">        <span class="keyword">double</span> min = agg.getMin();</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值为：&quot;</span>+max);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值为：&quot;</span>+min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-10、地图经纬度搜索"><a href="#6-10、地图经纬度搜索" class="headerlink" title="6.10、地图经纬度搜索"></a>6.10、地图经纬度搜索</h3><blockquote><p>ES中提供了一种 geo_point 的数据类型来存储经纬度。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 因为没有，我们可以创建一个简单的带 geo_point 的index</span><br><span class="line"></span><br><span class="line"># 创建一个带 geo_point 的 index</span><br><span class="line">PUT /map</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">5</span>, </span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;map&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;geo_point&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加数据</span><br><span class="line"></span><br><span class="line">POST /map/map/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;天安门&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;lon&quot;</span>:<span class="number">116.403874</span>,</span><br><span class="line">    <span class="attr">&quot;lat&quot;</span>:<span class="number">39.915129</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /map/map/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;海定公园&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;lon&quot;</span>:<span class="number">116.301314</span>,</span><br><span class="line">    <span class="attr">&quot;lat&quot;</span>:<span class="number">39.99319</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /map/map/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;北京动物园&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;lon&quot;</span>:<span class="number">116.343283</span>,</span><br><span class="line">    <span class="attr">&quot;lat&quot;</span>:<span class="number">39.949175</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-10-1、ES中地图的检索方式"><a href="#6-10-1、ES中地图的检索方式" class="headerlink" title="6.10.1、ES中地图的检索方式"></a>6.10.1、ES中地图的检索方式</h5><blockquote><ul><li>geo_distance：确定一个点搜索半径范围内的所有数据。</li><li>geo_bounding_box：以两个点确定一个矩形，获取矩形内所有的数据。</li><li>geo_polygon：以多个点确定一个多边形，获取多边形内的全部数据。</li></ul></blockquote><p><strong>geo_distance：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># geo_distance 查询</span><br><span class="line">POST /map/map/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">      &quot;location&quot;: &#123;             # 确定一个点</span><br><span class="line">        &quot;lon&quot;:116.365705,</span><br><span class="line">        &quot;lat&quot;:39.909781</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;distance&quot;:4000,   # 确定半径范围</span><br><span class="line">      &quot;distance_type&quot;:&quot;arc&quot;    # 指定搜索的形状为圆形</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>geo_bounding_box：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># geo_bounding_box 查询</span><br><span class="line">POST /map/map/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_bounding_box&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">          &quot;top_left&quot;:&#123;# 左上坐标点</span><br><span class="line">            &quot;lon&quot;:116.238504,</span><br><span class="line">            &quot;lat&quot;:40.043363</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;bottom_right&quot;:&#123;# 右下坐标点</span><br><span class="line">            &quot;lon&quot;:116.492905,</span><br><span class="line">            &quot;lat&quot;:39.799223</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>geo_polygon：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># geo_polyon 查询</span><br><span class="line">POST /map/map/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_polygon&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;points&quot;</span>:[# 确定多个点</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">&quot;lon&quot;</span>:<span class="number">116.408248</span>,</span><br><span class="line">            <span class="attr">&quot;lat&quot;</span>:<span class="number">39.968643</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;lon&quot;</span>:<span class="number">116.310225</span>,</span><br><span class="line">            <span class="attr">&quot;lat&quot;</span>:<span class="number">39.879224</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">&quot;lon&quot;</span>:<span class="number">116.50081</span>,</span><br><span class="line">            <span class="attr">&quot;lat&quot;</span>:<span class="number">39.874351</span></span><br><span class="line">         &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-11、基于geo-polygon使用Java实现查询"><a href="#6-11、基于geo-polygon使用Java实现查询" class="headerlink" title="6.11、基于geo_polygon使用Java实现查询"></a>6.11、基于geo_polygon使用Java实现查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 地图检索</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RestHighLevelClient client =  ESClint.getClient();</span><br><span class="line">    String index = <span class="string">&quot;map&quot;</span>;</span><br><span class="line">    String type=<span class="string">&quot;map&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">geoQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、常见SearchRequest</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、指定检索条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// 添加三个坐标</span></span><br><span class="line">        ArrayList&lt;GeoPoint&gt; points = <span class="keyword">new</span> ArrayList&lt;GeoPoint&gt;();</span><br><span class="line">        points.add(<span class="keyword">new</span> GeoPoint(<span class="number">39.968643</span>,<span class="number">116.408248</span>));</span><br><span class="line">        points.add(<span class="keyword">new</span> GeoPoint(<span class="number">39.879224</span>,<span class="number">116.310225</span>));</span><br><span class="line">        points.add(<span class="keyword">new</span> GeoPoint(<span class="number">39.874351</span>,<span class="number">116.50081</span>));</span><br><span class="line">        builder.query(QueryBuilders.geoPolygonQuery(<span class="string">&quot;location&quot;</span>,points));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出</span></span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">                System.out.println(hit.getSourceAsMap());</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提取Wallpaper Engine中的壁纸</title>
      <link href="posts/b5c2b25e/"/>
      <url>posts/b5c2b25e/</url>
      
        <content type="html"><![CDATA[<p>前几天在浏览Wallpaper Engine的时候发现了一张好漂亮的壁纸 ，查看源文件后发现只有一张模糊的图片。</p><p>后来看到有位大佬的工具可以提取壁纸！</p><p><font color= red>大佬的地址</font>：<a href="http://blog.repeater.vip/?p=196">http://blog.repeater.vip/?p=196</a></p><h3 id="提取步骤"><a href="#提取步骤" class="headerlink" title="提取步骤"></a>提取步骤</h3><h5 id="1、下载解压的工具"><a href="#1、下载解压的工具" class="headerlink" title="1、下载解压的工具"></a>1、下载解压的工具</h5><h5 id="2、找到壁纸源文件中的pkg结尾的文件"><a href="#2、找到壁纸源文件中的pkg结尾的文件" class="headerlink" title="2、找到壁纸源文件中的pkg结尾的文件"></a>2、找到壁纸源文件中的pkg结尾的文件</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211162736.png" alt="image-20201211162736556"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211163002.png" alt="image-20201211163002821"></p><h5 id="3、在任意地方新建一个文件夹，将解压软件后和pkg文件一同放入到新建的目录中"><a href="#3、在任意地方新建一个文件夹，将解压软件后和pkg文件一同放入到新建的目录中" class="headerlink" title="3、在任意地方新建一个文件夹，将解压软件后和pkg文件一同放入到新建的目录中"></a>3、在任意地方新建一个文件夹，将解压软件后和pkg文件一同放入到新建的目录中</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211163529.png" alt="image-20201211163529049"></p><h5 id="4、运行解包程序，获得壁纸"><a href="#4、运行解包程序，获得壁纸" class="headerlink" title="4、运行解包程序，获得壁纸"></a>4、运行解包程序，获得壁纸</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211163923.png" alt="image-20201211163923592"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211164007.png" alt="image-20201211164007767"></p><blockquote><p>wallpaper engine壁纸如果没有pkg文件的话为视频壁纸，无法提取。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wallpaper Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora + PicGo + Gitee 实现免费的图床</title>
      <link href="posts/ae713651/"/>
      <url>posts/ae713651/</url>
      
        <content type="html"><![CDATA[<p>Typora + PicGo + Gitee 实现免费的图床，让typora更加的顺滑！</p><p>在最开始使用Typora写博客的时候，是知道有这个功能的。网上看了一圈之后感觉有点麻烦就放弃了，直到前几天写了一篇包含大量的图文的博文时。在本地看还好，上传到网上就杯具了。于是又想起了之前的事，琢磨下感觉异常的简单…..</p><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h5 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h5><p>官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130152233.png" alt="image-20201130152232959"></p><h5 id="2、安装PicGo"><a href="#2、安装PicGo" class="headerlink" title="2、安装PicGo"></a>2、安装PicGo</h5><p>官网：<a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p><p>最新版目前是2.3.0，我们选择稳定的2.2.2版就行了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130153701.png" alt="image-20201130153701274"></p><h5 id="3、在gitee上新建一个仓库当作图床"><a href="#3、在gitee上新建一个仓库当作图床" class="headerlink" title="3、在gitee上新建一个仓库当作图床"></a>3、在gitee上新建一个仓库当作图床</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130155112.png" alt="image-20201130155112427"></p><h5 id="4、生成Token"><a href="#4、生成Token" class="headerlink" title="4、生成Token"></a>4、生成Token</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130155720.png" alt="image-20201130155720276"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130160337.png" alt="image-20201130160337336"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130160518.png" alt="image-20201130160518376"></p><h5 id="5、配置PicGo"><a href="#5、配置PicGo" class="headerlink" title="5、配置PicGo"></a>5、配置PicGo</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130160731.png" alt="image-20201130160731553"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130161703.png" alt="image-20201130161703751"></p><h5 id="6、Typora配置"><a href="#6、Typora配置" class="headerlink" title="6、Typora配置"></a>6、Typora配置</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130162306.png" alt="image-20201130162306273"></p><h5 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201130162639.png" alt="image-20201130162639436"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok使用</title>
      <link href="posts/1a78bb16/"/>
      <url>posts/1a78bb16/</url>
      
        <content type="html"><![CDATA[<p>Lombok是一个java库，它可以自动插入编辑器并构建工具，为java增色。</p><p>永远不要再编写另一个getter或equals方法，使用一个注释，您的类就有了一个功能齐全的构建器，自动化您的日志变量，等等。</p><a id="more"></a><ul><li><p>基本使用</p><p>1、首先我们需要导入jar包</p><p><a href="https://repo1.maven.org/maven2/org/projectlombok/lombok/1.18.10/lombok-1.18.10.jar">点击下载 jar包-1.18.10</a></p><pre><code>如果使用Maven构建项目的话，直接导入就OK了</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、我们需要去idea的插件市场下载lombok，安装完成重启idea即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/quehua/blogimg/raw/master/img/20201211114318.png" alt="Lombok"></p></li><li><p>常用的注解应用及功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用类上，生成所有成员变量的getter/setter方法;</span></span><br><span class="line"><span class="comment">//作用于成员变量上，生成该成员变量的getter/setter方法。</span></span><br><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//主要作用于成员变量和参数中，标识不能为空，否则抛出空指针异常。    </span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//作用于类，覆盖默认的toString()方法</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//作用于类，覆盖默认的equals和hashCode</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//@AllArgsConstructor:生成全参构造器</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor:生成无参构造器</span></span><br><span class="line"><span class="comment">//@RequiredArgsConstructor:生成包含final和@NonNull注解的成员变量的构造器</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//作用于类上，生成日志变量。针对不同的日志实现产品，有不同的注解</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//作用于类上，是以下注解的集合：@ToString @EqualsAndHashCode @Getter</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//作用于类上，将类转变为建造者模式</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">//可以对受检异常进行捕捉并抛出</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lombok </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
